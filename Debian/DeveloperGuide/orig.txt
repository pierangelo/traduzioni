2
"Best Packaging Practices"
7
"Debian's quality is largely due to the <ulink "
"url=\"&url-debian-policy;\">Debian Policy</ulink>, which defines explicit "
"baseline requirements which all Debian packages must fulfill.  Yet there is "
"also a shared history of experience which goes beyond the Debian Policy, an "
"accumulation of years of experience in packaging.  Many very talented people ""have created great tools, tools which help you, the Debian maintainer, "
"create and maintain excellent packages."
20
"This chapter provides some best practices for Debian developers.  All "
"recommendations are merely that, and are not requirements or policy.  These "
"are just some subjective hints, advice and pointers collected from Debian "
"developers.  Feel free to pick and choose whatever works best for you."
29
"Best practices for <filename>debian/rules</filename>"
34
"The following recommendations apply to the <filename>debian/rules</filename> ""file.  Since <filename>debian/rules</filename> controls the build process "
"and selects the files which go into the package (directly or indirectly), "
"it's usually the file maintainers spend the most time on."
44
"Helper scripts"
49
"The rationale for using helper scripts in <filename>debian/rules</filename> "
"is that they let maintainers use and share common logic among many "
"packages.  Take for instance the question of installing menu entries: you "
"need to put the file into <filename>/usr/share/menu</filename> (or "
"<filename>/usr/lib/menu</filename> for executable binary menufiles, if this "
"is needed), and add commands to the maintainer scripts to register and "
"unregister the menu entries.  Since this is a very common thing for packages ""to do, why should each maintainer rewrite all this on their own, sometimes "
"with bugs? Also, supposing the menu directory changed, every package would "
"have to be changed."
65
"Helper scripts take care of these issues.  Assuming you comply with the "
"conventions expected by the helper script, the helper takes care of all the "
"details.  Changes in policy can be made in the helper script; then packages "
"just need to be rebuilt with the new version of the helper and no other "
"changes."
75
"<xref linkend=\"tools\"/> contains a couple of different helpers.  The most "
"common and best (in our opinion) helper system is <systemitem "
"role=\"package\">debhelper</systemitem>.  Previous helper systems, such as "
"<systemitem role=\"package\">debmake</systemitem>, were monolithic: you "
"couldn't pick and choose which part of the helper you found useful, but had "
"to use the helper to do everything.  <systemitem "
"role=\"package\">debhelper</systemitem>, however, is a number of separate "
"little <command>dh_*</command> programs.  For instance, "
"<command>dh_installman</command> installs and compresses man pages, "
"<command>dh_installmenu</command> installs menu files, and so on.  Thus, it "
"offers enough flexibility to be able to use the little helper scripts, where ""useful, in conjunction with hand-crafted commands in "
"<filename>debian/rules</filename>."
94
"You can get started with <systemitem role=\"package\">debhelper</systemitem> ""by reading <citerefentry> <refentrytitle>debhelper</refentrytitle> "
"<manvolnum>1</manvolnum> </citerefentry>, and looking at the examples that "
"come with the package.  <command>dh_make</command>, from the <systemitem "
"role=\"package\">dh-make</systemitem> package (see <xref "
"linkend=\"dh-make\"/>), can be used to convert a vanilla source package to a ""<systemitem role=\"package\">debhelper</systemitem>ized package.  This "
"shortcut, though, should not convince you that you do not need to bother "
"understanding the individual <command>dh_*</command> helpers.  If you are "
"going to use a helper, you do need to take the time to learn to use that "
"helper, to learn its expectations and behavior."
112
"Separating your patches into multiple files"
117
"Big, complex packages may have many bugs that you need to deal with.  If you ""correct a number of bugs directly in the source, and you're not careful, it "
"can get hard to differentiate the various patches that you applied.  It can "
"get quite messy when you have to update the package to a new upstream "
"version which integrates some of the fixes (but not all).  You can't take "
"the total set of diffs (e.g., from <filename>.diff.gz</filename>) and work "
"out which patch sets to back out as a unit as bugs are fixed upstream."
130
"Fortunately, with the source format “3.0 (quilt)” it is now possible to keep "
"patches separate without having to modify <filename>debian/rules</filename> "
"to setup a patch system. Patches are stored in "
"<filename>debian/patches/</filename> and when the source package is unpacked ""patches listed in <filename>debian/patches/series</filename> are "
"automatically applied.  As the name implies, patches can be managed with "
"<command>quilt</command>."
144
"When using the older source “1.0”, it's also possible to separate patches "
"but a dedicated patch system must be used: the patch files are shipped "
"within the Debian patch file (<filename>.diff.gz</filename>), usually within ""the <filename>debian/</filename> directory. The only difference is that they ""aren't applied immediately by <command>dpkg-source</command>, but by the "
"<literal>build</literal> rule of <filename>debian/rules</filename>, through "
"a dependency on the <literal>patch</literal> rule.  Conversely, they are "
"reverted in the <literal>clean</literal> rule, through a dependency on the "
"<literal>unpatch</literal> rule."
161
"<command>quilt</command> is the recommended tool for this.  It does all of "
"the above, and also allows to manage patch series.  See the <systemitem "
"role=\"package\">quilt</systemitem> package for more information."
169
"There are other tools to manage patches, like <command>dpatch</command>, and ""the patch system integrated with <systemitem "
"role=\"package\">cdbs</systemitem>."
178
"Multiple binary packages"
183
"A single source package will often build several binary packages, either to "
"provide several flavors of the same software (e.g., the <systemitem "
"role=\"package\">vim</systemitem> source package) or to make several small "
"packages instead of a big one (e.g., so the user can install only the subset ""needed, and thus save some disk space)."
194
"The second case can be easily managed in <filename>debian/rules</filename>.  ""You just need to move the appropriate files from the build directory into "
"the package's temporary trees.  You can do this using "
"<command>install</command> or <command>dh_install</command> from <systemitem ""role=\"package\">debhelper</systemitem>.  Be sure to check the different "
"permutations of the various packages, ensuring that you have the "
"inter-package dependencies set right in <filename>debian/control</filename>."
208
"The first case is a bit more difficult since it involves multiple recompiles ""of the same software but with different configuration options.  The "
"<systemitem role=\"package\">vim</systemitem> source package is an example "
"of how to manage this using an hand-crafted "
"<filename>debian/rules</filename> file."
219
"Best practices for <filename>debian/control</filename>"
224
"The following practices are relevant to the "
"<filename>debian/control</filename> file.  They supplement the <ulink "
"url=\"&url-debian-policy;ch-binary.html#s-descriptions\">Policy on package "
"descriptions</ulink>."
233
"The description of the package, as defined by the corresponding field in the ""<filename>control</filename> file, contains both the package synopsis and "
"the long description for the package.  <xref linkend=\"bpp-desc-basics\"/> "
"describes common guidelines for both parts of the package description.  "
"Following that, <xref linkend=\"bpp-pkg-synopsis\"/> provides guidelines "
"specific to the synopsis, and <xref linkend=\"bpp-pkg-desc\"/> contains "
"guidelines specific to the description."
246
"General guidelines for package descriptions"
251
"The package description should be written for the average likely user, the "
"average person who will use and benefit from the package.  For instance, "
"development packages are for developers, and can be technical in their "
"language.  More general-purpose applications, such as editors, should be "
"written for a less technical user."
261
"Our review of package descriptions lead us to conclude that most package "
"descriptions are technical, that is, are not written to make sense for "
"non-technical users.  Unless your package really is only for technical "
"users, this is a problem."
270
"How do you write for non-technical users? Avoid jargon.  Avoid referring to "
"other applications or frameworks that the user might not be familiar with — "
"GNOME or KDE is fine, since users are probably familiar with these terms, "
"but GTK+ is probably not.  Try not to assume any knowledge at all.  If you "
"must use technical terms, introduce them."
281
"Be objective.  Package descriptions are not the place for advocating your "
"package, no matter how much you love it.  Remember that the reader may not "
"care about the same things you care about."
289
"References to the names of any other software packages, protocol names, "
"standards, or specifications should use their canonical forms, if one "
"exists.  For example, use X Window System, X11, or X; not X Windows, "
"X-Windows, or X Window.  Use GTK+, not GTK or gtk.  Use GNOME, not Gnome.  "
"Use PostScript, not Postscript or postscript."
299
"If you are having problems writing your description, you may wish to send it ""along to &email-debian-l10n-english; and request feedback."
307
"The package synopsis, or short description"
312
"Policy says the synopsis line (the short description) must be concise, not "
"repeating the package name, but also informative."
319
"The synopsis functions as a phrase describing the package, not a complete "
"sentence, so sentential punctuation is inappropriate: it does not need extra ""capital letters or a final period (full stop). It should also omit any "
"initial indefinite or definite article — \"a\", \"an\", or \"the\". Thus for "
"instance:"
331
"Package: libeg0\n"
"Description: exemplification support library\n"
339
"Technically this is a noun phrase minus articles, as opposed to a verb "
"phrase.  A good heuristic is that it should be possible to substitute the "
"package <replaceable>name</replaceable> and "
"<replaceable>synopsis</replaceable> into this formula:"
348
"The package <replaceable>name</replaceable> provides {a,an,the,some} "
"<replaceable>synopsis</replaceable>."
355
"Sets of related packages may use an alternative scheme that divides the "
"synopsis into two parts, the first a description of the whole suite and the "
"second a summary of the package's role within it:"
363
"Package: eg-tools\n"
"Description: simple exemplification system (utilities)\n"
"\t\t\t              \n"
"Package: eg-doc\n"
"Description: simple exemplification system - documentation\n"
374
"These synopses follow a modified formula. Where a package "
"\"<replaceable>name</replaceable>\" has a synopsis "
"\"<replaceable>suite</replaceable> (<replaceable>role</replaceable>)\" or "
"\"<replaceable>suite</replaceable> - <replaceable>role</replaceable>\", the "
"elements should be phrased so that they fit into the formula:"
384
"The package <replaceable>name</replaceable> provides {a,an,the} "
"<replaceable>role</replaceable> for the <replaceable>suite</replaceable>."
391
"The long description"
396
"The long description is the primary information available to the user about "
"a package before they install it.  It should provide all the information "
"needed to let the user decide whether to install the package.  Assume that "
"the user has already read the package synopsis."
405
"The long description should consist of full and complete sentences."
410
"The first paragraph of the long description should answer the following "
"questions: what does the package do? what task does it help the user "
"accomplish? It is important to describe this in a non-technical way, unless "
"of course the audience for the package is necessarily technical."
419
"The following paragraphs should answer the following questions: Why do I as "
"a user need this package? What other features does the package have? What "
"outstanding features and deficiencies are there compared to other packages "
"(e.g., if you need X, use Y instead)? Is this package related to other "
"packages in some way that is not handled by the package manager (e.g., this "
"is the client for the foo server)?"
430
"Be careful to avoid spelling and grammar mistakes.  Ensure that you "
"spell-check it.  Both <command>ispell</command> and "
"<command>aspell</command> have special modes for checking "
"<filename>debian/control</filename> files:"
439
"ispell -d american -g debian/control\n"
445
"aspell -d en -D -c debian/control\n"
451
"Users usually expect these questions to be answered in the package "
"description:"
458
"What does the package do? If it is an add-on to another package, then the "
"short description of the package we are an add-on to should be put in here."
465
"Why should I want this package? This is related to the above, but not the "
"same (this is a mail user agent; this is cool, fast, interfaces with PGP and ""LDAP and IMAP, has features X, Y, and Z)."
474
"If this package should not be installed directly, but is pulled in by "
"another package, this should be mentioned."
481
"If the package is <literal>experimental</literal>, or there are other "
"reasons it should not be used, if there are other packages that should be "
"used instead, it should be here as well."
489
"How is this package different from the competition? Is it a better "
"implementation? more features? different features? Why should I choose this "
"package."
497
"Upstream home page"
502
"We recommend that you add the URL for the package's home page in the "
"<literal>Homepage</literal> field of the <literal>Source</literal> section "
"in <filename>debian/control</filename>.  Adding this information in the "
"package description itself is considered deprecated."
511
"Version Control System location"
516
"There are additional fields for the location of the Version Control System "
"in <filename>debian/control</filename>."
523
"Vcs-Browser"
528
"Value of this field should be a <literal>http://</literal> URL pointing to a ""web-browsable copy of the Version Control System repository used to maintain ""the given package, if available."
538
"The information is meant to be useful for the final user, willing to browse "
"the latest work done on the package (e.g.  when looking for the patch fixing ""a bug tagged as <literal>pending</literal> in the bug tracking system)."
547
"Vcs-*"
552
"Value of this field should be a string identifying unequivocally the "
"location of the Version Control System repository used to maintain the given ""package, if available.  <literal>*</literal> identify the Version Control "
"System; currently the following systems are supported by the package "
"tracking system: <literal>arch</literal>, <literal>bzr</literal> (Bazaar), "
"<literal>cvs</literal>, <literal>darcs</literal>, <literal>git</literal>, "
"<literal>hg</literal> (Mercurial), <literal>mtn</literal> (Monotone), "
"<literal>svn</literal> (Subversion).  It is allowed to specify different VCS ""fields for the same package: they will all be shown in the PTS web "
"interface."
569
"The information is meant to be useful for a user knowledgeable in the given "
"Version Control System and willing to build the current version of a package ""from the VCS sources.  Other uses of this information might include "
"automatic building of the latest VCS version of the given package.  To this "
"end the location pointed to by the field should better be version agnostic "
"and point to the main branch (for VCSs supporting such a concept).  Also, "
"the location pointed to should be accessible to the final user; fulfilling "
"this requirement might imply pointing to an anonymous access of the "
"repository instead of pointing to an SSH-accessible version of the same."
584
"In the following example, an instance of the field for a Subversion "
"repository of the <systemitem role=\"package\">vim</systemitem> package is "
"shown.  Note how the URL is in the <literal>svn://</literal> scheme (instead ""of <literal>svn+ssh://</literal>) and how it points to the "
"<filename>trunk/</filename> branch.  The use of the "
"<literal>Vcs-Browser</literal> and <literal>Homepage</literal> fields "
"described above is also shown."
597
"  Source: vim\n"
"  Section: editors\n"
"  Priority: optional\n"
"  &lt;snip&gt;\n"
"  Vcs-Svn: svn://svn.debian.org/svn/pkg-vim/trunk/packages/vim\n"
"  Vcs-Browser: http://svn.debian.org/wsvn/pkg-vim/trunk/packages/vim\n"
"  Homepage: http://www.vim.org\n"
610
"Best practices for <filename>debian/changelog</filename>"
615
"The following practices supplement the <ulink "
"url=\"&url-debian-policy;ch-docs.html#s-changelogs\">Policy on changelog "
"files</ulink>."
623
"Writing useful changelog entries"
628
"The changelog entry for a package revision documents changes in that "
"revision, and only them.  Concentrate on describing significant and "
"user-visible changes that were made since the last version."
636
"Focus on <emphasis>what</emphasis> was changed — who, how and when are "
"usually less important.  Having said that, remember to politely attribute "
"people who have provided notable help in making the package (e.g., those who ""have sent in patches)."
646
"There's no need to elaborate the trivial and obvious changes.  You can also "
"aggregate several changes in one entry.  On the other hand, don't be overly "
"terse if you have undertaken a major change.  Be especially clear if there "
"are changes that affect the behaviour of the program.  For further "
"explanations, use the <filename>README.Debian</filename> file."
656
"Use common English so that the majority of readers can comprehend it.  Avoid ""abbreviations, tech-speak and jargon when explaining changes that close "
"bugs, especially for bugs filed by users that did not strike you as "
"particularly technically savvy.  Be polite, don't swear."
666
"It is sometimes desirable to prefix changelog entries with the names of the "
"files that were changed.  However, there's no need to explicitly list each "
"and every last one of the changed files, especially if the change was small "
"or repetitive.  You may use wildcards."
675
"When referring to bugs, don't assume anything.  Say what the problem was, "
"how it was fixed, and append the closes: #nnnnn string.  See <xref "
"linkend=\"upload-bugfix\"/> for more information."
683
"Common misconceptions about changelog entries"
688
"The changelog entries should <emphasis role=\"strong\">not</emphasis> "
"document generic packaging issues (Hey, if you're looking for foo.conf, it's ""in /etc/blah/.), since administrators and users are supposed to be at least "
"remotely acquainted with how such things are generally arranged on Debian "
"systems.  Do, however, mention if you change the location of a configuration ""file."
701
"The only bugs closed with a changelog entry should be those that are "
"actually fixed in the same package revision.  Closing unrelated bugs in the "
"changelog is bad practice.  See <xref linkend=\"upload-bugfix\"/>."
709
"The changelog entries should <emphasis role=\"strong\">not</emphasis> be "
"used for random discussion with bug reporters (I don't see segfaults when "
"starting foo with option bar; send in more info), general statements on "
"life, the universe and everything (sorry this upload took me so long, but I "
"caught the flu), or pleas for help (the bug list on this package is huge, "
"please lend me a hand).  Such things usually won't be noticed by their "
"target audience, but may annoy people who wish to read information about "
"actual changes in the package.  See <xref linkend=\"bug-answering\"/> for "
"more information on how to use the bug tracking system."
723
"It is an old tradition to acknowledge bugs fixed in non-maintainer uploads "
"in the first changelog entry of the proper maintainer upload.  As we have "
"version tracking now, it is enough to keep the NMUed changelog entries and "
"just mention this fact in your own changelog entry."
732
"Common errors in changelog entries"
737
"The following examples demonstrate some common errors or examples of bad "
"style in changelog entries."
744
"  * Fixed all outstanding bugs.\n"
750
"This doesn't tell readers anything too useful, obviously."
755
"  * Applied patch from Jane Random.\n"
761
"What was the patch about?"
766
"  * Late night install target overhaul.\n"
772
"Overhaul which accomplished what? Is the mention of late night supposed to "
"remind us that we shouldn't trust that code?"
779
"  * Fix vsync FU w/ ancient CRTs.\n"
785
"Too many acronyms, and it's not overly clear what the, uh, fsckup (oops, a "
"curse word!) was actually about, or how it was fixed."
792
"  * This is not a bug, closes: #nnnnnn.\n"
798
"First of all, there's absolutely no need to upload the package to convey "
"this information; instead, use the bug tracking system.  Secondly, there's "
"no explanation as to why the report is not a bug."
806
"  * Has been fixed for ages, but I forgot to close; closes: #54321.\n"
812
"If for some reason you didn't mention the bug number in a previous changelog ""entry, there's no problem, just close the bug normally in the BTS.  There's "
"no need to touch the changelog file, presuming the description of the fix is ""already in (this applies to the fixes by the upstream authors/maintainers as ""well, you don't have to track bugs that they fixed ages ago in your "
"changelog)."
826
"  * Closes: #12345, #12346, #15432\n"
832
"Where's the description? If you can't think of a descriptive message, start "
"by inserting the title of each different bug."
839
"Supplementing changelogs with <filename>NEWS.Debian</filename> files"
844
"Important news about changes in a package can also be put in "
"<filename>NEWS.Debian</filename> files.  The news will be displayed by tools ""like <systemitem role=\"package\">apt-listchanges</systemitem>, before all "
"the rest of the changelogs.  This is the preferred means to let the user "
"know about significant changes in a package.  It is better than using "
"<systemitem role=\"package\">debconf</systemitem> notes since it is less "
"annoying and the user can go back and refer to the "
"<filename>NEWS.Debian</filename> file after the install.  And it's better "
"than listing major changes in <filename>README.Debian</filename>, since the "
"user can easily miss such notes."
860
"The file format is the same as a debian changelog file, but leave off the "
"asterisks and describe each news item with a full paragraph when necessary "
"rather than the more concise summaries that would go in a changelog.  It's a ""good idea to run your file through <literal>dpkg-parsechangelog</literal> to ""check its formatting as it will not be automatically checked during build as ""the changelog is.  Here is an example of a real "
"<filename>NEWS.Debian</filename> file:"
875
"cron (3.0pl1-74) unstable; urgency=low\n"
"\n"
"    The checksecurity script is no longer included with the cron package:\n"
"    it now has its own package, checksecurity. If you liked the\n"
"    functionality provided with that script, please install the new\n"
"    package.\n"
"\n"
" -- Steve Greenland &lt;stevegr@debian.org&gt;  Sat,  6 Sep 2003 17:15:03 "
"-0500\n"
890
"The <filename>NEWS.Debian</filename> file is installed as "
"<filename>/usr/share/doc/<replaceable>package</replaceable>/NEWS.Debian.gz</filename>.  "
"It is compressed, and always has that name even in Debian native packages.  "
"If you use <literal>debhelper</literal>, "
"<literal>dh_installchangelogs</literal> will install "
"<filename>debian/NEWS</filename> files for you."
902
"Unlike changelog files, you need not update <filename>NEWS.Debian</filename> ""files with every release.  Only update them if you have something "
"particularly newsworthy that user should know about.  If you have no news at ""all, there's no need to ship a <filename>NEWS.Debian</filename> file in your ""package.  No news is good news!"
915
"Best practices for maintainer scripts"
920
"Maintainer scripts include the files <filename>debian/postinst</filename>, "
"<filename>debian/preinst</filename>, <filename>debian/prerm</filename> and "
"<filename>debian/postrm</filename>.  These scripts take care of any package "
"installation or deinstallation setup which isn't handled merely by the "
"creation or removal of files and directories.  The following instructions "
"supplement the <ulink url=\"&url-debian-policy;\">Debian Policy</ulink>."
931
"Maintainer scripts must be idempotent.  That means that you need to make "
"sure nothing bad will happen if the script is called twice where it would "
"usually be called once."
939
"Standard input and output may be redirected (e.g.  into pipes) for logging "
"purposes, so don't rely on them being a tty."
946
"All prompting or interactive configuration should be kept to a minimum.  "
"When it is necessary, you should use the <systemitem "
"role=\"package\">debconf</systemitem> package for the interface.  Remember "
"that prompting in any case can only be in the <literal>configure</literal> "
"stage of the <filename>postinst</filename> script."
956
"Keep the maintainer scripts as simple as possible.  We suggest you use pure "
"POSIX shell scripts.  Remember, if you do need any bash features, the "
"maintainer script must have a bash shebang line.  POSIX shell or Bash are "
"preferred to Perl, since they enable <systemitem "
"role=\"package\">debhelper</systemitem> to easily add bits to the scripts."
966
"If you change your maintainer scripts, be sure to test package removal, "
"double installation, and purging.  Be sure that a purged package is "
"completely gone, that is, it must remove any files created, directly or "
"indirectly, in any maintainer script."
975
"If you need to check for the existence of a command, you should use "
"something like"
982
"if [ -x /usr/sbin/install-docs ]; then ..."
988
"If you don't wish to hard-code the path of a command in your maintainer "
"script, the following POSIX-compliant shell function may help:"
995
"You can use this function to search <varname>$PATH</varname> for a command "
"name, passed as an argument.  It returns true (zero) if the command was "
"found, and false if not.  This is really the most portable way, since "
"<literal>command -v</literal>, <command>type</command>, and "
"<command>which</command> are not POSIX."
1005
"While <command>which</command> is an acceptable alternative, since it is "
"from the required <systemitem role=\"package\">debianutils</systemitem> "
"package, it's not on the root partition.  That is, it's in "
"<filename>/usr/bin</filename> rather than <filename>/bin</filename>, so one "
"can't use it in scripts which are run before the <filename>/usr</filename> "
"partition is mounted.  Most scripts won't have this problem, though."
1016
"Configuration management with <systemitem "
"role=\"package\">debconf</systemitem>"
1023
"<systemitem role=\"package\">Debconf</systemitem> is a configuration "
"management system which can be used by all the various packaging scripts "
"(<filename>postinst</filename> mainly) to request feedback from the user "
"concerning how to configure the package.  Direct user interactions must now "
"be avoided in favor of <systemitem role=\"package\">debconf</systemitem> "
"interaction.  This will enable non-interactive installations in the future."
1034
"Debconf is a great tool but it is often poorly used.  Many common mistakes "
"are listed in the <citerefentry> "
"<refentrytitle>debconf-devel</refentrytitle> <manvolnum>7</manvolnum> "
"</citerefentry> man page.  It is something that you must read if you decide "
"to use debconf.  Also, we document some best practices here."
1044
"These guidelines include some writing style and typography recommendations, "
"general considerations about debconf usage as well as more specific "
"recommendations for some parts of the distribution (the installation system "
"for instance)."
1053
"Do not abuse debconf"
1058
"Since debconf appeared in Debian, it has been widely abused and several "
"criticisms received by the Debian distribution come from debconf abuse with "
"the need of answering a wide bunch of questions before getting any little "
"thing installed."
1067
"Keep usage notes to what they belong: the <filename>NEWS.Debian</filename>, "
"or <filename>README.Debian</filename> file.  Only use notes for important "
"notes which may directly affect the package usability.  Remember that notes "
"will always block the install until confirmed or bother the user by email."
1076
"Carefully choose the questions priorities in maintainer scripts.  See "
"<citerefentry> <refentrytitle>debconf-devel</refentrytitle> "
"<manvolnum>7</manvolnum> </citerefentry> for details about priorities.  Most ""questions should use medium and low priorities."
1086
"General recommendations for authors and translators"
1091
"Write correct English"
1096
"Most Debian package maintainers are not native English speakers.  So, "
"writing properly phrased templates may not be easy for them."
1103
"Please use (and abuse) &email-debian-l10n-english; mailing list.  Have your "
"templates proofread."
1110
"Badly written templates give a poor image of your package, of your "
"work... or even of Debian itself."
1117
"Avoid technical jargon as much as possible.  If some terms sound common to "
"you, they may be impossible to understand for others.  If you cannot avoid "
"them, try to explain them (use the extended description).  When doing so, "
"try to balance between verbosity and simplicity."
1126
"Be kind to translators"
1131
"Debconf templates may be translated.  Debconf, along with its sister package ""<command>po-debconf</command> offers a simple framework for getting "
"templates translated by translation teams or even individuals."
1140
"Please use gettext-based templates.  Install <systemitem "
"role=\"package\">po-debconf</systemitem> on your development system and read ""its documentation (<command>man po-debconf</command> is a good start)."
1149
"Avoid changing templates too often.  Changing templates text induces more "
"work to translators which will get their translation fuzzied.  A fuzzy "
"translation is a string for which the original changed since it was "
"translated, therefore requiring some update by a translator to be usable.  "
"When changes are small enough, the original translation is kept in PO files "
"but marked as <literal>fuzzy</literal>."
1160
"If you plan to do changes to your original templates, please use the "
"notification system provided with the <systemitem "
"role=\"package\">po-debconf</systemitem> package, namely the "
"<command>podebconf-report-po</command>, to contact translators.  Most active ""translators are very responsive and getting their work included along with "
"your modified templates will save you additional uploads.  If you use "
"gettext-based templates, the translator's name and e-mail addresses are "
"mentioned in the PO files headers and will be used by "
"<command>podebconf-report-po</command>."
1175
"A recommended use of that utility is:"
1180
"cd debian/po &amp;&amp; podebconf-report-po --call --languageteam "
"--withtranslators --deadline=\"+10 days\""
1188
"This command will first synchronize the PO and POT files in "
"<filename>debian/po</filename> with the templates files listed in "
"<filename>debian/po/POTFILES.in</filename>.  Then, it will send a call for "
"new translations, in the &email-debian-i18n; mailing list. Finally, it will "
"also send a call for translation updates to the language team (mentioned in "
"the <literal>Language-Team</literal> field of each PO file)  as well as the "
"last translator (mentioned in <literal>Last-translator</literal>)."
1200
"Giving a deadline to translators is always appreciated, so that they can "
"organize their work. Please remember that some translation teams have a "
"formalized translate/review process and a delay lower than 10 days is "
"considered as unreasonable. A shorter delay puts too much pressure on "
"translation teams and should be kept for very minor changes."
1210
"If in doubt, you may also contact the translation team for a given language "
"(debian-l10n-xxxxx@&lists-host;), or the &email-debian-i18n; mailing list."
1217
"Unfuzzy complete translations when correcting typos and spelling"
1222
"When the text of a debconf template is corrected and you are <emphasis "
"role=\"strong\">sure</emphasis> that the change does <emphasis "
"role=\"strong\">not</emphasis> affect translations, please be kind to "
"translators and <emphasis>unfuzzy</emphasis> their translations."
1231
"If you don't do so, the whole template will not be translated as long as a "
"translator will send you an update."
1238
"To <emphasis>unfuzzy</emphasis> translations, you can use "
"<command>msguntypot</command> (part of the <systemitem "
"role=\"package\">po4a</systemitem> package)."
1247
"Regenerate the POT and PO files."
1253
"debconf-updatepo"
1260
"Make a copy of the POT file."
1266
"cp templates.pot templates.pot.orig"
1273
"Make a copy of all the PO files."
1279
"mkdir po_fridge; cp *.po po_fridge"
1286
"Change the debconf template files to fix the typos."
1292
"Regenerate the POT and PO files (again)."
1298
"At this point, the typo fix fuzzied all the translations, and this "
"unfortunate change is the only one between the PO files of your main "
"directory and the one from the fridge. Here is how to solve this."
1307
"Discard fuzzy translation, restore the ones from the fridge."
1313
"cp po_fridge/*.po ."
1320
"Manually merge the PO files with the new POT file, but taking the useless "
"fuzzy into account."
1328
"msguntypot -o templates.pot.orig -n templates.pot *.po"
1335
"Clean up."
1341
"rm -rf templates.pot.orig po_fridge"
1347
"Do not make assumptions about interfaces"
1352
"Templates text should not make reference to widgets belonging to some "
"debconf interfaces.  Sentences like <emphasis>If you answer "
"Yes...</emphasis> have no meaning for users of graphical interfaces which "
"use checkboxes for boolean questions."
1361
"String templates should also avoid mentioning the default values in their "
"description.  First, because this is redundant with the values seen by the "
"users.  Also, because these default values may be different from the "
"maintainer choices (for instance, when the debconf database was preseeded)."
1370
"More generally speaking, try to avoid referring to user actions.  Just give "
"facts."
1377
"Do not use first person"
1382
"You should avoid the use of first person (<emphasis>I will do "
"this...</emphasis> or <emphasis>We recommend...</emphasis>).  The computer "
"is not a person and the Debconf templates do not speak for the Debian "
"developers.  You should use neutral construction.  Those of you who already "
"wrote scientific publications, just write your templates like you would "
"write a scientific paper.  However, try using active voice if still "
"possible, like <emphasis>Enable this if ...</emphasis> instead of "
"<emphasis>This can be enabled if...</emphasis>."
1395
"Be gender neutral"
1400
"The world is made of men and women.  Please use gender-neutral constructions ""in your writing."
1408
"Templates fields definition"
1413
"This part gives some information which is mostly taken from the "
"<citerefentry> <refentrytitle>debconf-devel</refentrytitle> "
"<manvolnum>7</manvolnum> </citerefentry> manual page."
1421
"Type"
1426
"string"
1431
"Results in a free-form input field that the user can type any string into."
1437
"password"
1442
"Prompts the user for a password.  Use this with caution; be aware that the "
"password the user enters will be written to debconf's database.  You should "
"probably clean that value out of the database as soon as is possible."
1450
"boolean"
1455
"A true/false choice.  Remember: true/false, <emphasis role=\"strong\">not "
"yes/no</emphasis>..."
1462
"select"
1467
"A choice between one of a number of values.  The choices must be specified "
"in a field named 'Choices'.  Separate the possible values with commas and "
"spaces, like this: <literal>Choices: yes, no, maybe</literal>."
1475
"If choices are translatable strings, the 'Choices' field may be marked as "
"translatable by using <literal>__Choices</literal>. The double underscore "
"will split out each choice in a separate string."
1483
"The <command>po-debconf</command> system also offers interesting "
"possibilities to only mark <emphasis role=\"strong\">some</emphasis> choices ""as translatable.  Example:"
1493
"Template: foo/bar\n"
"Type: Select\n"
"#flag:translate:3\n"
"__Choices: PAL, SECAM, Other\n"
"_Description: TV standard:\n"
" Please choose the TV standard used in your country.\n"
1505
"In that example, only the 'Other' string is translatable while others are "
"acronyms that should not be translated. The above allows only 'Other' to be "
"included in PO and POT files."
1513
"The debconf templates flag system offers many such possibilities. The "
"<citerefentry> <refentrytitle>po-debconf</refentrytitle> "
"<manvolnum>7</manvolnum> </citerefentry> manual page lists all these "
"possibilities."
1522
"multiselect"
1527
"Like the select data type, except the user can choose any number of items "
"from the choices list (or chose none of them)."
1534
"note"
1539
"Rather than being a question per se, this datatype indicates a note that can ""be displayed to the user.  It should be used only for important notes that "
"the user really should see, since debconf will go to great pains to make "
"sure the user sees it; halting the install for them to press a key, and even ""mailing the note to them in some cases."
1551
"text"
1556
"This type is now considered obsolete: don't use it."
1561
"error"
1566
"This type is designed to handle error messages.  It is mostly similar to the ""note type.  Frontends may present it differently (for instance, the dialog "
"frontend of cdebconf draws a red screen instead of the usual blue one)."
1575
"It is recommended to use this type for any message that needs user attention ""for a correction of any kind."
1583
"Description: short and extended description"
1588
"Template descriptions have two parts: short and extended.  The short "
"description is in the Description: line of the template."
1595
"The short description should be kept short (50 characters or so) so that it "
"may be accommodated by most debconf interfaces.  Keeping it short also helps ""translators, as usually translations tend to end up being longer than the "
"original."
1605
"The short description should be able to stand on its own.  Some interfaces "
"do not show the long description by default, or only if the user explicitely ""asks for it or even do not show it at all.  Avoid things like What do you "
"want to do?"
1615
"The short description does not necessarily have to be a full sentence.  This ""is part of the keep it short and efficient recommendation."
1623
"The extended description should not repeat the short description word for "
"word.  If you can't think up a long description, then first, think some "
"more.  Post to debian-devel.  Ask for help.  Take a writing class! That "
"extended description is important.  If after all that you still can't come "
"up with anything, leave it blank."
1633
"The extended description should use complete sentences.  Paragraphs should "
"be kept short for improved readability.  Do not mix two ideas in the same "
"paragraph but rather use another paragraph."
1641
"Don't be too verbose.  User tend to ignore too long screens.  20 lines are "
"by experience a border you shouldn't cross, because that means that in the "
"classical dialog interface, people will need to scroll, and lot of people "
"just don't do that."
1650
"The extended description should <emphasis role=\"strong\">never</emphasis> "
"include a question."
1657
"For specific rules depending on templates type (string, boolean, etc.), "
"please read below."
1664
"Choices"
1669
"This field should be used for select and multiselect types.  It contains the ""possible choices which will be presented to users.  These choices should be "
"separated by commas."
1678
"Default"
1683
"This field is optional.  It contains the default answer for string, select "
"and multiselect templates.  For multiselect templates, it may contain a "
"comma-separated list of choices."
1691
"Templates fields specific style guide"
1696
"Type field"
1701
"No specific indication except: use the appropriate type by referring to the "
"previous section."
1708
"Description field"
1713
"Below are specific instructions for properly writing the Description (short "
"and extended) depending on the template type."
1720
"String/password templates"
1726
"The short description is a prompt and <emphasis "
"role=\"strong\">not</emphasis> a title.  Avoid question style prompts (IP "
"Address?) in favour of opened prompts (IP address:).  The use of colons is "
"recommended."
1736
"The extended description is a complement to the short description.  In the "
"extended part, explain what is being asked, rather than ask the same "
"question again using longer words.  Use complete sentences.  Terse writing "
"style is strongly discouraged."
1745
"Boolean templates"
1751
"The short description should be phrased in the form of a question which "
"should be kept short and should generally end with a question mark.  Terse "
"writing style is permitted and even encouraged if the question is rather "
"long (remember that translations are often longer than original versions)."
1761
"Again, please avoid referring to specific interface widgets.  A common "
"mistake for such templates is if you answer Yes-type constructions."
1768
"Select/Multiselect"
1774
"The short description is a prompt and <emphasis "
"role=\"strong\">not</emphasis> a title.  Do <emphasis "
"role=\"strong\">not</emphasis> use useless Please choose...  constructions.  ""Users are clever enough to figure out they have to choose something...:)"
1785
"The extended description will complete the short description.  It may refer "
"to the available choices.  It may also mention that the user may choose more ""than one of the available choices, if the template is a multiselect one "
"(although the interface often makes this clear)."
1795
"Notes"
1801
"The short description should be considered to be a <emphasis "
"role=\"strong\">title</emphasis>."
1809
"The extended description is what will be displayed as a more detailed "
"explanation of the note.  Phrases, no terse writing style."
1817
"<emphasis role=\"strong\">Do not abuse debconf.</emphasis> Notes are the "
"most common way to abuse debconf.  As written in debconf-devel manual page: "
"it's best to use them only for warning about very serious problems.  The "
"<filename>NEWS.Debian</filename> or <filename>README.Debian</filename> files ""are the appropriate location for a lot of notes.  If, by reading this, you "
"consider converting your Note type templates to entries in "
"<filename>NEWS.Debian</filename> or <filename>README.Debian</filename>, plus ""consider keeping existing translations for the future."
1832
"Choices field"
1837
"If the Choices are likely to change often, please consider using the "
"__Choices trick.  This will split each individual choice into a single "
"string, which will considerably help translators for doing their work."
1845
"Default field"
1850
"If the default value, for a select template, is likely to vary depending on "
"the user language (for instance, if the choice is a language choice), please ""use the _Default trick."
1859
"This special field allow translators to put the most appropriate choice "
"according to their own language.  It will become the default choice when "
"their language is used while your own mentioned Default Choice will be used "
"when using English."
1868
"Example, taken from the geneweb package templates:"
1873
"Template: geneweb/lang\n"
"Type: select\n"
"__Choices: Afrikaans (af), Bulgarian (bg), Catalan (ca), Chinese (zh), Czech ""(cs), Danish (da), Dutch (nl), English (en), Esperanto (eo), Estonian (et), "
"Finnish (fi), French (fr), German (de), Hebrew (he), Icelandic (is), Italian ""(it), Latvian (lv), Norwegian (no), Polish (pl), Portuguese (pt), Romanian "
"(ro), Russian (ru), Spanish (es), Swedish (sv)\n"
"# This is the default choice. Translators may put their own language here\n"
"# instead of the default.\n"
"# WARNING : you MUST use the ENGLISH NAME of your language\n"
"# For instance, the french translator will need to put French (fr) here.\n"
"_Default: English[ translators, please see comment in PO files]\n"
"_Description: Geneweb default language:\n"
1894
"Note the use of brackets which allow internal comments in debconf fields.  "
"Also note the use of comments which will show up in files the translators "
"will work with."
1902
"The comments are needed as the _Default trick is a bit confusing: the "
"translators may put their own choice"
1909
"Do NOT use empty default field.  If you don't want to use default values, do ""not use Default at all."
1917
"If you use po-debconf (and you <emphasis role=\"strong\">should</emphasis>, "
"see <xref linkend=\"s6.5.2.2\"/>), consider making this field translatable, "
"if you think it may be translated."
1925
"If the default value may vary depending on language/country (for instance "
"the default value for a language choice), consider using the special "
"_Default type documented in <citerefentry> "
"<refentrytitle>po-debconf</refentrytitle> <manvolnum>7</manvolnum> "
"</citerefentry>."
1935
"Internationalization"
1940
"This section contains global information for developers to make translators' ""life easier.  More information for translators and developers interested in "
"internationalization are available in the <ulink "
"url=\"&url-i18n-l10n;\">Internationalisation and localisation in "
"Debian</ulink> documentation."
1951
"Handling debconf translations"
1956
"Like porters, translators have a difficult task.  They work on many packages ""and must collaborate with many different maintainers.  Moreover, most of the ""time, they are not native English speakers, so you may need to be "
"particularly patient with them."
1967
"The goal of <systemitem role=\"package\">debconf</systemitem> was to make "
"packages configuration easier for maintainers and for users.  Originally, "
"translation of debconf templates was handled with "
"<command>debconf-mergetemplate</command>.  However, that technique is now "
"deprecated; the best way to accomplish <systemitem "
"role=\"package\">debconf</systemitem> internationalization is by using the "
"<systemitem role=\"package\">po-debconf</systemitem> package.  This method "
"is easier both for maintainer and translators; transition scripts are "
"provided."
1981
"Using <systemitem role=\"package\">po-debconf</systemitem>, the translation "
"is stored in <filename>.po</filename> files (drawing from "
"<command>gettext</command> translation techniques).  Special template files "
"contain the original messages and mark which fields are translatable.  When "
"you change the value of a translatable field, by calling "
"<command>debconf-updatepo</command>, the translation is marked as needing "
"attention from the translators.  Then, at build time, the "
"<command>dh_installdebconf</command> program takes care of all the needed "
"magic to add the template along with the up-to-date translations into the "
"binary packages.  Refer to the <citerefentry> "
"<refentrytitle>po-debconf</refentrytitle> <manvolnum>7</manvolnum> "
"</citerefentry> manual page for details."
1998
"Internationalized documentation"
2003
"Internationalizing documentation is crucial for users, but a lot of labor.  "
"There's no way to eliminate all that work, but you can make things easier "
"for translators."
2011
"If you maintain documentation of any size, it is easier for translators if "
"they have access to a source control system.  That lets translators see the "
"differences between two versions of the documentation, so, for instance, "
"they can see what needs to be retranslated.  It is recommended that the "
"translated documentation maintain a note about what source control revision "
"the translation is based on.  An interesting system is provided by <ulink "
"url=\"&url-i18n-doc-check;\">doc-check</ulink> in the <systemitem "
"role=\"package\">debian-installer</systemitem> package, which shows an "
"overview of the translation status for any given language, using structured "
"comments for the current revision of the file to be translated and, for a "
"translated file, the revision of the original file the translation is based "
"on.  You might wish to adapt and provide that in your VCS area."
2028
"If you maintain XML or SGML documentation, we suggest that you isolate any "
"language-independent information and define those as entities in a separate "
"file which is included by all the different translations.  This makes it "
"much easier, for instance, to keep URLs up to date across multiple files."
2037
"Some tools (e.g. <systemitem role=\"package\">po4a</systemitem>, <systemitem ""role=\"package\">poxml</systemitem>, or the <systemitem "
"role=\"package\">translate-toolkit</systemitem>) are specialized in "
"extracting the translatable material from different formats.  They produce "
"PO files, a format quite common to translators, which permits to see what "
"needs to be retranslated when the translated document is updated."
2049
"Common packaging situations"
2054
"Packages using <command>autoconf</command>/<command>automake</command>"
2059
"Keeping <command>autoconf</command>'s <filename>config.sub</filename> and "
"<filename>config.guess</filename> files up to date is critical for porters, "
"especially on more volatile architectures.  Some very good packaging "
"practices for any package using <command>autoconf</command> and/or "
"<command>automake</command> have been synthesized in &file-bpp-autotools; "
"from the <systemitem role=\"package\">autotools-dev</systemitem> package.  "
"You're strongly encouraged to read this file and to follow the given "
"recommendations."
2072
"Libraries"
2077
"Libraries are always difficult to package for various reasons.  The policy "
"imposes many constraints to ease their maintenance and to make sure upgrades ""are as simple as possible when a new upstream version comes out.  Breakage "
"in a library can result in dozens of dependent packages breaking."
2087
"Good practices for library packaging have been grouped in <ulink "
"url=\"&url-libpkg-guide;\">the library packaging guide</ulink>."
2094
"Documentation"
2099
"Be sure to follow the <ulink url=\"&url-debian-policy;ch-docs.html\">Policy "
"on documentation</ulink>."
2106
"If your package contains documentation built from XML or SGML, we recommend "
"you not ship the XML or SGML source in the binary package(s).  If users want ""the source of the documentation, they should retrieve the source package."
2115
"Policy specifies that documentation should be shipped in HTML format.  We "
"also recommend shipping documentation in PDF and plain text format if "
"convenient and if output of reasonable quality is possible.  However, it is "
"generally not appropriate to ship plain text versions of documentation whose ""source format is HTML."
2126
"Major shipped manuals should register themselves with <systemitem "
"role=\"package\">doc-base</systemitem> on installation.  See the <systemitem ""role=\"package\">doc-base</systemitem> package documentation for more "
"information."
2136
"Debian policy (section 12.1) directs that manual pages should accompany "
"every program, utility, and function, and suggests them for other objects "
"like configuration files. If the work you are packaging does not have such "
"manual pages, consider writing them for inclusion in your package, and "
"submitting them upstream."
2146
"The manpages do not need to be written directly in the troff format.  "
"Popular source formats are Docbook, POD and reST, which can be converted "
"using <command>xsltproc</command>, <command>pod2man</command> and "
"<command>rst2man</command> respectively. To a lesser extent, the "
"<command>help2man</command> program can also be used to write a stub."
2156
"Specific types of packages"
2161
"Several specific types of packages have special sub-policies and "
"corresponding packaging rules and practices:"
2168
"Perl related packages have a <ulink url=\"&url-perl-policy;\">Perl "
"policy</ulink>, some examples of packages following that policy are "
"<systemitem role=\"package\">libdbd-pg-perl</systemitem> (binary perl "
"module) or <systemitem role=\"package\">libmldbm-perl</systemitem> (arch "
"independent perl module)."
2178
"Python related packages have their python policy; see &file-python-policy; "
"in the <systemitem role=\"package\">python</systemitem> package."
2185
"Emacs related packages have the <ulink url=\"&url-emacs-policy;\">emacs "
"policy</ulink>."
2192
"Java related packages have their <ulink url=\"&url-java-policy;\">java "
"policy</ulink>."
2199
"Ocaml related packages have their own policy, found in &file-ocaml-policy; "
"from the <systemitem role=\"package\">ocaml</systemitem> package.  A good "
"example is the <systemitem role=\"package\">camlzip</systemitem> source "
"package."
2208
"Packages providing XML or SGML DTDs should conform to the recommendations "
"found in the <systemitem role=\"package\">sgml-base-doc</systemitem> "
"package."
2216
"Lisp packages should register themselves with <systemitem "
"role=\"package\">common-lisp-controller</systemitem>, about which see "
"&file-lisp-controller;."
2224
"Architecture-independent data"
2229
"It is not uncommon to have a large amount of architecture-independent data "
"packaged with a program.  For example, audio files, a collection of icons, "
"wallpaper patterns, or other graphic files.  If the size of this data is "
"negligible compared to the size of the rest of the package, it's probably "
"best to keep it all in a single package."
2239
"However, if the size of the data is considerable, consider splitting it out "
"into a separate, architecture-independent package "
"(<filename>_all.deb</filename>).  By doing this, you avoid needless "
"duplication of the same data into eleven or more .debs, one per each "
"architecture.  While this adds some extra overhead into the "
"<filename>Packages</filename> files, it saves a lot of disk space on Debian "
"mirrors.  Separating out architecture-independent data also reduces "
"processing time of <command>lintian</command> (see <xref "
"linkend=\"tools-lint\"/>) when run over the entire Debian archive."
2253
"Needing a certain locale during build"
2258
"If you need a certain locale during build, you can create a temporary file "
"via this trick:"
2265
"If you set <varname>LOCPATH</varname> to the equivalent of "
"<filename>/usr/lib/locale</filename>, and <varname>LC_ALL</varname> to the "
"name of the locale you generate, you should get what you want without being "
"root.  Something like this:"
2274
"LOCALE_PATH=debian/tmpdir/usr/lib/locale\n"
"LOCALE_NAME=en_IN\n"
"LOCALE_CHARSET=UTF-8\n"
"\n"
"mkdir -p $LOCALE_PATH\n"
"localedef -i $LOCALE_NAME.$LOCALE_CHARSET -f $LOCALE_CHARSET "
"$LOCALE_PATH/$LOCALE_NAME.$LOCALE_CHARSET\n"
"\n"
"# Using the locale\n"
"LOCPATH=$LOCALE_PATH LC_ALL=$LOCALE_NAME.$LOCALE_CHARSET date\n"
2290
"Make transition packages deborphan compliant"
2295
"Deborphan is a program for helping users to detect which packages can safely ""be removed from the system, i.e.  the ones that have no packages depending "
"on them.  The default operation is to search only within the libs and "
"oldlibs sections, to hunt down unused libraries.  But when passed the right "
"argument, it tries to catch other useless packages."
2306
"For example, with <literal>--guess-dummy</literal>, "
"<command>deborphan</command> tries to search all transitional packages which ""were needed for upgrade but which can now safely be removed.  For that, it "
"looks for the string dummy or transitional in their short description."
2316
"So, when you are creating such a package, please make sure to add this text "
"to your short description.  If you are looking for examples, just run: "
"<command>apt-cache search .|grep dummy</command> or <command>apt-cache "
"search .|grep transitional</command>."
2325
"Also, it is recommended to adjust its section to <literal>oldlibs</literal> "
"and its priority to <literal>extra</literal> in order to ease "
"<command>deborphan</command>'s job."
2333
"Best practices for <filename>.orig.tar.{gz,bz2,xz}</filename> files"
2338
"There are two kinds of original source tarballs: Pristine source and "
"repackaged upstream source."
2345
"Pristine source"
2351
"We cannot prevent upstream authors from changing the tarball they distribute ""without also incrementing the version number, so there can be no guarantee "
"that a pristine tarball is identical to what upstream "
"<emphasis>currently</emphasis> distributing at any point in time.  All that "
"can be expected is that it is identical to something that upstream once "
"<emphasis>did</emphasis> distribute.  If a difference arises later (say, if "
"upstream notice that they weren't using maximal compression in their "
"original distribution and then re-<command>gzip</command> it), that's just "
"too bad.  Since there is no good way to upload a new "
"<filename>.orig.tar.{gz,bz2,xz}</filename> for the same version, there is "
"not even any point in treating this situation as a bug."
2368
"The defining characteristic of a pristine source tarball is that the "
"<filename>.orig.tar.{gz,bz2,xz}</filename> file is byte-for-byte identical "
"to a tarball officially distributed by the upstream author.<placeholder "
"type=\"footnote\" id=\"0\"/> This makes it possible to use checksums to "
"easily verify that all changes between Debian's version and upstream's are "
"contained in the Debian diff.  Also, if the original source is huge, "
"upstream authors and others who already have the upstream tarball can save "
"download time if they want to inspect your packaging in detail."
2381
"There is no universally accepted guidelines that upstream authors follow "
"regarding to the directory structure inside their tarball, but "
"<command>dpkg-source</command> is nevertheless able to deal with most "
"upstream tarballs as pristine source.  Its strategy is equivalent to the "
"following:"
2392
"It unpacks the tarball in an empty temporary directory by doing"
2398
"zcat "
"path/to/<replaceable>packagename</replaceable>_<replaceable>upstream-version</replaceable>.orig.tar.gz "
"| tar xf -\n"
2409
"If, after this, the temporary directory contains nothing but one directory "
"and no other files, <command>dpkg-source</command> renames that directory to ""<filename><replaceable>packagename</replaceable>-<replaceable>upstream-version</replaceable>(.orig)</filename>.  "
"The name of the top-level directory in the tarball does not matter, and is "
"forgotten."
2422
"Otherwise, the upstream tarball must have been packaged without a common "
"top-level directory (shame on the upstream author!).  In this case, "
"<command>dpkg-source</command> renames the temporary directory "
"<emphasis>itself</emphasis> to "
"<filename><replaceable>packagename</replaceable>-<replaceable>upstream-version</replaceable>(.orig)</filename>."
2433
"Repackaged upstream source"
2438
"You <emphasis role=\"strong\">should</emphasis> upload packages with a "
"pristine source tarball if possible, but there are various reasons why it "
"might not be possible.  This is the case if upstream does not distribute the ""source as gzipped tar at all, or if upstream's tarball contains "
"non-DFSG-free material that you must remove before uploading."
2449
"In these cases the developer must construct a suitable "
"<filename>.orig.tar.{gz,bz2,xz}</filename> file themselves.  We refer to "
"such a tarball as a repackaged upstream source.  Note that a repackaged "
"upstream source is different from a Debian-native package.  A repackaged "
"source still comes with Debian-specific changes in a separate "
"<filename>.diff.gz</filename> or "
"<filename>.debian.tar.{gz,bz2,xz}</filename> and still has a version number "
"composed of <replaceable>upstream-version</replaceable> and "
"<replaceable>debian-version</replaceable>."
2463
"There may be cases where it is desirable to repackage the source even though ""upstream distributes a <filename>.tar.{gz,bz2,xz}</filename> that could in "
"principle be used in its pristine form.  The most obvious is if "
"<emphasis>significant</emphasis> space savings can be achieved by "
"recompressing the tar archive or by removing genuinely useless cruft from "
"the upstream archive.  Use your own discretion here, but be prepared to "
"defend your decision if you repackage source that could have been pristine."
2476
"A repackaged <filename>.orig.tar.{gz,bz2,xz}</filename>"
2482
"<emphasis role=\"strong\">should</emphasis> be documented in the resulting "
"source package.  Detailed information on how the repackaged source was "
"obtained, and on how this can be reproduced should be provided in "
"<filename>debian/copyright</filename>.  It is also a good idea to provide a "
"<literal>get-orig-source</literal> target in your "
"<filename>debian/rules</filename> file that repeats the process, as "
"described in the Policy Manual, <ulink "
"url=\"&url-debian-policy;ch-source.html#s-debianrules\">Main building "
"script: <filename>debian/rules</filename></ulink>."
2497
"As a special exception, if the omission of non-free files would lead to the "
"source failing to build without assistance from the Debian diff, it might be ""appropriate to instead edit the files, omitting only the non-free parts of "
"them, and/or explain the situation in a <filename>README.source</filename> "
"file in the root of the source tree.  But in that case please also urge the "
"upstream author to make the non-free components easier separable from the "
"rest of the source."
2511
"<emphasis role=\"strong\">should not</emphasis> contain any file that does "
"not come from the upstream author(s), or whose contents has been changed by "
"you.<placeholder type=\"footnote\" id=\"0\"/>"
2520
"<emphasis role=\"strong\">should</emphasis>, except where impossible for "
"legal reasons, preserve the entire building and portablility infrastructure "
"provided by the upstream author.  For example, it is not a sufficient reason ""for omitting a file that it is used only when building on MS-DOS.  "
"Similarly, a <filename>Makefile</filename> provided by upstream should not "
"be omitted even if the first thing your <filename>debian/rules</filename> "
"does is to overwrite it by running a configure script."
2534
"(<emphasis>Rationale:</emphasis> It is common for Debian users who need to "
"build software for non-Debian platforms to fetch the source from a Debian "
"mirror rather than trying to locate a canonical upstream distribution "
"point)."
2544
"<emphasis role=\"strong\">should</emphasis> use "
"<filename><replaceable>packagename</replaceable>-<replaceable>upstream-version</replaceable>.orig</filename> "
"as the name of the top-level directory in its tarball.  This makes it "
"possible to distinguish pristine tarballs from repackaged ones."
2555
"<emphasis role=\"strong\">should</emphasis> be gzipped or bzipped with "
"maximal compression."
2562
"Changing binary files"
2567
"Sometimes it is necessary to change binary files contained in the original "
"tarball, or to add binary files that are not in it. This is fully supported "
"when using source packages in “3.0 (quilt)” format, see the "
"<citerefentry><refentrytitle>dpkg-source</refentrytitle><manvolnum>1</manvolnum></citerefentry> "
"manual page for details. When using the older format “1.0”, binary files ""can't be stored in the <filename>.diff.gz</filename> so you must store an "
"<command>uuencode</command>d (or similar) version of the file(s)  and decode ""it at build time in <filename>debian/rules</filename> (and move it in its "
"official location)."
2584
"Best practices for debug packages"
2589
"A debug package is a package with a name ending in -dbg, that contains "
"additional information that <command>gdb</command> can use.  Since Debian "
"binaries are stripped by default, debugging information, including function "
"names and line numbers, is otherwise not available when running "
"<command>gdb</command> on Debian binaries.  Debug packages allow users who "
"need this additional debugging information to install it, without bloating a ""regular system with the information."
2602
"It is up to a package's maintainer whether to create a debug package or "
"not.  Maintainers are encouraged to create debug packages for library "
"packages, since this can aid in debugging many programs linked to a "
"library.  In general, debug packages do not need to be added for all "
"programs; doing so would bloat the archive.  But if a maintainer finds that "
"users often need a debugging version of a program, it can be worthwhile to "
"make a debug package for it.  Programs that are core infrastructure, such as ""apache and the X server are also good candidates for debug packages."
2616
"Some debug packages may contain an entire special debugging build of a "
"library or other binary, but most of them can save space and build time by "
"instead containing separated debugging symbols that <command>gdb</command> "
"can find and load on the fly when debugging a program or library.  The "
"convention in Debian is to keep these symbols in "
"<filename>/usr/lib/debug/<replaceable>path</replaceable></filename>, where "
"<replaceable>path</replaceable> is the path to the executable or library.  "
"For example, debugging symbols for <filename>/usr/bin/foo</filename> go in "
"<filename>/usr/lib/debug/usr/bin/foo</filename>, and debugging symbols for "
"<filename>/usr/lib/libfoo.so.1</filename> go in "
"<filename>/usr/lib/debug/usr/lib/libfoo.so.1</filename>."
2632
"The debugging symbols can be extracted from an object file using "
"<command>objcopy --only-keep-debug</command>.  Then the object file can be "
"stripped, and <command>objcopy --add-gnu-debuglink</command> used to specify ""the path to the debugging symbol file.  <citerefentry> "
"<refentrytitle>objcopy</refentrytitle> <manvolnum>1</manvolnum> "
"</citerefentry> explains in detail how this works."
2644
"The <command>dh_strip</command> command in <systemitem "
"role=\"package\">debhelper</systemitem> supports creating debug packages, "
"and can take care of using <command>objcopy</command> to separate out the "
"debugging symbols for you.  If your package uses <systemitem "
"role=\"package\">debhelper</systemitem>, all you need to do is call "
"<command>dh_strip --dbg-package=libfoo-dbg</command>, and add an entry to "
"<filename>debian/control</filename> for the debug package."
2656
"Note that the debug package should depend on the package that it provides "
"debugging symbols for, and this dependency should be versioned.  For "
"example:"
2664
"Depends: libfoo (= ${binary:Version})\n"
2670
"Best practices for meta-packages"
2675
"A meta-package is a mostly empty package that makes it easy to install a "
"coherent set of packages that can evolve over time. It achieves this by "
"depending on all the packages of the set. Thanks to the power of APT, the "
"meta-package maintainer can adjust the dependencies and the user's system "
"will automatically get the supplementary packages. The dropped packages that ""were automatically installed will be also be marked as removal candidates "
"(and are even automatically removed by <command>aptitude</command>).  "
"<systemitem role=\"package\">gnome</systemitem> and <systemitem "
"role=\"package\">linux-image-amd64</systemitem> are two examples of "
"meta-packages (built by the source packages <systemitem "
"role=\"package\">meta-gnome2</systemitem> and <systemitem "
"role=\"package\">linux-latest</systemitem>)."
2693
"The long description of the meta-package must clearly document its purpose "
"so that the user knows what they will lose if they remove the package. Being ""explicit about the consequences is recommended. This is particularly "
"important for meta-packages which are installed during initial installation "
"and that have not been explicitly installed by the user.  Those tend to be "
"important to ensure smooth system upgrades and the user should be "
"discouraged from uninstalling them to avoid potential breakages."
2706
"Beyond Packaging"
2711
"Debian is about a lot more than just packaging software and maintaining "
"those packages.  This chapter contains information about ways, often really "
"critical ways, to contribute to Debian beyond simply creating and "
"maintaining packages."
2720
"As a volunteer organization, Debian relies on the discretion of its members "
"in choosing what they want to work on and in choosing the most critical "
"thing to spend their time on."
2728
"Bug reporting"
2733
"We encourage you to file bugs as you find them in Debian packages.  In fact, ""Debian developers are often the first line testers.  Finding and reporting "
"bugs in other developers' packages improves the quality of Debian."
2742
"Read the <ulink url=\"&url-bts-report;\">instructions for reporting "
"bugs</ulink> in the Debian <ulink url=\"&url-bts;\">bug tracking "
"system</ulink>."
2750
"Try to submit the bug from a normal user account at which you are likely to "
"receive mail, so that people can reach you if they need further information "
"about the bug.  Do not submit bugs as root."
2758
"You can use a tool like <citerefentry> "
"<refentrytitle>reportbug</refentrytitle> <manvolnum>1</manvolnum> "
"</citerefentry> to submit bugs.  It can automate and generally ease the "
"process."
2767
"Make sure the bug is not already filed against a package.  Each package has "
"a bug list easily reachable at "
"<literal>http://&bugs-host;/<replaceable>packagename</replaceable></literal>.  "
"Utilities like <citerefentry> <refentrytitle>querybts</refentrytitle> "
"<manvolnum>1</manvolnum> </citerefentry> can also provide you with this "
"information (and <command>reportbug</command> will usually invoke "
"<command>querybts</command> before sending, too)."
2780
"Try to direct your bugs to the proper location.  When for example your bug "
"is about a package which overwrites files from another package, check the "
"bug lists for <emphasis>both</emphasis> of those packages in order to avoid "
"filing duplicate bug reports."
2789
"For extra credit, you can go through other packages, merging bugs which are "
"reported more than once, or tagging bugs `fixed' when they have already been ""fixed.  Note that when you are neither the bug submitter nor the package "
"maintainer, you should not actually close the bug (unless you secure "
"permission from the maintainer)."
2800
"From time to time you may want to check what has been going on with the bug "
"reports that you submitted.  Take this opportunity to close those that you "
"can't reproduce anymore.  To find out all the bugs you submitted, you just "
"have to visit "
"<literal>http://&bugs-host;/from:<replaceable>your-email-addr</replaceable></literal>."
2811
"Reporting lots of bugs at once (mass bug filing)"
2816
"Reporting a great number of bugs for the same problem on a great number of "
"different packages — i.e., more than 10 — is a deprecated practice.  Take "
"all possible steps to avoid submitting bulk bugs at all.  For instance, if "
"checking for the problem can be automated, add a new check to <systemitem "
"role=\"package\">lintian</systemitem> so that an error or warning is "
"emitted."
2828
"If you report more than 10 bugs on the same topic at once, it is recommended ""that you send a message to &email-debian-devel; describing your intention "
"before submitting the report, and mentioning the fact in the subject of your ""mail.  This will allow other developers to verify that the bug is a real "
"problem.  In addition, it will help prevent a situation in which several "
"maintainers start filing the same bug report simultaneously."
2841
"Please use the programs <command>dd-list</command> and if appropriate "
"<command>whodepends</command> (from the package <systemitem "
"role=\"package\">devscripts</systemitem>) to generate a list of all affected ""packages, and include the output in your mail to &email-debian-devel;."
2851
"Note that when sending lots of bugs on the same subject, you should send the ""bug report to <email>maintonly@&bugs-host;</email> so that the bug report is ""not forwarded to the bug distribution mailing list."
2861
"Usertags"
2866
"You may wish to use BTS usertags when submitting bugs across a number of "
"packages. Usertags are similar to normal tags such as 'patch' and 'wishlist' ""but differ in that they are user-defined and occupy a namespace that is "
"unique to a particular user. This allows multiple sets of developers to "
"'usertag' the same bug in different ways without conflicting."
2877
"To add usertags when filing bugs, specify the <literal>User</literal> and "
"<literal>Usertags</literal> pseudo-headers:"
2884
"To: submit@bugs.debian.org\n"
"Subject: <replaceable>title-of-bug</replaceable>\n"
"\n"
"Package: <replaceable>pkgname</replaceable>\n"
"<replaceable>[ ... ]</replaceable>\n"
"User: <replaceable>email-addr</replaceable>\n"
"Usertags: <replaceable>tag-name [ tag-name ... ]</replaceable>\n"
"\n"
"<replaceable>description-of-bug ...</replaceable>\n"
2899
"Note that tags are seperated by spaces and cannot contain underscores. If "
"you are filing bugs for a particular group or team it is recommended that "
"you set the <literal>User</literal> to an appropriate mailing list after "
"describing your intention there."
2908
"To view bugs tagged with a specific usertag, visit "
"<literal>http://&bugs-host;/cgi-bin/pkgreport.cgi?users=<replaceable>email-addr</replaceable>&amp;tag=<replaceable>tag-name</replaceable></literal>."
2916
"Quality Assurance effort"
2921
"Daily work"
2926
"Even though there is a dedicated group of people for Quality Assurance, QA "
"duties are not reserved solely for them.  You can participate in this effort ""by keeping your packages as bug-free as possible, and as lintian-clean (see "
"<xref linkend=\"lintian\"/>) as possible.  If you do not find that possible, ""then you should consider orphaning some of your packages (see <xref "
"linkend=\"orphaning\"/>).  Alternatively, you may ask the help of other "
"people in order to catch up with the backlog of bugs that you have (you can "
"ask for help on &email-debian-qa; or &email-debian-devel;).  At the same "
"time, you can look for co-maintainers (see <xref "
"linkend=\"collaborative-maint\"/>)."
2943
"Bug squashing parties"
2948
"From time to time the QA group organizes bug squashing parties to get rid of ""as many problems as possible.  They are announced on "
"&email-debian-devel-announce; and the announcement explains which area will "
"be the focus of the party: usually they focus on release critical bugs but "
"it may happen that they decide to help finish a major upgrade (like a new "
"<command>perl</command> version which requires recompilation of all the "
"binary modules)."
2961
"The rules for non-maintainer uploads differ during the parties because the "
"announcement of the party is considered prior notice for NMU.  If you have "
"packages that may be affected by the party (because they have release "
"critical bugs for example), you should send an update to each of the "
"corresponding bug to explain their current status and what you expect from "
"the party.  If you don't want an NMU, or if you're only interested in a "
"patch, or if you will deal yourself with the bug, please explain that in the ""BTS."
2975
"People participating in the party have special rules for NMU, they can NMU "
"without prior notice if they upload their NMU to DELAYED/3-day at least.  "
"All other NMU rules apply as usually; they should send the patch of the NMU "
"to the BTS (to one of the open bugs fixed by the NMU, or to a new bug, "
"tagged fixed).  They should also respect any particular wishes of the "
"maintainer."
2986
"If you don't feel confident about doing an NMU, just send a patch to the "
"BTS.  It's far better than a broken NMU."
2993
"Contacting other maintainers"
2998
"During your lifetime within Debian, you will have to contact other "
"maintainers for various reasons.  You may want to discuss a new way of "
"cooperating between a set of related packages, or you may simply remind "
"someone that a new upstream version is available and that you need it."
3007
"Looking up the email address of the maintainer for the package can be "
"distracting.  Fortunately, there is a simple email alias, "
"<literal><replaceable>package</replaceable>@&packages-host;</literal>, which ""provides a way to email the maintainer, whatever their individual email "
"address (or addresses)  may be.  Replace <replaceable>package</replaceable> "
"with the name of a source or a binary package."
3019
"You may also be interested in contacting the persons who are subscribed to a ""given source package via <xref linkend=\"pkg-tracking-system\"/>.  You can "
"do so by using the "
"<literal><replaceable>package</replaceable>@&pts-host;</literal> email "
"address."
3030
"Dealing with inactive and/or unreachable maintainers"
3035
"If you notice that a package is lacking maintenance, you should make sure "
"that the maintainer is active and will continue to work on their packages.  "
"It is possible that they are not active any more, but haven't registered out ""of the system, so to speak.  On the other hand, it is also possible that "
"they just need a reminder."
3046
"There is a simple system (the MIA database) in which information about "
"maintainers who are deemed Missing In Action is recorded.  When a member of "
"the QA group contacts an inactive maintainer or finds more information about ""one, this is recorded in the MIA database.  This system is available in "
"<filename>/org/qa.debian.org/mia</filename> on the host "
"<literal>qa.debian.org</literal>, and can be queried with the "
"<command>mia-query</command> tool.  Use <command>mia-query --help</command> "
"to see how to query the database.  If you find that no information has been "
"recorded about an inactive maintainer yet, or that you can add more "
"information, you should generally proceed as follows."
3062
"The first step is to politely contact the maintainer, and wait a reasonable "
"time for a response.  It is quite hard to define reasonable time, but it is "
"important to take into account that real life is sometimes very hectic.  One ""way to handle this would be to send a reminder after two weeks."
3072
"If the maintainer doesn't reply within four weeks (a month), one can assume "
"that a response will probably not happen.  If that happens, you should "
"investigate further, and try to gather as much useful information about the "
"maintainer in question as possible.  This includes:"
3081
"The <literal>echelon</literal> information available through the <ulink "
"url=\"&url-debian-db;\">developers' LDAP database</ulink>, which indicates "
"when the developer last posted to a Debian mailing list.  (This includes "
"mails about uploads distributed via the &email-debian-devel-changes; list.)  ""Also, remember to check whether the maintainer is marked as on vacation in "
"the database."
3093
"The number of packages this maintainer is responsible for, and the condition ""of those packages.  In particular, are there any RC bugs that have been open ""for ages? Furthermore, how many bugs are there in general? Another important ""piece of information is whether the packages have been NMUed, and if so, by "
"whom."
3106
"Is there any activity of the maintainer outside of Debian? For example, they ""might have posted something recently to non-Debian mailing lists or news "
"groups."
3115
"A bit of a problem are packages which were sponsored — the maintainer is not "
"an official Debian developer.  The <literal>echelon</literal> information is ""not available for sponsored people, for example, so you need to find and "
"contact the Debian developer who has actually uploaded the package.  Given "
"that they signed the package, they're responsible for the upload anyhow, and ""are likely to know what happened to the person they sponsored."
3129
"It is also allowed to post a query to &email-debian-devel;, asking if anyone ""is aware of the whereabouts of the missing maintainer.  Please Cc: the "
"person in question."
3138
"Once you have gathered all of this, you can contact &email-mia;.  People on "
"this alias will use the information you provide in order to decide how to "
"proceed.  For example, they might orphan one or all of the packages of the "
"maintainer.  If a package has been NMUed, they might prefer to contact the "
"NMUer before orphaning the package — perhaps the person who has done the NMU "
"is interested in the package."
3150
"One last word: please remember to be polite.  We are all volunteers and "
"cannot dedicate all of our time to Debian.  Also, you are not aware of the "
"circumstances of the person who is involved.  Perhaps they might be "
"seriously ill or might even have died — you do not know who may be on the "
"receiving side.  Imagine how a relative will feel if they read the e-mail of ""the deceased and find a very impolite, angry and accusing message!"
3162
"On the other hand, although we are volunteers, we do have a responsibility.  ""So you can stress the importance of the greater good — if a maintainer does "
"not have the time or interest anymore, they should let go and give the "
"package to someone with more time."
3173
"If you are interested in working in the MIA team, please have a look at the "
"<filename>README</filename> file in "
"<filename>/org/qa.debian.org/mia</filename> on "
"<literal>qa.debian.org</literal> where the technical details and the MIA "
"procedures are documented and contact &email-mia;."
3183
"Interacting with prospective Debian developers"
3188
"Debian's success depends on its ability to attract and retain new and "
"talented volunteers.  If you are an experienced developer, we recommend that ""you get involved with the process of bringing in new developers.  This "
"section describes how to help new prospective developers."
3198
"Sponsoring packages"
3203
"Sponsoring a package means uploading a package for a maintainer who is not "
"able to do it on their own. It's not a trivial matter, the sponsor must "
"verify the packaging and ensure that it is of the high level of quality that ""Debian strives to have."
3213
"Debian Developers can sponsor packages. Debian Maintainers can't."
3219
"The maintainer prepares a source package (<filename>.dsc</filename>) and "
"puts it online somewhere (like on <ulink "
"url=\"http://mentors.debian.net/cgi-bin/welcome\">mentors.debian.net</ulink>) "
"or even better, provides a link to a public VCS repository (see <xref "
"linkend=\"servers-vcs\"/>) where the package is maintained."
3231
"The sponsor downloads (or checkouts) the source package."
3237
"The sponsor reviews the source package. If they find issues, they inform the ""maintainer and ask them to provide a fixed version (the process starts over "
"at step 1)."
3247
"The sponsor could not find any remaining problem. They build the package, "
"sign it, and upload it to Debian."
3254
"The process of sponsoring a package is: <placeholder type=\"orderedlist\" "
"id=\"0\"/>"
3261
"Before delving in the details of how to sponsor a package, you should ask "
"yourself whether adding the proposed package is beneficial to Debian."
3268
"There's no simple rule to answer this question, it can depend on many "
"factors: is the upstream codebase mature and not full of security holes? Are ""there pre-existing packages that can do the same task and how do they "
"compare to this new package? Has the new package been requested by users and ""how large is the user base? How active are the upstream developers?"
3280
"You should also ensure that the prospective maintainer is going to be a good ""maintainer. Do they already have some experience with other packages? If "
"yes, are they doing a good job with them (check out some bugs)? Are they "
"familiar with the package and its programming language? Do they have the "
"skills needed for this package? If not, are they able to learn them?"
3291
"It's also a good idea to know where they stand with respect to Debian: do "
"they agree with Debian's philosophy and do they intend to join Debian? Given ""how easy it is to become a Debian Maintainer, you might want to only sponsor ""people who plan to join. That way you know from the start that you won't "
"have to act as a sponsor indefinitely."
3303
"Sponsoring a new package"
3308
"New maintainers usually have certain difficulties creating Debian packages — "
"this is quite understandable. They will do mistakes. That's why sponsoring a ""brand new package into Debian requires a thorough review of the Debian "
"packaging. Sometimes several iterations will be needed until the package is "
"good enough to be uploaded to Debian. Thus being a sponsor implies being a "
"mentor."
3321
"Don't ever sponsor a new package without reviewing it. The review of new "
"packages done by ftpmasters mainly ensures that the software is really "
"free. Of course, it happens that they stumble on packaging problems but they ""really should not. It's your task to ensure that the uploaded package "
"complies with the Debian Free Software Guidelines and is of good quality."
3333
"You can find more checks in the wiki where several developers share their "
"own <ulink url=\"http://wiki.debian.org/SponsorChecklist\">sponsorship "
"checklists</ulink>."
3341
"Building the package and testing the software is part of the review, but "
"it's also not enough. The rest of this section contains a non-exhaustive "
"list of points to check in your review.  <placeholder type=\"footnote\" "
"id=\"0\"/>"
3351
"Verify that the upstream tarball provided is the same that has been "
"distributed by the upstream author (when the sources are repackaged for "
"Debian, generate the modified tarball yourself)."
3360
"Run <command>lintian</command> (see <xref linkend=\"lintian\"/>). It will "
"catch many common problems. Be sure to verify that any "
"<command>lintian</command> overrides setup by the maintainer is fully "
"justified."
3370
"Run <command>licensecheck</command> (part of <xref linkend=\"devscripts\"/>) ""and verify that <filename>debian/copyright</filename> seems correct and "
"complete. Look for license problems (like files with “All rights reserved” "
"headers, or with a non-DFSG compliant license). <command>grep -ri</command> "
"is your friend for this task."
3383
"Build the package with <command>pbuilder</command> (or any similar tool, see ""<xref linkend=\"pbuilder\"/>) to ensure that the build-dependencies are "
"complete."
3393
"Proofread <filename>debian/control</filename>: does it follow the best "
"practices (see <xref linkend=\"bpp-debian-control\"/>)? Are the dependencies ""complete?"
3403
"Proofread <filename>debian/rules</filename>: does it follow the best "
"practices (see <xref linkend=\"bpp-debian-rules\"/>)? Do you see some "
"possible improvements?"
3412
"Proofread the maintainer scripts (<filename>preinst</filename>, "
"<filename>postinst</filename>, <filename>prerm</filename>, "
"<filename>postrm</filename>, <filename>config</filename>): will the "
"<filename>preinst</filename>/<filename>postrm</filename> work when the "
"dependencies are not installed? Are all the scripts idempotent (i.e. can you ""run them multiple times without consequences)?"
3425
"Review any change to upstream files (either in "
"<filename>.diff.gz</filename>, or in <filename>debian/patches/</filename> or ""directly embedded in the <filename>debian</filename> tarball for binary "
"files). Are they justified? Are they properly documented (with <ulink "
"url=\"&url-dep3;\">DEP-3</ulink> for patches)?"
3437
"For every file, ask yourself why the file is there and whether it's the "
"right way to achieve the desired result. Is the maintainer following the "
"best packaging practices (see <xref linkend=\"best-pkging-practices\"/>)?"
3446
"Build the packages, install them and try the software. Ensure you can remove ""and purge the packages. Maybe test them with <command>piuparts</command>."
3454
"If the audit did not reveal any problem, you can build the package and "
"upload it to Debian. Remember that even if you're not the maintainer, as a "
"sponsor you are still responsible for what you upload to Debian. That's why "
"you're encouraged to keep up with the package through the <xref "
"linkend=\"pkg-tracking-system\"/>."
3464
"Note that you should not need to modify the source package to put your name "
"in the <filename>changelog</filename> or in the <filename>control</filename> ""file. The <literal>Maintainer</literal> field of the "
"<filename>control</filename> file and the <filename>changelog</filename> "
"should list the person who did the packaging, i.e. the sponsoree. That way "
"they will get all the BTS mail."
3476
"Instead you should instruct <command>dpkg-buildpackage</command> to use your ""key for the signature. You do that with the <literal>-k</literal> option:"
3484
"dpkg-buildpackage -k<replaceable>KEY-ID</replaceable>\n"
3490
"If you use <command>debuild</command> and <command>debsign</command>, you "
"can even configure it permanently in <filename>~/.devscripts</filename>:"
3497
"DEBSIGN_KEYID=<replaceable>KEY-ID</replaceable>\n"
3503
"Sponsoring an update of an existing package"
3508
"You will usually assume that the package has already gone through a full "
"review. So instead of doing it again, you will carefully analyze the "
"difference between the current version and the new version prepared by the "
"maintainer. If you have not done the initial review yourself, you might "
"still want to have a more deeper look just in case the initial reviewer was "
"sloppy."
3519
"To be able to analyze the difference you need both versions. Download the "
"current version of the source package (with <command>apt-get "
"source</command>)  and rebuild it (or download the current binary packages "
"with <command>aptitude download</command>). Download the source package to "
"sponsor (usually with <command>dget</command>)."
3529
"Read the new changelog entry, it should tell you what to expect during the "
"review. The main tool you will use is <command>debdiff</command> (provide by ""the <systemitem role=\"package\">devscripts</systemitem> package), you can "
"run it with two source packages (<filename>.dsc</filename> files), or two "
"binary packages, or two <filename>.changes</filename> files (it will then "
"compare all the binary packages listed in the "
"<filename>.changes</filename>)."
3542
"If you compare the source packages (excluding upstream files in the case of "
"a new upstream version, for example by filtering the output of "
"<command>debdiff</command> with <command>filterdiff -i "
"'*/debian/*'</command>), you must understand all the changes you see and "
"they should be properly documented in the Debian changelog."
3552
"If everything is fine, build the package and compare the binary packages to "
"verify that the changes on the source package have no unexpected "
"consequences (like some files dropped by mistake, missing dependencies, "
"etc.)."
3561
"You might want to check out the Package Tracking System (see <xref "
"linkend=\"pkg-tracking-system\"/>) to verify if the maintainer has not "
"missed something important. Maybe there are translations updates sitting in "
"the BTS that could have been integrated. Maybe the package has been NMUed "
"and the maintainer forgot to integrate the changes from the NMU into their "
"package. Maybe there's a release critical bug that they have left unhandled "
"and that's blocking migration to <literal>testing</literal>.  If you find "
"something that they could have done (better), it's time to tell them so that ""they can improve for next time, and so that they have a better understanding ""of their responsibilities."
3578
"If you have found no major problem, upload the new version. Otherwise ask "
"the maintainer to provide you a fixed version."
3585
"Advocating new developers"
3590
"See the page about <ulink url=\"&url-newmaint-advocate;\">advocating a "
"prospective developer</ulink> at the Debian web site."
3597
"Handling new maintainer applications"
3602
"Please see <ulink url=\"&url-newmaint-amchecklist;\">Checklist for "
"Application Managers</ulink> at the Debian web site."
3609
"Debian Developer's Duties"
3614
"Package Maintainer's Duties"
3619
"As a package maintainer, you're supposed to provide high-quality packages "
"that are well integrated in the system and that adhere to the Debian Policy."
3626
"Work towards the next <literal>stable</literal> release"
3631
"Providing high-quality packages in <literal>unstable</literal> is not "
"enough, most users will only benefit from your packages when they are "
"released as part of the next <literal>stable</literal> release. You are thus ""expected to collaborate with the release team to ensure your packages get "
"included."
3642
"More concretely, you should monitor whether your packages are migrating to "
"<literal>testing</literal> (see <xref linkend=\"testing\"/>). When the "
"migration doesn't happen after the test period, you should analyze why and "
"work towards fixing this.  It might mean fixing your package (in the case of ""release-critical bugs or failures to build on some architecture) but it can "
"also mean updating (or fixing, or removing from <literal>testing</literal>) "
"other packages to help complete a transition in which your package is "
"entangled due to its dependencies. The release team might provide you some "
"input on the current blockers of a given transition if you are not able to "
"identify them."
3658
"Maintain packages in <literal>stable</literal>"
3663
"Most of the package maintainer's work goes into providing updated versions "
"of packages in <literal>unstable</literal>, but their job also entails "
"taking care of the packages in the current <literal>stable</literal> "
"release."
3672
"While changes in <literal>stable</literal> are discouraged, they are "
"possible. Whenever a security problem is reported, you should collaborate "
"with the security team to provide a fixed version (see <xref "
"linkend=\"bug-security\"/>). When bugs of severity important (or more) are "
"reported against the <literal>stable</literal> version of your packages, you ""should consider providing a targeted fix.  You can ask the "
"<literal>stable</literal> release team whether they would accept such an "
"update and then prepare a <literal>stable</literal> upload (see <xref "
"linkend=\"upload-stable\"/>)."
3687
"Manage release-critical bugs"
3692
"Generally you should deal with bug reports on your packages as described in "
"<xref linkend=\"bug-handling\"/>.  However, there's a special category of "
"bugs that you need to take care of — the so-called release-critical bugs (RC "
"bugs). All bug reports that have severity <literal>critical</literal>, "
"<literal>grave</literal> or <literal>serious</literal> make the package "
"unsuitable for inclusion in the next <literal>stable</literal> release.  "
"They can thus delay the Debian release (when they affect a package in "
"<literal>testing</literal>) or block migrations to "
"<literal>testing</literal> (when they only affect the package in "
"<literal>unstable</literal>). In the worst scenario, they will lead to the "
"package's removal. That's why these bugs need to be corrected as quickly as "
"possible."
3710
"If, for any reason, you aren't able fix an RC bug in a package of yours "
"within 2 weeks (for example due to time constraints, or because it's "
"difficult to fix), you should mention it clearly in the bug report and you "
"should tag the bug <literal>help</literal> to invite other volunteers to "
"chime in. Be aware that RC bugs are frequently the targets of Non-Maintainer ""Uploads (see <xref linkend=\"nmu\"/>) because they can block the "
"<literal>testing</literal> migration of many packages."
3723
"Lack of attention to RC bugs is often interpreted by the QA team as a sign "
"that the maintainer has disappeared without properly orphaning their "
"package.  The MIA team might also get involved, which could result in your "
"packages being orphaned (see <xref linkend=\"mia-qa\" />)."
3732
"Coordination with upstream developers"
3737
"A big part of your job as Debian maintainer will be to stay in contact with "
"the upstream developers.  Debian users will sometimes report bugs that are "
"not specific to Debian to our bug tracking system.  You have to forward "
"these bug reports to the upstream developers so that they can be fixed in a "
"future upstream release."
3747
"While it's not your job to fix non-Debian specific bugs, you may freely do "
"so if you're able.  When you make such fixes, be sure to pass them on to the ""upstream maintainers as well.  Debian users and developers will sometimes "
"submit patches to fix upstream bugs — you should evaluate and forward these "
"patches upstream."
3759
"If you need to modify the upstream sources in order to build a policy "
"compliant package, then you should propose a nice fix to the upstream "
"developers which can be included there, so that you won't have to modify the ""sources of the next upstream version.  Whatever changes you need, always try ""not to fork from the upstream sources."
3771
"If you find that the upstream developers are or become hostile towards "
"Debian or the free software community, you may want to re-consider the need "
"to include the software in Debian. Sometimes the social cost to the Debian "
"community is not worth the benefits the software may bring."
3780
"Administrative Duties"
3785
"A project of the size of Debian relies on some administrative infrastructure ""to keep track of everything. As a project member, you have some duties to "
"ensure everything keeps running smoothly."
3794
"Maintaining your Debian information"
3799
"There's a LDAP database containing information about Debian developers at "
"<ulink url=\"&url-debian-db;\"></ulink>.  You should enter your information "
"there and update it as it changes.  Most notably, make sure that the address ""where your debian.org email gets forwarded to is always up to date, as well "
"as the address where you get your debian-private subscription if you choose "
"to subscribe there."
3811
"For more information about the database, please see <xref "
"linkend=\"devel-db\"/>."
3818
"Maintaining your public key"
3823
"Be very careful with your private keys.  Do not place them on any public "
"servers or multiuser machines, such as the Debian servers (see <xref "
"linkend=\"server-machines\"/>).  Back your keys up; keep a copy offline.  "
"Read the documentation that comes with your software; read the <ulink "
"url=\"&url-pgp-faq;\">PGP FAQ</ulink>."
3833
"You need to ensure not only that your key is secure against being stolen, "
"but also that it is secure against being lost.  Generate and make a copy "
"(best also in paper form) of your revocation certificate; this is needed if "
"your key is lost."
3842
"If you add signatures to your public key, or add user identities, you can "
"update the Debian key ring by sending your key to the key server at "
"<literal>&keyserver-host;</literal>."
3850
"If you need to add a completely new key or remove an old key, you need to "
"get the new key signed by another developer.  If the old key is compromised "
"or invalid, you also have to add the revocation certificate.  If there is no ""real reason for a new key, the Keyring Maintainers might reject the new "
"key.  Details can be found at <ulink "
"url=\"http://&keyserver-host;/replacing_keys.html\"></ulink>."
3862
"The same key extraction routines discussed in <xref "
"linkend=\"registering\"/> apply."
3869
"You can find a more in-depth discussion of Debian key maintenance in the "
"documentation of the <systemitem "
"role=\"package\">debian-keyring</systemitem> package."
3877
"Voting"
3882
"Even though Debian isn't really a democracy, we use a democratic process to "
"elect our leaders and to approve general resolutions.  These procedures are "
"defined by the <ulink url=\"&url-constitution;\">Debian "
"Constitution</ulink>."
3891
"Other than the yearly leader election, votes are not routinely held, and "
"they are not undertaken lightly.  Each proposal is first discussed on the "
"&email-debian-vote; mailing list and it requires several endorsements before ""the project secretary starts the voting procedure."
3901
"You don't have to track the pre-vote discussions, as the secretary will "
"issue several calls for votes on &email-debian-devel-announce; (and all "
"developers are expected to be subscribed to that list).  Democracy doesn't "
"work well if people don't take part in the vote, which is why we encourage "
"all developers to vote.  Voting is conducted via GPG-signed/encrypted email "
"messages."
3912
"The list of all proposals (past and current) is available on the <ulink "
"url=\"&url-vote;\">Debian Voting Information</ulink> page, along with "
"information on how to make, second and vote on proposals."
3920
"Going on vacation gracefully"
3925
"It is common for developers to have periods of absence, whether those are "
"planned vacations or simply being buried in other work.  The important thing ""to notice is that other developers need to know that you're on vacation so "
"that they can do whatever is needed if a problem occurs with your packages "
"or other duties in the project."
3936
"Usually this means that other developers are allowed to NMU (see <xref "
"linkend=\"nmu\"/>) your package if a big problem (release critical bug, "
"security update, etc.) occurs while you're on vacation.  Sometimes it's "
"nothing as critical as that, but it's still appropriate to let others know "
"that you're unavailable."
3946
"This is so that the message can be easily filtered by people who don't want "
"to read vacation notices."
3953
"In order to inform the other developers, there are two things that you "
"should do.  First send a mail to <email>debian-private@&lists-host;</email> "
"with [VAC] prepended to the subject of your message<placeholder "
"type=\"footnote\" id=\"0\"/> and state the period of time when you will be "
"on vacation.  You can also give some special instructions on what to do if a ""problem occurs."
3965
"The other thing to do is to mark yourself as on vacation in the <link "
"linkend=\"devel-db\">Debian developers' LDAP database</link> (this "
"information is only accessible to Debian developers).  Don't forget to "
"remove the on vacation flag when you come back!"
3974
"Ideally, you should sign up at the <ulink url=\"&url-gpg-coord;\">GPG "
"coordination pages</ulink> when booking a holiday and check if anyone there "
"is looking for signing.  This is especially important when people go to "
"exotic places where we don't have any developers yet but where there are "
"people who are interested in applying."
3984
"Retiring"
3989
"If you choose to leave the Debian project, you should make sure you do the "
"following steps:"
3996
"Orphan all your packages, as described in <xref linkend=\"orphaning\"/>."
4002
"Send an gpg-signed email about why you are leaving the project to "
"<email>debian-private@&lists-host;</email>."
4009
"Notify the Debian key ring maintainers that you are leaving by opening a "
"ticket in Debian RT by sending a mail to &email-keyring; with the words "
"'Debian RT' somewhere in the subject line (case doesn't matter)."
4017
"It is important that the above process is followed, because finding inactive ""developers and orphaning their packages takes significant time and effort."
4025
"Returning after retirement"
4030
"A retired developer's account is marked as \"emeritus\" when the process in "
"<xref linkend=\"s3.7\"/> is followed, and \"disabled\" otherwise. Retired "
"developers with an \"emeritus\" account can get their account re-activated "
"as follows:"
4039
"Contact &email-debian-account-manager;."
4044
"Go through a shortened NM process (to ensure that the returning developer "
"still knows important parts of P&amp;P and T&amp;S)."
4051
"Prove that they still control the GPG key associated with the account, or "
"provide proof of identify on a new GPG key, with at least two signatures "
"from other developers."
4059
"Retired developers with a \"disabled\" account need to go through NM again."
4065
"en"
4070
"Debian Developer's Reference"
4075
"<author> <othername>Developer's Reference Team</othername> &email-devel-ref; ""</author> <author> <firstname>Andreas</firstname> <surname>Barth</surname> "
"</author> <author> <firstname>Adam</firstname> <surname>Di Carlo</surname> "
"</author> <author> <firstname>Raphaël</firstname> <surname>Hertzog</surname> "
"</author> <author> <firstname>Lucas</firstname> <surname>Nussbaum</surname> "
"</author> <author> <firstname>Christian</firstname> "
"<surname>Schwarz</surname> </author> <author> <firstname>Ian</firstname> "
"<surname>Jackson</surname> </author>"
4090
"ver. &version;"
4095
"<pubdate>&pubdate;</pubdate> <copyright> <year>2004</year> <year>2005</year> ""<year>2006</year> <year>2007</year> <holder>Andreas Barth</holder> "
"</copyright> <copyright> <year>1998</year> <year>1999</year> "
"<year>2000</year> <year>2001</year> <year>2002</year> <year>2003</year> "
"<holder>Adam Di Carlo</holder> </copyright> <copyright> <year>2002</year> "
"<year>2003</year> <year>2008</year> <year>2009</year> <holder>Raphaël "
"Hertzog</holder> </copyright> <copyright> <year>2008</year> "
"<year>2009</year> <holder>Lucas Nussbaum</holder> </copyright> <copyright> "
"<year>1997</year> <year>1998</year> <holder>Christian Schwarz</holder> "
"</copyright>"
4111
"This manual is free software; you may redistribute it and/or modify it under ""the terms of the GNU General Public License as published by the Free "
"Software Foundation; either version 2, or (at your option) any later "
"version."
4121
"This is distributed in the hope that it will be useful, but "
"<emphasis>without any warranty</emphasis>; without even the implied warranty ""of merchantability or fitness for a particular purpose.  See the GNU General ""Public License for more details."
4132
"A copy of the GNU General Public License is available as &file-GPL; in the "
"&debian-formal; distribution or on the World Wide Web at <ulink "
"url=\"&url-gpl;\">the GNU web site</ulink>.  You can also obtain it by "
"writing to the &fsf-addr;."
#.  TODO: Maybe better: "This document has originally been written
#. in English.  Translations into different languages are available." 
4143
"If you want to print this reference, you should use the <ulink "
"url=\"developers-reference.pdf\">pdf version</ulink>.  This page is also "
"available in <ulink url=\"index.fr.html\">French</ulink>, <ulink "
"url=\"index.de.html\">German</ulink> and <ulink "
"url=\"index.ja.html\">Japanese</ulink>."
4153
"Internationalization and Translations"
4158
"Debian supports an ever-increasing number of natural languages.  Even if you ""are a native English speaker and do not speak any other language, it is part ""of your duty as a maintainer to be aware of issues of internationalization "
"(abbreviated i18n because there are 18 letters between the 'i' and the 'n' "
"in internationalization).  Therefore, even if you are ok with English-only "
"programs, you should read most of this chapter."
4171
"According to <ulink url=\"&url-i18n-intro;\">Introduction to i18n</ulink> "
"from Tomohiro KUBOTA, I18N (internationalization) means modification of a "
"software or related technologies so that a software can potentially handle "
"multiple languages, customs, and so on in the world, while L10N "
"(localization) means implementation of a specific language for an already "
"internationalized software."
4182
"l10n and i18n are interconnected, but the difficulties related to each of "
"them are very different.  It's not really difficult to allow a program to "
"change the language in which texts are displayed based on user settings, but ""it is very time consuming to actually translate these messages.  On the "
"other hand, setting the character encoding is trivial, but adapting the code ""to use several character encodings is a really hard problem."
4195
"Setting aside the i18n problems, where no general guideline can be given, "
"there is actually no central infrastructure for l10n within Debian which "
"could be compared to the buildd mechanism for porting.  So most of the work "
"has to be done manually."
4204
"How translations are handled within Debian"
4209
"Handling translation of the texts contained in a package is still a manual "
"task, and the process depends on the kind of text you want to see "
"translated."
4217
"For program messages, the gettext infrastructure is used most of the time.  "
"Most of the time, the translation is handled upstream within projects like "
"the <ulink url=\"&url-l10n-tp;\">Free Translation Project</ulink>, the "
"<ulink url=\"&url-l10n-gnome;\">Gnome translation Project</ulink> or the "
"<ulink url=\"&url-l10n-kde;\">KDE one</ulink>.  The only centralized "
"resource within Debian is the <ulink url=\"&url-l10n;\">Central Debian "
"translation statistics</ulink>, where you can find some statistics about the ""translation files found in the actual packages, but no real infrastructure "
"to ease the translation process."
4232
"An effort to translate the package descriptions started long ago, even if "
"very little support is offered by the tools to actually use them (i.e., only ""APT can use them, when configured correctly).  Maintainers don't need to do "
"anything special to support translated package descriptions; translators "
"should use the <ulink url=\"&url-ddtp;\">Debian Description Translation "
"Project (DDTP)</ulink>."
4244
"For <systemitem role=\"package\">debconf</systemitem> templates, maintainers ""should use the <systemitem role=\"package\">po-debconf</systemitem> package "
"to ease the work of translators, who could use the DDTP to do their work "
"(but the French and Brazilian teams don't).  Some statistics can be found "
"both on the <ulink url=\"&url-ddtp;\">DDTP site</ulink> (about what is "
"actually translated), and on the <ulink url=\"&url-l10n;\">Central Debian "
"translation statistics</ulink> site (about what is integrated in the "
"packages)."
4258
"For web pages, each l10n team has access to the relevant VCS, and the "
"statistics are available from the Central Debian translation statistics "
"site."
4266
"For general documentation about Debian, the process is more or less the same ""as for the web pages (the translators have access to the VCS), but there are ""no statistics pages."
4276
"For package-specific documentation (man pages, info documents, other "
"formats), almost everything remains to be done."
4283
"Most notably, the KDE project handles translation of its documentation in "
"the same way as its program messages."
4290
"There is an effort to handle Debian-specific man pages within a <ulink "
"url=\"&url-cvsweb;manpages/?cvsroot=debian-doc\">specific VCS "
"repository</ulink>."
4298
"I18N &amp; L10N FAQ for maintainers"
4303
"This is a list of problems that maintainers may face concerning i18n and "
"l10n.  While reading this, keep in mind that there is no real consensus on "
"these points within Debian, and that this is only advice.  If you have a "
"better idea for a given problem, or if you disagree on some points, feel "
"free to provide your feedback, so that this document can be enhanced."
4313
"How to get a given text translated"
4318
"To translate package descriptions or <systemitem "
"role=\"package\">debconf</systemitem> templates, you have nothing to do; the ""DDTP infrastructure will dispatch the material to translate to volunteers "
"with no need for interaction from your part."
4328
"For all other material (gettext files, man pages, or other documentation), "
"the best solution is to put your text somewhere on the Internet, and ask on "
"debian-i18n for a translation in different languages.  Some translation team ""members are subscribed to this list, and they will take care of the "
"translation and of the reviewing process.  Once they are done, you will get "
"your translated document from them in your mailbox."
4340
"How to get a given translation reviewed"
4345
"From time to time, individuals translate some texts in your package and will ""ask you for inclusion of the translation in the package.  This can become "
"problematic if you are not fluent in the given language.  It is a good idea "
"to send the document to the corresponding l10n mailing list, asking for a "
"review.  Once it has been done, you should feel more confident in the "
"quality of the translation, and feel safe to include it in your package."
4357
"How to get a given translation updated"
4362
"If you have some translations of a given text lying around, each time you "
"update the original, you should ask the previous translator to update the "
"translation with your new changes.  Keep in mind that this task takes time; "
"at least one week to get the update reviewed and all."
4371
"If the translator is unresponsive, you may ask for help on the corresponding ""l10n mailing list.  If everything fails, don't forget to put a warning in "
"the translated document, stating that the translation is somehow outdated, "
"and that the reader should refer to the original document if possible."
4381
"Avoid removing a translation completely because it is outdated.  Old "
"documentation is often better than no documentation at all for non-English "
"speakers."
4389
"How to handle a bug report concerning a translation"
4395
"The best solution may be to mark the bug as forwarded to upstream, and "
"forward it to both the previous translator and their team (using the "
"corresponding debian-l10n-XXX mailing list)."
4403
"I18N &amp; L10N FAQ for translators"
4408
"While reading this, please keep in mind that there is no general procedure "
"within Debian concerning these points, and that in any case, you should "
"collaborate with your team and the package maintainer."
4416
"How to help the translation effort"
4421
"Choose what you want to translate, make sure that nobody is already working "
"on it (using your debian-l10n-XXX mailing list), translate it, get it "
"reviewed by other native speakers on your l10n mailing list, and provide it "
"to the maintainer of the package (see next point)."
4430
"How to provide a translation for inclusion in a package"
4435
"Make sure your translation is correct (asking for review on your l10n "
"mailing list) before providing it for inclusion.  It will save time for "
"everyone, and avoid the chaos resulting in having several versions of the "
"same document in bug reports."
4444
"The best solution is to file a regular bug containing the translation "
"against the package.  Make sure to use the 'PATCH' tag, and to not use a "
"severity higher than 'wishlist', since the lack of translation never "
"prevented a program from running."
4453
"Best current practice concerning l10n"
4458
"As a maintainer, never edit the translations in any way (even to reformat "
"the layout) without asking on the corresponding l10n mailing list.  You risk ""for example breaking the encoding of the file by doing so.  Moreover, what "
"you consider an error can be right (or even needed) in the given language."
4468
"As a translator, if you find an error in the original text, make sure to "
"report it.  Translators are often the most attentive readers of a given "
"text, and if they don't report the errors they find, nobody will."
4476
"In any case, remember that the major issue with l10n is that it requires "
"several people to cooperate, and that it is very easy to start a flamewar "
"about small problems because of misunderstandings.  So if you have problems "
"with your interlocutor, ask for help on the corresponding l10n mailing list, ""on debian-i18n, or even on debian-devel (but beware, l10n discussions very "
"often become flamewars on that list :)"
4488
"In any case, cooperation can only be achieved with <emphasis "
"role=\"strong\">mutual respect</emphasis>."
4495
"Applying to Become a Maintainer"
4500
"Getting started"
4505
"So, you've read all the documentation, you've gone through the <ulink "
"url=\"&url-newmaint-guide;\">Debian New Maintainers' Guide</ulink>, "
"understand what everything in the <systemitem "
"role=\"package\">hello</systemitem> example package is for, and you're about ""to Debianize your favorite piece of software.  How do you actually become a "
"Debian developer so that your work can be incorporated into the Project?"
4517
"Firstly, subscribe to &email-debian-devel; if you haven't already.  Send the ""word <literal>subscribe</literal> in the <literal>Subject</literal> of an "
"email to &email-debian-devel-req;.  In case of problems, contact the list "
"administrator at &email-listmaster;.  More information on available mailing "
"lists can be found in <xref linkend=\"mailing-lists\"/>.  "
"&email-debian-devel-announce; is another list which is mandatory for anyone "
"who wishes to follow Debian's development."
4530
"You should subscribe and lurk (that is, read without posting) for a bit "
"before doing any coding, and you should post about your intentions to work "
"on something to avoid duplicated effort."
4538
"Another good list to subscribe to is &email-debian-mentors;.  See <xref "
"linkend=\"mentors\"/> for details.  The IRC channel "
"<literal>#debian</literal> can also be helpful; see <xref "
"linkend=\"irc-channels\"/>."
4547
"When you know how you want to contribute to &debian-formal;, you should get "
"in contact with existing Debian maintainers who are working on similar "
"tasks.  That way, you can learn from experienced developers.  For example, "
"if you are interested in packaging existing software for Debian, you should "
"try to get a sponsor.  A sponsor will work together with you on your package ""and upload it to the Debian archive once they are happy with the packaging "
"work you have done.  You can find a sponsor by mailing the "
"&email-debian-mentors; mailing list, describing your package and yourself "
"and asking for a sponsor (see <xref linkend=\"sponsoring\"/> and <ulink "
"url=\"&url-mentors;\"></ulink> for more information on sponsoring).  On the "
"other hand, if you are interested in porting Debian to alternative "
"architectures or kernels you can subscribe to port specific mailing lists "
"and ask there how to get started.  Finally, if you are interested in "
"documentation or Quality Assurance (QA) work you can join maintainers "
"already working on these tasks and submit patches and improvements."
4568
"One pitfall could be a too-generic local part in your mailadress: Terms like ""mail, admin, root, master should be avoided, please see <ulink "
"url=\"&url-debian-lists;\"></ulink> for details."
4577
"Debian mentors and sponsors"
4582
"The mailing list &email-debian-mentors; has been set up for novice "
"maintainers who seek help with initial packaging and other developer-related ""issues.  Every new developer is invited to subscribe to that list (see <xref ""linkend=\"mailing-lists\"/> for details)."
4593
"Those who prefer one-on-one help (e.g., via private email) should also post "
"to that list and an experienced developer will volunteer to help."
4600
"In addition, if you have some packages ready for inclusion in Debian, but "
"are waiting for your new maintainer application to go through, you might be "
"able find a sponsor to upload your package for you.  Sponsors are people who ""are official Debian Developers, and who are willing to criticize and upload "
"your packages for you. Please read the debian-mentors FAQ at <ulink "
"url=\"&url-mentors;\"></ulink> first."
4612
"If you wish to be a mentor and/or sponsor, more information is available in "
"<xref linkend=\"newmaint\"/>."
4619
"Registering as a Debian developer"
4624
"Before you decide to register with &debian-formal;, you will need to read "
"all the information available at the <ulink url=\"&url-newmaint;\">New "
"Maintainer's Corner</ulink>.  It describes in detail the preparations you "
"have to do before you can register to become a Debian developer.  For "
"example, before you apply, you have to read the <ulink "
"url=\"&url-social-contract;\">Debian Social Contract</ulink>.  Registering "
"as a developer means that you agree with and pledge to uphold the Debian "
"Social Contract; it is very important that maintainers are in accord with "
"the essential ideas behind &debian-formal;.  Reading the <ulink "
"url=\"&url-gnu-manifesto;\">GNU Manifesto</ulink> would also be a good idea."
4639
"The process of registering as a developer is a process of verifying your "
"identity and intentions, and checking your technical skills.  As the number "
"of people working on &debian-formal; has grown to over "
"&number-of-maintainers; and our systems are used in several very important "
"places, we have to be careful about being compromised.  Therefore, we need "
"to verify new maintainers before we can give them accounts on our servers "
"and let them upload packages."
4651
"Before you actually register you should have shown that you can do competent ""work and will be a good contributor.  You show this by submitting patches "
"through the Bug Tracking System and having a package sponsored by an "
"existing Debian Developer for a while.  Also, we expect that contributors "
"are interested in the whole project and not just in maintaining their own "
"packages.  If you can help other maintainers by providing further "
"information on a bug or even a patch, then do so!"
4664
"Registration requires that you are familiar with Debian's philosophy and "
"technical documentation.  Furthermore, you need a GnuPG key which has been "
"signed by an existing Debian maintainer.  If your GnuPG key is not signed "
"yet, you should try to meet a Debian Developer in person to get your key "
"signed.  There's a <ulink url=\"&url-gpg-coord;\">GnuPG Key Signing "
"Coordination page</ulink> which should help you find a Debian Developer "
"close to you.  (If there is no Debian Developer close to you, alternative "
"ways to pass the ID check may be permitted as an absolute exception on a "
"case-by-case-basis.  See the <ulink url=\"&url-newmaint-id;\">identification ""page</ulink> for more information.)"
4680
"If you do not have an OpenPGP key yet, generate one.  Every developer needs "
"an OpenPGP key in order to sign and verify package uploads.  You should read ""the manual for the software you are using, since it has much important "
"information which is critical to its security.  Many more security failures "
"are due to human error than to software failure or high-powered spy "
"techniques.  See <xref linkend=\"key-maint\"/> for more information on "
"maintaining your public key."
4693
"Debian uses the <literal>GNU Privacy Guard</literal> (package <systemitem "
"role=\"package\">gnupg</systemitem> version 1 or better) as its baseline "
"standard.  You can use some other implementation of OpenPGP as well.  Note "
"that OpenPGP is an open standard based on <ulink url=\"&url-rfc2440;\">RFC "
"2440</ulink>."
4703
"Version 4 keys are keys conforming to the OpenPGP standard as defined in RFC ""2440.  Version 4 is the key type that has always been created when using "
"GnuPG.  PGP versions since 5.x also could create v4 keys, the other choice "
"having been pgp 2.6.x compatible v3 keys (also called legacy RSA by PGP)."
4713
"Version 4 (primary) keys can either use the RSA or the DSA algorithms, so "
"this has nothing to do with GnuPG's question about which kind of key do you "
"want: (1) DSA and Elgamal, (2)  DSA (sign only), (5) RSA (sign only).  If "
"you don't have any special requirements just pick the default."
4722
"The easiest way to tell whether an existing key is a v4 key or a v3 (or v2) "
"key is to look at the fingerprint: Fingerprints of version 4 keys are the "
"SHA-1 hash of some key material, so they are 40 hex digits, usually grouped "
"in blocks of 4.  Fingerprints of older key format versions used MD5 and are "
"generally shown in blocks of 2 hex digits.  For example if your fingerprint "
"looks like "
"<literal>5B00 C96D 5D54 AEE1 206B  AF84 DE7A AF6E 94C0 9C7F</literal> then "
"it's a v4 key."
4736
"Another possibility is to pipe the key into <command>pgpdump</command>, "
"which will say something like Public Key Packet - Ver 4."
4743
"Also note that your key must be self-signed (i.e.  it has to sign all its "
"own user IDs; this prevents user ID tampering).  All modern OpenPGP software ""does that automatically, but if you have an older key you may have to "
"manually add those signatures."
4753
"You need a version 4 key for use in Debian Development. <ulink "
"url=\"http://lists.debian.org/20090520092534.GG22906@earth.li\">Your key "
"length must be greater than 1024 bits</ulink>; there is no reason to use a "
"smaller key, and doing so would be much less secure.<placeholder "
"type=\"footnote\" id=\"0\"/>"
4763
"If your public key isn't on a public key server such as &pgp-keyserv;, "
"please read the documentation available at <ulink "
"url=\"&url-newmaint-id;\">NM Step 2: Identification</ulink>.  That document "
"contains instructions on how to put your key on the public key servers.  The ""New Maintainer Group will put your public key on the servers if it isn't "
"already there."
4775
"Some countries restrict the use of cryptographic software by their "
"citizens.  This need not impede one's activities as a Debian package "
"maintainer however, as it may be perfectly legal to use cryptographic "
"products for authentication, rather than encryption purposes.  If you live "
"in a country where use of cryptography even for authentication is forbidden "
"then please contact us so we can make special arrangements."
4786
"To apply as a new maintainer, you need an existing Debian Developer to "
"support your application (an <literal>advocate</literal>).  After you have "
"contributed to Debian for a while, and you want to apply to become a "
"registered developer, an existing developer with whom you have worked over "
"the past months has to express their belief that you can contribute to "
"Debian successfully."
4797
"When you have found an advocate, have your GnuPG key signed and have already ""contributed to Debian for a while, you're ready to apply.  You can simply "
"register on our <ulink url=\"&url-newmaint-apply;\">application "
"page</ulink>.  After you have signed up, your advocate has to confirm your "
"application.  When your advocate has completed this step you will be "
"assigned an Application Manager who will go with you through the necessary "
"steps of the New Maintainer process.  You can always check your status on "
"the <ulink url=\"&url-newmaint-db;\">applications status board</ulink>."
4811
"For more details, please consult <ulink url=\"&url-newmaint;\">New "
"Maintainer's Corner</ulink> at the Debian web site.  Make sure that you are "
"familiar with the necessary steps of the New Maintainer process before "
"actually applying.  If you are well prepared, you can save a lot of time "
"later on."
4821
"Managing Packages"
4826
"This chapter contains information related to creating, uploading, "
"maintaining, and porting packages."
4833
"New packages"
4838
"If you want to create a new package for the Debian distribution, you should "
"first check the <ulink url=\"&url-wnpp;\">Work-Needing and Prospective "
"Packages (WNPP)</ulink> list.  Checking the WNPP list ensures that no one is ""already working on packaging that software, and that effort is not "
"duplicated.  Read the <ulink url=\"&url-wnpp;\">WNPP web pages</ulink> for "
"more information."
4850
"Assuming no one else is already working on your prospective package, you "
"must then submit a bug report (<xref linkend=\"submit-bug\"/>) against the "
"pseudo-package <systemitem role=\"package\">wnpp</systemitem> describing "
"your plan to create a new package, including, but not limiting yourself to, "
"a description of the package, the license of the prospective package, and "
"the current URL where it can be downloaded from."
4861
"You should set the subject of the bug to <literal>ITP: "
"<replaceable>foo</replaceable> -- <replaceable>short "
"description</replaceable></literal>, substituting the name of the new "
"package for <replaceable>foo</replaceable>.  The severity of the bug report "
"must be set to <literal>wishlist</literal>.  Please send a copy to "
"&email-debian-devel; by using the X-Debbugs-CC header (don't use CC:, "
"because that way the message's subject won't indicate the bug number). If "
"you are packaging so many new packages (>10)  that notifying the mailing "
"list in separate messages is too disruptive, send a summary after filing the ""bugs to the debian-devel list instead.  This will inform the other "
"developers about upcoming packages and will allow a review of your "
"description and package name."
4879
"Please include a <literal>Closes: "
"#<replaceable>nnnnn</replaceable></literal> entry in the changelog of the "
"new package in order for the bug report to be automatically closed once the "
"new package is installed in the archive (see <xref "
"linkend=\"upload-bugfix\"/>)."
4889
"If you think your package needs some explanations for the administrators of "
"the NEW package queue, include them in your changelog, send to "
"&email-ftpmaster; a reply to the email you receive as a maintainer after "
"your upload, or reply to the rejection email in case you are already "
"re-uploading."
4899
"When closing security bugs include CVE numbers as well as the "
"<literal>Closes: #<replaceable>nnnnn</replaceable></literal>.  This is "
"useful for the security team to track vulnerabilities.  If an upload is made ""to fix the bug before the advisory ID is known, it is encouraged to modify "
"the historical changelog entry with the next upload.  Even in this case, "
"please include all available pointers to background information in the "
"original changelog entry."
4912
"There are a number of reasons why we ask maintainers to announce their "
"intentions:"
4919
"It helps the (potentially new) maintainer to tap into the experience of "
"people on the list, and lets them know if anyone else is working on it "
"already."
4927
"It lets other people thinking about working on the package know that there "
"already is a volunteer, so efforts may be shared."
4934
"It lets the rest of the maintainers know more about the package than the one ""line description and the usual changelog entry ``Initial release'' that gets ""posted to &email-debian-devel-changes;."
4944
"It is helpful to the people who live off <literal>unstable</literal> (and "
"form our first line of testers).  We should encourage these people."
4951
"The announcements give maintainers and other interested parties a better "
"feel of what is going on, and what is new, in the project."
4958
"Please see <ulink url=\"http://&ftp-master-host;/REJECT-FAQ.html\"></ulink> "
"for common rejection reasons for a new package."
4965
"Recording changes in the package"
4970
"Changes that you make to the package need to be recorded in the "
"<filename>debian/changelog</filename>.  These changes should provide a "
"concise description of what was changed, why (if it's in doubt), and note if ""any bugs were closed.  They also record when the package was completed.  "
"This file will be installed in "
"<filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.Debian.gz</filename>, "
"or "
"<filename>/usr/share/doc/<replaceable>package</replaceable>/changelog.gz</filename> "
"for native packages."
4987
"The <filename>debian/changelog</filename> file conforms to a certain "
"structure, with a number of different fields.  One field of note, the "
"<literal>distribution</literal>, is described in <xref "
"linkend=\"distribution\"/>.  More information about the structure of this "
"file can be found in the Debian Policy section titled "
"<filename>debian/changelog</filename>."
4998
"Changelog entries can be used to automatically close Debian bugs when the "
"package is installed into the archive.  See <xref "
"linkend=\"upload-bugfix\"/>."
5006
"It is conventional that the changelog entry of a package that contains a new ""upstream version of the software looks like this:"
5014
"  * New upstream release.\n"
5020
"There are tools to help you create entries and finalize the "
"<filename>changelog</filename> for release — see <xref "
"linkend=\"devscripts\"/> and <xref linkend=\"dpkg-dev-el\"/>."
5028
"See also <xref linkend=\"bpp-debian-changelog\"/>."
5033
"Testing the package"
5038
"Before you upload your package, you should do basic testing on it.  At a "
"minimum, you should try the following activities (you'll need to have an "
"older version of the same Debian package around):"
5046
"Install the package and make sure the software works, or upgrade the package ""from an older version to your new version if a Debian package for it already ""exists."
5056
"Run <command>lintian</command> over the package.  You can run "
"<command>lintian</command> as follows: <literal>lintian -v "
"<replaceable>package-version</replaceable>.changes</literal>.  This will "
"check the source package as well as the binary package.  If you don't "
"understand the output that <command>lintian</command> generates, try adding "
"the <literal>-i</literal> switch, which will cause "
"<command>lintian</command> to output a very verbose description of the "
"problem."
5069
"Normally, a package should <emphasis>not</emphasis> be uploaded if it causes ""<command>lintian</command> to emit errors (they will start with "
"<literal>E</literal>)."
5078
"For more information on <command>lintian</command>, see <xref "
"linkend=\"lintian\"/>."
5085
"Optionally run <command>debdiff</command> (see <xref linkend=\"debdiff\"/>) "
"to analyze changes from an older version, if one exists."
5092
"Downgrade the package to the previous version (if one exists) — this tests ""the <filename>postrm</filename> and <filename>prerm</filename> scripts."
5100
"Remove the package, then reinstall it."
5105
"Copy the source package in a different directory and try unpacking it and "
"rebuilding it.  This tests if the package relies on existing files outside "
"of it, or if it relies on permissions being preserved on the files shipped "
"inside the <filename>.diff.gz</filename> file."
5114
"Layout of the source package"
5119
"There are two types of Debian source packages:"
5124
"the so-called <literal>native</literal> packages, where there is no "
"distinction between the original sources and the patches applied for Debian"
5131
"the (more common) packages where there's an original source tarball file "
"accompanied by another file that contains the changes made by Debian"
5138
"For the native packages, the source package includes a Debian source control ""file (<filename>.dsc</filename>) and the source tarball "
"(<filename>.tar.{gz,bz2,xz}</filename>). A source package of a non-native "
"package includes a Debian source control file, the original source tarball "
"(<filename>.orig.tar.{gz,bz2,xz}</filename>) and the Debian changes "
"(<filename>.diff.gz</filename> for the source format “1.0” or "
"<filename>.debian.tar.{gz,bz2,xz}</filename> for the source format “3.0 "
"(quilt)”)."
5152
"With source format “1.0”, whether a package is native or not was determined "
"by <command>dpkg-source</command> at build time. Nowadays it is recommended "
"to be explicit about the desired source format by putting either “3.0 "
"(quilt)” or “3.0 (native)” in <filename>debian/source/format</filename>.  "
"The rest of this section relates only to non-native packages."
5164
"The first time a version is uploaded which corresponds to a particular "
"upstream version, the original source tar file should be uploaded and "
"included in the <filename>.changes</filename> file.  Subsequently, this very ""same tar file should be used to build the new diffs and "
"<filename>.dsc</filename> files, and will not need to be re-uploaded."
5175
"By default, <command>dpkg-genchanges</command> and "
"<command>dpkg-buildpackage</command> will include the original source tar "
"file if and only if the current changelog entry has a different upstream "
"version from the preceding entry. This behavior may be modified by using "
"<literal>-sa</literal> to always include it or <literal>-sd</literal> to "
"always leave it out."
5186
"If no original source is included in the upload, the original source "
"tar-file used by <command>dpkg-source</command> when constructing the "
"<filename>.dsc</filename> file and diff to be uploaded "
"<emphasis>must</emphasis> be byte-for-byte identical with the one already in ""the archive."
5197
"Please notice that, in non-native packages, permissions on files that are "
"not present in the <filename>*.orig.tar.{gz,bz2,xz}</filename> will not be "
"preserved, as diff does not store file permissions in the patch. However "
"when using source format “3.0 (quilt)”, permissions of files inside the "
"<filename>debian</filename> directory are preserved since they are stored in ""a tar archive."
5209
"Picking a distribution"
5214
"Each upload needs to specify which distribution the package is intended "
"for.  The package build process extracts this information from the first "
"line of the <filename>debian/changelog</filename> file and places it in the "
"<literal>Distribution</literal> field of the <filename>.changes</filename> "
"file."
5224
"There are several possible values for this field: <literal>stable</literal>, ""<literal>unstable</literal>, <literal>testing-proposed-updates</literal> and ""<literal>experimental</literal>.  Normally, packages are uploaded into "
"<literal>unstable</literal>."
5235
"Actually, there are other possible distributions: "
"<replaceable>codename</replaceable><literal>-security</literal>, but read "
"<xref linkend=\"bug-security\"/> for more information on those."
5243
"It is not possible to upload a package into several distributions at the "
"same time."
5250
"Special case: uploads to the <literal>stable</literal> and "
"<literal>oldstable</literal> distributions"
5257
"Uploading to <literal>stable</literal> means that the package will "
"transferred to the <literal>proposed-updates-new</literal> queue for review "
"by the stable release managers, and if approved will be installed in "
"<filename>stable-proposed-updates</filename> directory of the Debian "
"archive.  From there, it will be included in <literal>stable</literal> with "
"the next point release."
5268
"To ensure that your upload will be accepted, you should discuss the changes "
"with the stable release team before you upload. For that, file a bug against ""the <systemitem role=\"package\">release.debian.org</systemitem> "
"pseudo-package using <command>reportbug</command>, including the patch you "
"want to apply to the package version currently in "
"<literal>stable</literal>. Always be verbose and detailed in your changelog "
"entries for uploads to the <literal>stable</literal> distribution."
5281
"Extra care should be taken when uploading to <literal>stable</literal>.  "
"Basically, a package should only be uploaded to <literal>stable</literal> if ""one of the following happens:"
5290
"a truly critical functionality problem"
5295
"the package becomes uninstallable"
5300
"a released architecture lacks the package"
5305
"In the past, uploads to <literal>stable</literal> were used to address "
"security problems as well.  However, this practice is deprecated, as uploads ""used for Debian security advisories are automatically copied to the "
"appropriate <filename>proposed-updates</filename> archive when the advisory "
"is released.  See <xref linkend=\"bug-security\"/> for detailed information "
"on handling security problems. If the security teams deems the problem to be ""too benign to be fixed through a <literal>DSA</literal>, the stable release "
"managers are usually willing to include your fix nonetheless in a regular "
"upload to <literal>stable</literal>."
5321
"Changing anything else in the package that isn't important is discouraged, "
"because even trivial fixes can cause bugs later on."
5328
"Packages uploaded to <literal>stable</literal> need to be compiled on "
"systems running <literal>stable</literal>, so that their dependencies are "
"limited to the libraries (and other packages) available in "
"<literal>stable</literal>; for example, a package uploaded to "
"<literal>stable</literal> that depends on a library package that only exists ""in <literal>unstable</literal> will be rejected.  Making changes to "
"dependencies of other packages (by messing with <literal>Provides</literal> "
"or <filename>shlibs</filename> files), possibly making those other packages "
"uninstallable, is strongly discouraged."
5343
"Uploads to the <literal>oldstable</literal> distributions are possible as "
"long as it hasn't been archived. The same rules as for "
"<literal>stable</literal> apply."
5351
"Special case: uploads to <literal>testing/testing-proposed-updates</literal>"
5357
"Please see the information in the <link linkend=\"t-p-u\">testing "
"section</link> for details."
5364
"Uploading a package"
5369
"Uploading to <literal>ftp-master</literal>"
5374
"To upload a package, you should upload the files (including the signed "
"changes and dsc-file) with anonymous ftp to "
"<literal>&ftp-upload-host;</literal> in the directory <ulink "
"url=\"ftp://&ftp-upload-host;&upload-queue;\">&upload-queue;</ulink>.  To "
"get the files processed there, they need to be signed with a key in the "
"Debian Developers keyring or the Debian Maintainers keyring (see <ulink "
"url=\"&url-wiki-dm;\"></ulink>)."
5386
"Please note that you should transfer the changes file last.  Otherwise, your ""upload may be rejected because the archive maintenance software will parse "
"the changes file and see that not all files have been uploaded."
5395
"You may also find the Debian packages <link "
"linkend=\"dupload\">dupload</link> or <link linkend=\"dput\">dput</link> "
"useful when uploading packages.These handy programs help automate the "
"process of uploading packages into Debian."
5404
"For removing packages, please see <ulink "
"url=\"ftp://&ftp-upload-host;&upload-queue;README\"/> and the Debian package ""<link linkend=\"dcut\">dcut</link>."
5413
"Delayed uploads"
5418
"It is sometimes useful to upload a package immediately, but to want this "
"package to arrive in the archive only a few days later. For example, when "
"preparing a <link linkend=\"nmu\">Non-Maintainer Upload</link>, you might "
"want to give the maintainer a few days to react."
5427
"An upload to the delayed directory keeps the package in <ulink "
"url=\"http://ftp-master.debian.org/deferred.html\">the deferred uploads "
"queue</ulink>.  When the specified waiting time is over, the package is "
"moved into the regular incoming directory for processing.  This is done "
"through automatic uploading to <literal>&ftp-upload-host;</literal> in "
"upload-directory <literal>DELAYED/<replaceable>X</replaceable>-day</literal> ""(<replaceable>X</replaceable> between 0 and 15). 0-day is uploaded multiple "
"times per day to <literal>&ftp-upload-host;</literal>."
5441
"With dput, you can use the <literal>--delayed "
"<replaceable>DELAY</replaceable></literal> parameter to put the package into ""one of the queues."
5450
"Security uploads"
5455
"Do <emphasis role=\"strong\">NOT</emphasis> upload a package to the security ""upload queue (on <literal>security-master.debian.org</literal>)  without "
"prior authorization from the security team.  If the package does not exactly ""meet the team's requirements, it will cause many problems and delays in "
"dealing with the unwanted upload.  For details, please see <xref "
"linkend=\"bug-security\"/>."
5468
"Other upload queues"
5473
"There is an alternative upload queue in Europe at <ulink "
"url=\"ftp://&ftp-eu-upload-host;&upload-queue;\"/>. It operates in the same "
"way as <literal>&ftp-upload-host;</literal>, but should be faster for "
"European developers."
5482
"Packages can also be uploaded via ssh to "
"<literal>&ssh-upload-host;</literal>; files should be put "
"<literal>/srv/upload.debian.org/UploadQueue</literal>. This queue does not "
"support <link linkend=\"delayed-incoming\">delayed uploads</link>."
5491
"Notification that a new package has been installed"
5496
"The Debian archive maintainers are responsible for handling package "
"uploads.  For the most part, uploads are automatically handled on a daily "
"basis by the archive maintenance tools, <command>dak "
"process-upload</command>. Specifically, updates to existing packages to the "
"<literal>unstable</literal> distribution are handled automatically. In other ""cases, notably new packages, placing the uploaded package into the "
"distribution is handled manually. When uploads are handled manually, the "
"change to the archive may take some time to occur. Please be patient."
5510
"In any case, you will receive an email notification indicating that the "
"package has been added to the archive, which also indicates which bugs will "
"be closed by the upload.  Please examine this notification carefully, "
"checking if any bugs you meant to close didn't get triggered."
5519
"The installation notification also includes information on what section the "
"package was inserted into.  If there is a disparity, you will receive a "
"separate email notifying you of that.  Read on below."
5527
"Note that if you upload via queues, the queue daemon software will also send ""you a notification by email."
5535
"Specifying the package section, subsection and priority"
5540
"The <filename>debian/control</filename> file's <literal>Section</literal> "
"and <literal>Priority</literal> fields do not actually specify where the "
"file will be placed in the archive, nor its priority.  In order to retain "
"the overall integrity of the archive, it is the archive maintainers who have ""control over these fields.  The values in the "
"<filename>debian/control</filename> file are actually just hints."
5552
"The archive maintainers keep track of the canonical sections and priorities "
"for packages in the <literal>override file</literal>.  If there is a "
"disparity between the <literal>override file</literal> and the package's "
"fields as indicated in <filename>debian/control</filename>, then you will "
"receive an email noting the divergence when the package is installed into "
"the archive.  You can either correct your "
"<filename>debian/control</filename> file for your next upload, or else you "
"may wish to make a change in the <literal>override file</literal>."
5565
"To alter the actual section that a package is put in, you need to first make ""sure that the <filename>debian/control</filename> file in your package is "
"accurate.  Next, submit a bug against <systemitem "
"role=\"package\">ftp.debian.org</systemitem> requesting that the section or "
"priority for your package be changed from the old section or priority to the ""new one. Use a Subject like <literal>override: PACKAGE1:section/priority, "
"[...], PACKAGEX:section/priority</literal>, and include the justification "
"for the change in the body of the bug report."
5580
"For more information about <literal>override files</literal>, see "
"<citerefentry> <refentrytitle>dpkg-scanpackages</refentrytitle> "
"<manvolnum>1</manvolnum> </citerefentry> and <ulink "
"url=\"&url-bts-devel;#maintincorrect\"></ulink>."
5589
"Note that the <literal>Section</literal> field describes both the section as ""well as the subsection, which are described in <xref "
"linkend=\"archive-sections\"/>.  If the section is main, it should be "
"omitted.  The list of allowable subsections can be found in <ulink "
"url=\"&url-debian-policy;ch-archive.html#s-subsections\"></ulink>."
5600
"Handling bugs"
5605
"Every developer has to be able to work with the Debian <ulink "
"url=\"&url-bts;\">bug tracking system</ulink>.  This includes knowing how to ""file bug reports properly (see <xref linkend=\"submit-bug\"/>), how to "
"update them and reorder them, and how to process and close them."
5615
"The bug tracking system's features are described in the <ulink "
"url=\"&url-bts-devel;\">BTS documentation for developers</ulink>.  This "
"includes closing bugs, sending followup messages, assigning severities and "
"tags, marking bugs as forwarded, and other issues."
5624
"Operations such as reassigning bugs to other packages, merging separate bug "
"reports about the same issue, or reopening bugs when they are prematurely "
"closed, are handled using the so-called control mail server.  All of the "
"commands available on this server are described in the <ulink "
"url=\"&url-bts-control;\">BTS control server documentation</ulink>."
5634
"Monitoring bugs"
5639
"If you want to be a good maintainer, you should periodically check the "
"<ulink url=\"&url-bts;\">Debian bug tracking system (BTS)</ulink> for your "
"packages.  The BTS contains all the open bugs against your packages.  You "
"can check them by browsing this page: "
"<literal>http://&bugs-host;/<replaceable>yourlogin</replaceable>@debian.org</literal>."
5650
"Maintainers interact with the BTS via email addresses at "
"<literal>&bugs-host;</literal>.  Documentation on available commands can be "
"found at <ulink url=\"&url-bts;\"></ulink>, or, if you have installed the "
"<systemitem role=\"package\">doc-debian</systemitem> package, you can look "
"at the local files &file-bts-docs;."
5660
"Some find it useful to get periodic reports on open bugs.  You can add a "
"cron job such as the following if you want to get a weekly email outlining "
"all the open bugs against your packages:"
5668
"# ask for weekly reports of bugs in my packages\n"
"&cron-bug-report;\n"
5676
"Replace <replaceable>address</replaceable> with your official Debian "
"maintainer address."
5683
"Responding to bugs"
5688
"When responding to bugs, make sure that any discussion you have about bugs "
"is sent both to the original submitter of the bug, and to the bug itself "
"(e.g., <email><replaceable>123</replaceable>@&bugs-host;</email>).  If "
"you're writing a new mail and you don't remember the submitter email "
"address, you can use the "
"<email><replaceable>123</replaceable>-submitter@&bugs-host;</email> email to ""contact the submitter <emphasis>and</emphasis> to record your mail within "
"the bug log (that means you don't need to send a copy of the mail to "
"<email><replaceable>123</replaceable>@&bugs-host;</email>)."
5703
"If you get a bug which mentions FTBFS, this means Fails to build from "
"source.  Porters frequently use this acronym."
5710
"Once you've dealt with a bug report (e.g.  fixed it), mark it as "
"<literal>done</literal> (close it) by sending an explanation message to "
"<email><replaceable>123</replaceable>-done@&bugs-host;</email>.  If you're "
"fixing a bug by changing and uploading the package, you can automate bug "
"closing as described in <xref linkend=\"upload-bugfix\"/>."
5720
"You should <emphasis>never</emphasis> close bugs via the bug server "
"<literal>close</literal> command sent to &email-bts-control;.  If you do so, ""the original submitter will not receive any information about why the bug "
"was closed."
5730
"Bug housekeeping"
5735
"As a package maintainer, you will often find bugs in other packages or have "
"bugs reported against your packages which are actually bugs in other "
"packages.  The bug tracking system's features are described in the <ulink "
"url=\"&url-bts-devel;\">BTS documentation for Debian developers</ulink>.  "
"Operations such as reassigning, merging, and tagging bug reports are "
"described in the <ulink url=\"&url-bts-control;\">BTS control server "
"documentation</ulink>.  This section contains some guidelines for managing "
"your own bugs, based on the collective Debian developer experience."
5748
"Filing bugs for problems that you find in other packages is one of the civic ""obligations of maintainership, see <xref linkend=\"submit-bug\"/> for "
"details.  However, handling the bugs in your own packages is even more "
"important."
5758
"Here's a list of steps that you may follow to handle a bug report:"
5763
"Decide whether the report corresponds to a real bug or not.  Sometimes users ""are just calling a program in the wrong way because they haven't read the "
"documentation.  If you diagnose this, just close the bug with enough "
"information to let the user correct their problem (give pointers to the good ""documentation and so on).  If the same report comes up again and again you "
"may ask yourself if the documentation is good enough or if the program "
"shouldn't detect its misuse in order to give an informative error message.  "
"This is an issue that may need to be brought up with the upstream author."
5778
"If the bug submitter disagrees with your decision to close the bug, they may ""reopen it until you find an agreement on how to handle it.  If you don't "
"find any, you may want to tag the bug <literal>wontfix</literal> to let "
"people know that the bug exists but that it won't be corrected.  If this "
"situation is unacceptable, you (or the submitter) may want to require a "
"decision of the technical committee by reassigning the bug to <systemitem "
"role=\"package\">tech-ctte</systemitem> (you may use the clone command of "
"the BTS if you wish to keep it reported against your package).  Before doing ""so, please read the <ulink url=\"&url-tech-ctte;\">recommended "
"procedure</ulink>."
5795
"If the bug is real but it's caused by another package, just reassign the bug ""to the right package.  If you don't know which package it should be "
"reassigned to, you should ask for help on <link "
"linkend=\"irc-channels\">IRC</link> or on &email-debian-devel;.  Please "
"inform the maintainer(s) of the package you reassign the bug to, for example ""by Cc:ing the message that does the reassign to "
"<email><replaceable>packagename</replaceable>@packages.debian.org</email> "
"and explaining your reasons in that mail. Please note that a simple "
"reassignment is <emphasis>not</emphasis> e-mailed to the maintainers of the "
"package being reassigned to, so they won't know about it until they look at "
"a bug overview for their packages."
5813
"If the bug affects the operation of your package, please consider cloning "
"the bug and reassigning the clone to the package that really causes the "
"behavior. Otherwise, the bug will not be shown in your package's bug list, "
"possibly causing users to report the same bug over and over again. You "
"should block \"your\" bug with the reassigned, cloned bug to document the "
"relationship."
5824
"Sometimes you also have to adjust the severity of the bug so that it matches ""our definition of the severity.  That's because people tend to inflate the "
"severity of bugs to make sure their bugs are fixed quickly.  Some bugs may "
"even be dropped to wishlist severity when the requested change is just "
"cosmetic."
5835
"If the bug is real but the same problem has already been reported by someone ""else, then the two relevant bug reports should be merged into one using the "
"merge command of the BTS.  In this way, when the bug is fixed, all of the "
"submitters will be informed of this.  (Note, however, that emails sent to "
"one bug report's submitter won't automatically be sent to the other report's ""submitter.) For more details on the technicalities of the merge command and "
"its relative, the unmerge command, see the BTS control server documentation."
5849
"The bug submitter may have forgotten to provide some information, in which "
"case you have to ask them for the required information.  You may use the "
"<literal>moreinfo</literal> tag to mark the bug as such.  Moreover if you "
"can't reproduce the bug, you tag it <literal>unreproducible</literal>.  "
"Anyone who can reproduce the bug is then invited to provide more information ""on how to reproduce it.  After a few months, if this information has not "
"been sent by someone, the bug may be closed."
5862
"If the bug is related to the packaging, you just fix it.  If you are not "
"able to fix it yourself, then tag the bug as <literal>help</literal>.  You "
"can also ask for help on &email-debian-devel; or &email-debian-qa;.  If it's ""an upstream problem, you have to forward it to the upstream author.  "
"Forwarding a bug is not enough, you have to check at each release if the bug ""has been fixed or not.  If it has, you just close it, otherwise you have to "
"remind the author about it.  If you have the required skills you can prepare ""a patch that fixes the bug and send it to the author at the same time.  Make ""sure to send the patch to the BTS and to tag the bug as "
"<literal>patch</literal>."
5881
"If you have fixed a bug in your local copy, or if a fix has been committed "
"to the VCS repository, you may tag the bug as <literal>pending</literal> to "
"let people know that the bug is corrected and that it will be closed with "
"the next upload (add the <literal>closes:</literal> in the "
"<filename>changelog</filename>).  This is particularly useful if you are "
"several developers working on the same package."
5892
"Once a corrected package is available in the archive, the bug should be "
"closed indicating the version in which it was fixed. This can be done "
"automatically, read <xref linkend=\"upload-bugfix\"/>."
5900
"When bugs are closed by new uploads"
5905
"As bugs and problems are fixed in your packages, it is your responsibility "
"as the package maintainer to close these bugs.  However, you should not "
"close a bug until the package which fixes the bug has been accepted into the ""Debian archive.  Therefore, once you get notification that your updated "
"package has been installed into the archive, you can and should close the "
"bug in the BTS.  Also, the bug should be closed with the correct version."
5917
"However, it's possible to avoid having to manually close bugs after the "
"upload — just list the fixed bugs in your "
"<filename>debian/changelog</filename> file, following a certain syntax, and "
"the archive maintenance software will close the bugs for you.  For example:"
5926
"acme-cannon (3.1415) unstable; urgency=low\n"
"\n"
"  * Frobbed with options (closes: Bug#98339)\n"
"  * Added safety to prevent operator dismemberment, closes: bug#98765,\n"
"    bug#98713, #98714.\n"
"  * Added man page. Closes: #98725.\n"
5938
"Technically speaking, the following Perl regular expression describes how "
"bug closing changelogs are identified:"
5945
"  /closes:\\s*(?:bug)?\\#\\s*\\d+(?:,\\s*(?:bug)?\\#\\s*\\d+)*/ig\n"
5951
"We prefer the <literal>closes: #<replaceable>XXX</replaceable></literal> "
"syntax, as it is the most concise entry and the easiest to integrate with "
"the text of the <filename>changelog</filename>.  Unless specified different "
"by the <literal>-v</literal>-switch to <command>dpkg-buildpackage</command>, ""only the bugs closed in the most recent changelog entry are closed "
"(basically, exactly the bugs mentioned in the changelog-part in the "
"<filename>.changes</filename> file are closed)."
5964
"Historically, uploads identified as <link linkend=\"nmu\">non-maintainer "
"upload (NMU)</link> were tagged <literal>fixed</literal> instead of being "
"closed, but that practice was ceased with the advent of version-tracking.  "
"The same applied to the tag <literal>fixed-in-experimental</literal>."
5973
"If you happen to mistype a bug number or forget a bug in the changelog "
"entries, don't hesitate to undo any damage the error caused.  To reopen "
"wrongly closed bugs, send a <literal>reopen "
"<replaceable>XXX</replaceable></literal> command to the bug tracking "
"system's control address, &email-bts-control;.  To close any remaining bugs "
"that were fixed by your upload, email the <filename>.changes</filename> file ""to <email><replaceable>XXX</replaceable>-done@&bugs-host;</email>, where "
"<replaceable>XXX</replaceable> is the bug number, and put Version: "
"<replaceable>YYY</replaceable> and an empty line as the first two lines of "
"the body of the email, where <replaceable>YYY</replaceable> is the first "
"version where the bug has been fixed."
5990
"Bear in mind that it is not obligatory to close bugs using the changelog as "
"described above.  If you simply want to close bugs that don't have anything "
"to do with an upload you made, do it by emailing an explanation to "
"<email><replaceable>XXX</replaceable>-done@&bugs-host;</email>.  Do "
"<emphasis role=\"strong\">not</emphasis> close bugs in the changelog entry "
"of a version if the changes in that version of the package don't have any "
"bearing on the bug."
6002
"For general information on how to write your changelog entries, see <xref "
"linkend=\"bpp-debian-changelog\"/>."
6009
"Handling security-related bugs"
6014
"Due to their sensitive nature, security-related bugs must be handled "
"carefully.  The Debian Security Team exists to coordinate this activity, "
"keeping track of outstanding security problems, helping maintainers with "
"security problems or fixing them themselves, sending security advisories, "
"and maintaining <literal>security.debian.org</literal>."
6024
"When you become aware of a security-related bug in a Debian package, whether ""or not you are the maintainer, collect pertinent information about the "
"problem, and promptly contact the security team, preferably by filing a "
"ticket in their Request Tracker.  See <ulink "
"url=\"http://wiki.debian.org/rt.debian.org#Security_Team\"></ulink>.  "
"Alternatively you may email &email-security-team;.  <emphasis "
"role=\"strong\">DO NOT UPLOAD</emphasis> any packages for "
"<literal>stable</literal> without contacting the team.  Useful information "
"includes, for example:"
6039
"Whether or not the bug is already public."
6044
"Which versions of the package are known to be affected by the bug.  Check "
"each version that is present in a supported Debian release, as well as "
"<literal>testing</literal> and <literal>unstable</literal>."
6052
"The nature of the fix, if any is available (patches are especially helpful)"
6058
"Any fixed packages that you have prepared yourself (send only the "
"<filename>.diff.gz</filename> and <filename>.dsc</filename> files and read "
"<xref linkend=\"bug-security-building\"/> first)"
6066
"Any assistance you can provide to help with testing (exploits, regression "
"testing, etc.)"
6073
"Any information needed for the advisory (see <xref "
"linkend=\"bug-security-advisories\"/>)"
6080
"As the maintainer of the package, you have the responsibility to maintain "
"it, even in the stable release. You are in the best position to evaluate "
"patches and test updated packages, so please see the sections below on how "
"to prepare packages for the Security Team to handle."
6089
"The Security Tracker"
6094
"The security team maintains a central database, the <ulink "
"url=\"http://security-tracker.debian.org/\">Debian Security "
"Tracker</ulink>.  This contains all public information that is known about "
"security issues: which packages and versions are affected or fixed, and thus ""whether stable, testing and/or unstable are vulnerable. Information that is "
"still confidential is not added to the tracker."
6106
"You can search it for a specific issue, but also on package name. Look for "
"your package to see which issues are still open. If you can, please provide "
"more information about those issues, or help to address them in your "
"package.  Instructions are on the tracker web pages."
6115
"Confidentiality"
6120
"Unlike most other activities within Debian, information about security "
"issues must sometimes be kept private for a time.  This allows software "
"distributors to coordinate their disclosure in order to minimize their "
"users' exposure.  Whether this is the case depends on the nature of the "
"problem and corresponding fix, and whether it is already a matter of public "
"knowledge."
6131
"There are several ways developers can learn of a security problem:"
6137
"they notice it on a public forum (mailing list, web site, etc.)"
6143
"someone files a bug report"
6149
"someone informs them via private email"
6154
"In the first two cases, the information is public and it is important to "
"have a fix as soon as possible.  In the last case, however, it might not be "
"public information.  In that case there are a few possible options for "
"dealing with the problem:"
6164
"If the security exposure is minor, there is sometimes no need to keep the "
"problem a secret and a fix should be made and released."
6172
"If the problem is severe, it is preferable to share the information with "
"other vendors and coordinate a release.  The security team keeps in contact "
"with the various organizations and individuals and can take care of that."
6180
"In all cases if the person who reports the problem asks that it not be "
"disclosed, such requests should be honored, with the obvious exception of "
"informing the security team in order that a fix may be produced for a stable ""release of Debian.  When sending confidential information to the security "
"team, be sure to mention this fact."
6191
"Please note that if secrecy is needed you may not upload a fix to "
"<literal>unstable</literal> (or anywhere else, such as a public VCS "
"repository).  It is not sufficient to obfuscate the details of the change, "
"as the code itself is public, and can (and will) be examined by the general "
"public."
6201
"There are two reasons for releasing information even though secrecy is "
"requested: the problem has been known for a while, or the problem or exploit ""has become public."
6210
"The Security Team has a PGP-key to enable encrypted communication about "
"sensitive issues. See the <ulink "
"url=\"http://www.debian.org/security/faq#contact\">Security Team FAQ</ulink> ""for details."
6220
"Security Advisories"
6225
"Security advisories are only issued for the current, released stable "
"distribution, and <emphasis>not</emphasis> for <literal>testing</literal> or ""<literal>unstable</literal>.  When released, advisories are sent to the "
"&email-debian-security-announce; mailing list and posted on <ulink "
"url=\"&url-debian-security-advisories;\">the security web page</ulink>.  "
"Security advisories are written and posted by the security team.  However "
"they certainly do not mind if a maintainer can supply some of the "
"information for them, or write part of the text.  Information that should be ""in an advisory includes:"
6242
"A description of the problem and its scope, including:"
6248
"The type of problem (privilege escalation, denial of service, etc.)"
6254
"What privileges may be gained, and by whom (if any)"
6260
"How it can be exploited"
6266
"Whether it is remotely or locally exploitable"
6272
"How the problem was fixed"
6278
"This information allows users to assess the threat to their systems."
6284
"Version numbers of affected packages"
6290
"Version numbers of fixed packages"
6296
"Information on where to obtain the updated packages (usually from the Debian ""security archive)"
6305
"References to upstream advisories, <ulink "
"url=\"http://cve.mitre.org\">CVE</ulink> identifiers, and any other "
"information useful in cross-referencing the vulnerability"
6313
"Preparing packages to address security issues"
6318
"One way that you can assist the security team in their duties is to provide "
"them with fixed packages suitable for a security advisory for the stable "
"Debian release."
6326
"When an update is made to the stable release, care must be taken to avoid "
"changing system behavior or introducing new bugs.  In order to do this, make ""as few changes as possible to fix the bug.  Users and administrators rely on ""the exact behavior of a release once it is made, so any change that is made "
"might break someone's system.  This is especially true of libraries: make "
"sure you never change the API or ABI, no matter how small the change."
6339
"This means that moving to a new upstream version is not a good solution.  "
"Instead, the relevant changes should be back-ported to the version present "
"in the current stable Debian release.  Generally, upstream maintainers are "
"willing to help if needed.  If not, the Debian security team may be able to "
"help."
6349
"In some cases, it is not possible to back-port a security fix, for example "
"when large amounts of source code need to be modified or rewritten.  If this ""happens, it may be necessary to move to a new upstream version.  However, "
"this is only done in extreme situations, and you must always coordinate that ""with the security team beforehand."
6361
"Related to this is another important guideline: always test your changes.  "
"If you have an exploit available, try it and see if it indeed succeeds on "
"the unpatched package and fails on the fixed package.  Test other, normal "
"actions as well, as sometimes a security fix can break seemingly unrelated "
"features in subtle ways."
6371
"Do <emphasis role=\"strong\">NOT</emphasis> include any changes in your "
"package which are not directly related to fixing the vulnerability.  These "
"will only need to be reverted, and this wastes time.  If there are other "
"bugs in your package that you would like to fix, make an upload to "
"proposed-updates in the usual way, after the security advisory is issued.  "
"The security update mechanism is not a means for introducing changes to your ""package which would otherwise be rejected from the stable release, so please ""do not attempt to do this."
6386
"Review and test your changes as much as possible.  Check the differences "
"from the previous version repeatedly (<command>interdiff</command> from the "
"<systemitem role=\"package\">patchutils</systemitem> package and "
"<command>debdiff</command> from <systemitem "
"role=\"package\">devscripts</systemitem> are useful tools for this, see "
"<xref linkend=\"debdiff\"/>)."
6397
"Be sure to verify the following items:"
6403
"<emphasis role=\"strong\">Target the right distribution</emphasis> in your "
"<filename>debian/changelog</filename>: "
"<replaceable>codename</replaceable><literal>-security</literal> "
"(e.g. <literal>wheezy-security</literal>).  Do not target "
"<replaceable>distribution</replaceable><literal>-proposed-updates</literal> "
"or <literal>stable</literal>!"
6415
"The upload should have <emphasis role=\"strong\">urgency=high</emphasis>."
6422
"Make descriptive, meaningful changelog entries.  Others will rely on them to ""determine whether a particular bug was fixed.  Add "
"<literal>closes:</literal> statements for any <emphasis "
"role=\"strong\">Debian bugs</emphasis> filed.  Always include an external "
"reference, preferably a <emphasis role=\"strong\">CVE identifier</emphasis>, ""so that it can be cross-referenced. However, if a CVE identifier has not yet ""been assigned, do not wait for it but continue the process. The identifier "
"can be cross-referenced later."
6439
"Make sure the <emphasis role=\"strong\">version number</emphasis> is "
"proper.  It must be greater than the current package, but less than package "
"versions in later distributions.  If in doubt, test it with <literal>dpkg "
"--compare-versions</literal>.  Be careful not to re-use a version number "
"that you have already used for a previous upload, or one that conflicts with ""a binNMU. The convention is to append "
"<literal>+deb</literal><replaceable>X</replaceable><literal>u1</literal> "
"(where <replaceable>X</replaceable> is the major release number), e.g.  "
"<literal>1:2.4.3-4+deb7u1</literal>, of course increasing 1 for any "
"subsequent uploads."
6456
"Unless the upstream source has been uploaded to "
"<literal>security.debian.org</literal> before (by a previous security "
"update), build the upload <emphasis role=\"strong\">with full upstream "
"source</emphasis> (<literal>dpkg-buildpackage -sa</literal>).  If there has "
"been a previous upload to <literal>security.debian.org</literal> with the "
"same upstream version, you may upload without upstream source "
"(<literal>dpkg-buildpackage -sd</literal>)."
6469
"Be sure to use the <emphasis role=\"strong\">exact same "
"<filename>*.orig.tar.{gz,bz2,xz}</filename></emphasis> as used in the normal ""archive, otherwise it is not possible to move the security fix into the main ""archives later."
6481
"Build the package on a <emphasis role=\"strong\">clean system</emphasis> "
"which only has packages installed from the distribution you are building "
"for. If you do not have such a system yourself, you can use a debian.org "
"machine (see <xref linkend=\"server-machines\"/>) or setup a chroot (see "
"<xref linkend=\"pbuilder\"/> and <xref linkend=\"debootstrap\"/>)."
6491
"Uploading the fixed package"
6496
"Do <emphasis role=\"strong\">NOT</emphasis> upload a package to the security ""upload queue (on <literal>security-master.debian.org</literal>)  without "
"prior authorization from the security team.  If the package does not exactly ""meet the team's requirements, it will cause many problems and delays in "
"dealing with the unwanted upload."
6508
"Do <emphasis role=\"strong\">NOT</emphasis> upload your fix to "
"<literal>proposed-updates</literal> without coordinating with the security "
"team.  Packages from <literal>security.debian.org</literal> will be copied "
"into the <literal>proposed-updates</literal> directory automatically.  If a "
"package with the same or a higher version number is already installed into "
"the archive, the security update will be rejected by the archive system.  "
"That way, the stable distribution will end up without a security update for "
"this package instead."
6521
"Once you have created and tested the new package and it has been approved by ""the security team, it needs to be uploaded so that it can be installed in "
"the archives.  For security uploads, the place to upload to is "
"<literal>ftp://security-master.debian.org/pub/SecurityUploadQueue/</literal>."6532
"Once an upload to the security queue has been accepted, the package will "
"automatically be built for all architectures and stored for verification by "
"the security team."
6540
"Uploads which are waiting for acceptance or verification are only accessible ""by the security team.  This is necessary since there might be fixes for "
"security problems that cannot be disclosed yet."
6549
"If a member of the security team accepts a package, it will be installed on "
"<literal>security.debian.org</literal> as well as proposed for the proper "
"<replaceable>distribution</replaceable><literal>-proposed-updates</literal> "
"on <literal>&ftp-master-host;</literal>."
6558
"Moving, removing, renaming, orphaning, adopting, and reintroducing packages"
6564
"Some archive manipulation operations are not automated in the Debian upload "
"process.  These procedures should be manually followed by maintainers.  This ""chapter gives guidelines on what to do in these cases."
6573
"Moving packages"
6578
"See the <ulink url=\"&url-debian-policy;\">Debian Policy Manual</ulink> for "
"guidelines on what section a package belongs in."
6585
"Sometimes a package will change its section.  For instance, a package from "
"the <literal>non-free</literal> section might be GPL'd in a later version, "
"in which case the package should be moved to `main' or "
"`contrib'.<placeholder type=\"footnote\" id=\"0\"/>"
6594
"If you need to change the section for one of your packages, change the "
"package control information to place the package in the desired section, and ""re-upload the package (see the <ulink url=\"&url-debian-policy;\">Debian "
"Policy Manual</ulink> for details).  You must ensure that you include the "
"<filename>.orig.tar.{gz,bz2,xz}</filename> in your upload (even if you are "
"not uploading a new upstream version), or it will not appear in the new "
"section together with the rest of the package.  If your new section is "
"valid, it will be moved automatically.  If it does not, then contact the "
"ftpmasters in order to understand what happened."
6609
"If, on the other hand, you need to change the <literal>subsection</literal> "
"of one of your packages (e.g., ``devel'', ``admin''), the procedure is "
"slightly different.  Correct the subsection as found in the control file of "
"the package, and re-upload that.  Also, you'll need to get the override file ""updated, as described in <xref linkend=\"override-file\"/>."
6620
"Removing packages"
6625
"If for some reason you want to completely remove a package (say, if it is an ""old compatibility library which is no longer required), you need to file a "
"bug against <systemitem role=\"package\">&ftp-debian-org;</systemitem> "
"asking that the package be removed; as all bugs, this bug should normally "
"have normal severity.  The bug title should be in the form <literal>RM: "
"<replaceable>package</replaceable> <replaceable>[architecture "
"list]</replaceable> -- <replaceable>reason</replaceable></literal>, where "
"<replaceable>package</replaceable> is the package to be removed and "
"<replaceable>reason</replaceable> is a short summary of the reason for the "
"removal request.  <replaceable>[architecture list]</replaceable> is optional ""and only needed if the removal request only applies to some architectures, "
"not all. Note that the <command>reportbug</command> will create a title "
"conforming to these rules when you use it to report a bug against the "
"<systemitem role=\"package\">&ftp-debian-org;</systemitem> pseudo-package."
6646
"If you want to remove a package you maintain, you should note this in the "
"bug title by prepending <literal>ROM</literal> (Request Of Maintainer).  "
"There are several other standard acronyms used in the reasoning for a "
"package removal, see <ulink "
"url=\"http://&ftp-master-host;/removals.html\"></ulink> for a complete "
"list. That page also provides a convenient overview of pending removal "
"requests."
6658
"Note that removals can only be done for the <literal>unstable</literal>, "
"<literal>experimental</literal> and <literal>stable</literal> distribution.  ""Packages are not removed from <literal>testing</literal> directly.  Rather, "
"they will be removed automatically after the package has been removed from "
"<literal>unstable</literal> and no package in <literal>testing</literal> "
"depends on it. (Removals from <literal>testing</literal> are possible though ""by filing a removal bug report against the <systemitem "
"role=\"package\">&release-debian-org;</systemitem> pseudo-package. See the "
"section <xref linkend=\"removals\"/>.)"
6674
"There is one exception when an explicit removal request is not necessary: If ""a (source or binary) package is no longer built from source, it will be "
"removed semi-automatically. For a binary-package, this means if there is no "
"longer any source package producing this binary package; if the binary "
"package is just no longer produced on some architectures, a removal request "
"is still necessary. For a source-package, this means that all binary "
"packages it refers to have been taken over by another source package."
6687
"In your removal request, you have to detail the reasons justifying the "
"request.  This is to avoid unwanted removals and to keep a trace of why a "
"package has been removed.  For example, you can provide the name of the "
"package that supersedes the one to be removed."
6696
"Usually you only ask for the removal of a package maintained by yourself.  "
"If you want to remove another package, you have to get the approval of its "
"maintainer. Should the package be orphaned and thus have no maintainer, you "
"should first discuss the removal request on &email-debian-qa;. If there is a ""consensus that the package should be removed, you should reassign and "
"retitle the <literal>O:</literal> bug filed against the "
"<literal>wnpp</literal> package instead of filing a new bug as removal "
"request."
6710
"Further information relating to these and other package removal related "
"topics may be found at <ulink "
"url=\"http://wiki.debian.org/ftpmaster_Removals\"></ulink> and <ulink "
"url=\"&url-debian-qa;howto-remove.html\"></ulink>."
6719
"If in doubt concerning whether a package is disposable, email "
"&email-debian-devel; asking for opinions.  Also of interest is the "
"<command>apt-cache</command> program from the <systemitem "
"role=\"package\">apt</systemitem> package.  When invoked as "
"<literal>apt-cache showpkg <replaceable>package</replaceable></literal>, the ""program will show details for <replaceable>package</replaceable>, including "
"reverse depends.  Other useful programs include <command>apt-cache "
"rdepends</command>, <command>apt-rdepends</command>, "
"<command>build-rdeps</command> (in the <systemitem "
"role=\"package\">devscripts</systemitem> package) and "
"<command>grep-dctrl</command>.  Removal of orphaned packages is discussed on ""&email-debian-qa;."
6738
"Once the package has been removed, the package's bugs should be handled.  "
"They should either be reassigned to another package in the case where the "
"actual code has evolved into another package (e.g.  "
"<literal>libfoo12</literal> was removed because <literal>libfoo13</literal> "
"supersedes it) or closed if the software is simply no longer part of "
"Debian.  When closing the bugs, to avoid marking the bugs as fixed in "
"versions of the packages in previous Debian releases, they should be marked "
"as fixed in the version "
"<literal>&lt;most-recent-version-ever-in-Debian&gt;+rm</literal>."
6752
"Removing packages from <filename>Incoming</filename>"
6757
"In the past, it was possible to remove packages from "
"<filename>incoming</filename>.  However, with the introduction of the new "
"incoming system, this is no longer possible.  Instead, you have to upload a "
"new revision of your package with a higher version than the package you want ""to replace.  Both versions will be installed in the archive but only the "
"higher version will actually be available in <literal>unstable</literal> "
"since the previous version will immediately be replaced by the higher.  "
"However, if you do proper testing of your packages, the need to replace a "
"package should not occur too often anyway."
6772
"Replacing or renaming packages"
6777
"When the upstream maintainers for one of your packages chose to rename their ""software (or you made a mistake naming your package), you should follow a "
"two-step process to rename it. In the first step, change the "
"<filename>debian/control</filename> file to reflect the new name and to "
"replace, provide and conflict with the obsolete package name (see the <ulink ""url=\"&url-debian-policy;\">Debian Policy Manual</ulink> for details).  "
"Please note that you should only add a <literal>Provides</literal> relation "
"if all packages depending on the obsolete package name continue to work "
"after the renaming. Once you've uploaded the package and the package has "
"moved into the archive, file a bug against <systemitem "
"role=\"package\">&ftp-debian-org;</systemitem> asking to remove the package "
"with the obsolete name (see <xref linkend=\"removing-pkgs\"/>).  Do not "
"forget to properly reassign the package's bugs at the same time."
6797
"At other times, you may make a mistake in constructing your package and wish ""to replace it.  The only way to do this is to increase the version number "
"and upload a new version.  The old version will be expired in the usual "
"manner.  Note that this applies to each part of your package, including the "
"sources: if you wish to replace the upstream source tarball of your package, ""you will need to upload it with a different version.  An easy possibility is ""to replace <filename>foo_1.00.orig.tar.gz</filename> with "
"<filename>foo_1.00+0.orig.tar.gz</filename> or "
"<filename>foo_1.00.orig.tar.bz2</filename>.  This restriction gives each "
"file on the ftp site a unique name, which helps to ensure consistency across ""the mirror network."
6817
"Orphaning a package"
6822
"If you can no longer maintain a package, you need to inform others, and see "
"that the package is marked as orphaned.  You should set the package "
"maintainer to <literal>Debian QA Group &orphan-address;</literal> and submit ""a bug report against the pseudo package <systemitem "
"role=\"package\">wnpp</systemitem>.  The bug report should be titled "
"<literal>O: <replaceable>package</replaceable> -- <replaceable>short "
"description</replaceable></literal> indicating that the package is now "
"orphaned.  The severity of the bug should be set to "
"<literal>normal</literal>; if the package has a priority of standard or "
"higher, it should be set to important.  If you feel it's necessary, send a "
"copy to &email-debian-devel; by putting the address in the X-Debbugs-CC: "
"header of the message (no, don't use CC:, because that way the message's "
"subject won't indicate the bug number)."
6841
"If you just intend to give the package away, but you can keep maintainership ""for the moment, then you should instead submit a bug against <systemitem "
"role=\"package\">wnpp</systemitem> and title it <literal>RFA: "
"<replaceable>package</replaceable> -- <replaceable>short "
"description</replaceable></literal>.  <literal>RFA</literal> stands for "
"<literal>Request For Adoption</literal>."
6853
"More information is on the <ulink url=\"&url-wnpp;\">WNPP web pages</ulink>."
6859
"Adopting a package"
6864
"A list of packages in need of a new maintainer is available in the <ulink "
"url=\"&url-wnpp;\">Work-Needing and Prospective Packages list "
"(WNPP)</ulink>.  If you wish to take over maintenance of any of the packages ""listed in the WNPP, please take a look at the aforementioned page for "
"information and procedures."
6875
"It is not OK to simply take over a package that you feel is neglected — that "
"would be package hijacking.  You can, of course, contact the current "
"maintainer and ask them if you may take over the package.  If you have "
"reason to believe a maintainer has gone AWOL (absent without leave), see "
"<xref linkend=\"mia-qa\"/>."
6886
"Generally, you may not take over the package without the assent of the "
"current maintainer.  Even if they ignore you, that is still not grounds to "
"take over a package.  Complaints about maintainers should be brought up on "
"the developers' mailing list.  If the discussion doesn't end with a positive ""conclusion, and the issue is of a technical nature, consider bringing it to "
"the attention of the technical committee (see the <ulink "
"url=\"&url-tech-ctte;\">technical committee web page</ulink> for more "
"information)."
6900
"If you take over an old package, you probably want to be listed as the "
"package's official maintainer in the bug system.  This will happen "
"automatically once you upload a new version with an updated "
"<literal>Maintainer</literal> field, although it can take a few hours after "
"the upload is done.  If you do not expect to upload a new version for a "
"while, you can use <xref linkend=\"pkg-tracking-system\"/> to get the bug "
"reports.  However, make sure that the old maintainer has no problem with the ""fact that they will continue to receive the bugs during that time."
6914
"Reintroducing packages"
6919
"Packages are often removed due to release-critical bugs, absent maintainers, ""too few users or poor quality in general. While the process of "
"reintroduction is similar to the initial packaging process, you can avoid "
"some pitfalls by doing some historical research first."
6929
"You should check why the package was removed in the first place. This "
"information can be found in the removal item in the news section of the PTS "
"page for the package or by browsing the log of <ulink "
"url=\"http://&ftp-master-host;/#removed\">removals</ulink>.  The removal bug ""will tell you why the package was removed and will give some indication of "
"what you will need to work on in order to reintroduce the package.  It may "
"indicate that the best way forward is to switch to some other piece of "
"software instead of reintroducing the package."
6943
"It may be appropriate to contact the former maintainers to find out if they "
"are working on reintroducing the package, interested in co-maintaining the "
"package or interested in sponsoring the package if needed."
6951
"You should do all the things required before introducing new packages (<xref ""linkend=\"newpackage\"/>)."
6959
"You should base your work on the latest packaging available that is "
"suitable.  That might be the latest version from "
"<literal>unstable</literal>, which will still be present in the <ulink "
"url=\"&snap-debian-org;\">snapshot archive</ulink>."
6968
"The version control system used by the previous maintainer might contain "
"useful changes, so it might be a good idea to have a look there.  Check if "
"the <filename>control</filename> file of the previous package contained any "
"headers linking to the version control system for the package and if it "
"still exists."
6978
"Package removals from <literal>unstable</literal> (not "
"<literal>testing</literal>, <literal>stable</literal> or "
"<literal>oldstable</literal>) trigger the closing of all bugs related to the ""package. You should look through all the closed bugs (including archived "
"bugs) and unarchive and reopen any that were closed in a version ending in "
"<literal>+rm</literal> and still apply. Any that no longer apply should be "
"marked as fixed in the correct version if that is known."
6991
"Porting and being ported"
6996
"Debian supports an ever-increasing number of architectures.  Even if you are ""not a porter, and you don't use any architecture but one, it is part of your ""duty as a maintainer to be aware of issues of portability.  Therefore, even "
"if you are not a porter, you should read most of this chapter."
7007
"Porting is the act of building Debian packages for architectures that are "
"different from the original architecture of the package maintainer's binary "
"package.  It is a unique and essential activity.  In fact, porters do most "
"of the actual compiling of Debian packages.  For instance, when a maintainer ""uploads a (portable) source packages with binaries for the "
"<literal>i386</literal> architecture, it will be built for each of the other ""architectures, amounting to &number-of-arches; more builds."
7021
"Being kind to porters"
7026
"Porters have a difficult and unique task, since they are required to deal "
"with a large volume of packages.  Ideally, every source package should build ""right out of the box.  Unfortunately, this is often not the case.  This "
"section contains a checklist of ``gotchas'' often committed by Debian "
"maintainers — common problems which often stymie porters, and make their "
"jobs unnecessarily difficult."
7038
"The first and most important thing is to respond quickly to bug or issues "
"raised by porters.  Please treat porters with courtesy, as if they were in "
"fact co-maintainers of your package (which, in a way, they are).  Please be "
"tolerant of succinct or even unclear bug reports; do your best to hunt down "
"whatever the problem is."
7048
"By far, most of the problems encountered by porters are caused by "
"<emphasis>packaging bugs</emphasis> in the source packages.  Here is a "
"checklist of things you should check or be aware of."
7056
"Make sure that your <literal>Build-Depends</literal> and "
"<literal>Build-Depends-Indep</literal> settings in "
"<filename>debian/control</filename> are set properly.  The best way to "
"validate this is to use the <systemitem "
"role=\"package\">debootstrap</systemitem> package to create an "
"<literal>unstable</literal> chroot environment (see <xref "
"linkend=\"debootstrap\"/>).  Within that chrooted environment, install the "
"<systemitem role=\"package\">build-essential</systemitem> package and any "
"package dependencies mentioned in <literal>Build-Depends</literal> and/or "
"<literal>Build-Depends-Indep</literal>.  Finally, try building your package "
"within that chrooted environment.  These steps can be automated by the use "
"of the <command>pbuilder</command> program which is provided by the package "
"of the same name (see <xref linkend=\"pbuilder\"/>)."
7074
"If you can't set up a proper chroot, <command>dpkg-depcheck</command> may be ""of assistance (see <xref linkend=\"dpkg-depcheck\"/>)."
7082
"See the <ulink url=\"&url-debian-policy;\">Debian Policy Manual</ulink> for "
"instructions on setting build dependencies."
7089
"Don't set architecture to a value other than <literal>all</literal> or "
"<literal>any</literal> unless you really mean it.  In too many cases, "
"maintainers don't follow the instructions in the <ulink "
"url=\"&url-debian-policy;\">Debian Policy Manual</ulink>.  Setting your "
"architecture to only one architecture (such as <literal>i386</literal> or "
"<literal>amd64</literal>) is usually incorrect."
7100
"Make sure your source package is correct.  Do <literal>dpkg-source -x "
"<replaceable>package</replaceable>.dsc</literal> to make sure your source "
"package unpacks properly.  Then, in there, try building your package from "
"scratch with <command>dpkg-buildpackage</command>."
7109
"Make sure you don't ship your source package with the "
"<filename>debian/files</filename> or <filename>debian/substvars</filename> "
"files.  They should be removed by the <literal>clean</literal> target of "
"<filename>debian/rules</filename>."
7118
"Make sure you don't rely on locally installed or hacked configurations or "
"programs.  For instance, you should never be calling programs in "
"<filename>/usr/local/bin</filename> or the like.  Try not to rely on "
"programs being setup in a special way.  Try building your package on another ""machine, even if it's the same architecture."
7129
"Don't depend on the package you're building being installed already (a "
"sub-case of the above issue). There are, of course, exceptions to this rule, ""but be aware that any case like this needs manual bootstrapping and cannot "
"be done by automated package builders."
7139
"Don't rely on the compiler being a certain version, if possible.  If not, "
"then make sure your build dependencies reflect the restrictions, although "
"you are probably asking for trouble, since different architectures sometimes ""standardize on different compilers."
7149
"Make sure your <filename>debian/rules</filename> contains separate "
"<literal>binary-arch</literal> and <literal>binary-indep</literal> targets, "
"as the Debian Policy Manual requires.  Make sure that both targets work "
"independently, that is, that you can call the target without having called "
"the other before.  To test this, try to run <command>dpkg-buildpackage "
"-B</command>."
7160
"Guidelines for porter uploads"
7165
"If the package builds out of the box for the architecture to be ported to, "
"you are in luck and your job is easy.  This section applies to that case; it ""describes how to build and upload your binary package so that it is properly ""installed into the archive.  If you do have to patch the package in order to ""get it to compile for the other architecture, you are actually doing a "
"source NMU, so consult <xref linkend=\"nmu-guidelines\"/> instead."
7179
"For a porter upload, no changes are being made to the source.  You do not "
"need to touch any of the files in the source package.  This includes "
"<filename>debian/changelog</filename>."
7187
"The way to invoke <command>dpkg-buildpackage</command> is as "
"<literal>dpkg-buildpackage -B "
"-m<replaceable>porter-email</replaceable></literal>.  Of course, set "
"<replaceable>porter-email</replaceable> to your email address.  This will do ""a binary-only build of only the architecture-dependent portions of the "
"package, using the <literal>binary-arch</literal> target in "
"<filename>debian/rules</filename>."
7200
"If you are working on a Debian machine for your porting efforts and you need ""to sign your upload locally for its acceptance in the archive, you can run "
"<command>debsign</command> on your <filename>.changes</filename> file to "
"have it signed conveniently, or use the remote signing mode of "
"<command>dpkg-sig</command>."
7211
"Recompilation or binary-only NMU"
7216
"Sometimes the initial porter upload is problematic because the environment "
"in which the package was built was not good enough (outdated or obsolete "
"library, bad compiler, etc.).  Then you may just need to recompile it in an "
"updated environment.  However, you have to bump the version number in this "
"case, so that the old bad package can be replaced in the Debian archive "
"(<command>dak</command> refuses to install new packages if they don't have a ""version number greater than the currently available one)."
7229
"You have to make sure that your binary-only NMU doesn't render the package "
"uninstallable.  This could happen when a source package generates "
"arch-dependent and arch-independent packages that have inter-dependencies "
"generated using dpkg's substitution variable "
"<literal>$(Source-Version)</literal>."
7239
"Despite the required modification of the changelog, these are called "
"binary-only NMUs — there is no need in this case to trigger all other "
"architectures to consider themselves out of date or requiring recompilation."
7247
"Such recompilations require special ``magic'' version numbering, so that the ""archive maintenance tools recognize that, even though there is a new Debian "
"version, there is no corresponding source update.  If you get this wrong, "
"the archive maintainers will reject your upload (due to lack of "
"corresponding source code)."
7259
"In the past, such NMUs used the third-level number on the Debian part of the ""revision to denote their recompilation-only status; however, this syntax was ""ambiguous with native packages and did not allow proper ordering of "
"recompile-only NMUs, source NMUs, and security NMUs on the same package, and ""has therefore been abandoned in favor of this new syntax."
7272
"The ``magic'' for a recompilation-only NMU is triggered by using a suffix "
"appended to the package version number, following the form "
"<literal>b<replaceable>number</replaceable></literal>.  For instance, if the ""latest version you are recompiling against was version "
"<literal>2.9-3</literal>, your binary-only NMU should carry a version of "
"<literal>2.9-3+b1</literal>.  If the latest version was "
"<literal>3.4+b1</literal> (i.e, a native package with a previous "
"recompilation NMU), your binary-only NMU should have a version number of "
"<literal>3.4+b2</literal>.<placeholder type=\"footnote\" id=\"0\"/>"
7287
"Similar to initial porter uploads, the correct way of invoking "
"<command>dpkg-buildpackage</command> is <literal>dpkg-buildpackage "
"-B</literal> to only build the architecture-dependent parts of the package."
7295
"When to do a source NMU if you are a porter"
7300
"Porters doing a source NMU generally follow the guidelines found in <xref "
"linkend=\"nmu\"/>, just like non-porters.  However, it is expected that the "
"wait cycle for a porter's source NMU is smaller than for a non-porter, since ""porters have to cope with a large quantity of packages.  Again, the "
"situation varies depending on the distribution they are uploading to.  It "
"also varies whether the architecture is a candidate for inclusion into the "
"next stable release; the release managers decide and announce which "
"architectures are candidates."
7314
"If you are a porter doing an NMU for <literal>unstable</literal>, the above "
"guidelines for porting should be followed, with two variations.  Firstly, "
"the acceptable waiting period — the time between when the bug is submitted ""to the BTS and when it is OK to do an NMU — is seven days for porters "
"working on the <literal>unstable</literal> distribution.  This period can be ""shortened if the problem is critical and imposes hardship on the porting "
"effort, at the discretion of the porter group.  (Remember, none of this is "
"Policy, just mutually agreed upon guidelines.) For uploads to "
"<literal>stable</literal> or <literal>testing</literal>, please coordinate "
"with the appropriate release team first."
7331
"Secondly, porters doing source NMUs should make sure that the bug they "
"submit to the BTS should be of severity <literal>serious</literal> or "
"greater.  This ensures that a single source package can be used to compile "
"every supported Debian architecture by release time.  It is very important "
"that we have one version of the binary and source package for all "
"architectures in order to comply with many licenses."
7342
"Porters should try to avoid patches which simply kludge around bugs in the "
"current version of the compile environment, kernel, or libc.  Sometimes such ""kludges can't be helped.  If you have to kludge around compiler bugs and the ""like, make sure you <literal>#ifdef</literal> your work properly; also, "
"document your kludge so that people know to remove it once the external "
"problems have been fixed."
7355
"Porters may also have an unofficial location where they can put the results "
"of their work during the waiting period.  This helps others running the port ""have the benefit of the porter's work, even during the waiting period.  Of "
"course, such locations have no official blessing or status, so buyer beware."
7365
"Porting infrastructure and automation"
7370
"There is infrastructure and several tools to help automate package porting.  ""This section contains a brief overview of this automation and porting to "
"these tools; see the package documentation or references for full "
"information."
7380
"Mailing lists and web pages"
7385
"Web pages containing the status of each port can be found at <ulink "
"url=\"&url-debian-ports;\"></ulink>."
7392
"Each port of Debian has a mailing list.  The list of porting mailing lists "
"can be found at <ulink url=\"&url-debian-port-lists;\"></ulink>.  These "
"lists are used to coordinate porters, and to connect the users of a given "
"port with the porters."
7401
"Porter tools"
7406
"Descriptions of several porting tools can be found in <xref "
"linkend=\"tools-porting\"/>."
7413
"<systemitem role=\"package\">wanna-build</systemitem>"
7418
"The <systemitem role=\"package\">wanna-build</systemitem> system is used as "
"a distributed, client-server build distribution system.  It is usually used "
"in conjunction with build daemons running the <systemitem "
"role=\"package\">buildd</systemitem> program. <literal>Build "
"daemons</literal> are ``slave'' hosts which contact the central <systemitem "
"role=\"package\">wanna-build</systemitem> system to receive a list of "
"packages that need to be built."
7430
"<systemitem role=\"package\">wanna-build</systemitem> is not yet available "
"as a package; however, all Debian porting efforts are using it for automated ""package building.  The tool used to do the actual package builds, "
"<systemitem role=\"package\">sbuild</systemitem> is available as a package, "
"see its description in <xref linkend=\"sbuild\"/>.  Please note that the "
"packaged version is not the same as the one used on build daemons, but it is ""close enough to reproduce problems."
7444
"Most of the data produced by <systemitem "
"role=\"package\">wanna-build</systemitem> which is generally useful to "
"porters is available on the web at <ulink url=\"&url-buildd;\"></ulink>.  "
"This data includes nightly updated statistics, queueing information and logs ""for build attempts."
7455
"We are quite proud of this system, since it has so many possible uses.  "
"Independent development groups can use the system for different sub-flavors "
"of Debian, which may or may not really be of general interest (for instance, ""a flavor of Debian built with <command>gcc</command> bounds checking).  It "
"will also enable Debian to recompile entire distributions quickly."
7466
"The wanna-build team, in charge of the buildds, can be reached at "
"<literal>debian-wb-team@lists.debian.org</literal>.  To determine who "
"(wanna-build team, release team) and how (mail, BTS)  to contact, refer to "
"<ulink url=\"&url-wb-team;\"></ulink>."
7475
"When requesting binNMUs or give-backs (retries after a failed build), please ""use the format described at <ulink url=\"&url-release-wb;\"/>."
7483
"When your package is <emphasis>not</emphasis> portable"
7488
"Some packages still have issues with building and/or working on some of the "
"architectures supported by Debian, and cannot be ported at all, or not "
"within a reasonable amount of time.  An example is a package that is "
"SVGA-specific (only available for <literal>i386</literal> and "
"<literal>amd64</literal>), or uses other hardware-specific features not "
"supported on all architectures."
7499
"In order to prevent broken packages from being uploaded to the archive, and "
"wasting buildd time, you need to do a few things:"
7506
"First, make sure your package <emphasis>does</emphasis> fail to build on "
"architectures that it cannot support.  There are a few ways to achieve "
"this.  The preferred way is to have a small testsuite during build time that ""will test the functionality, and fail if it doesn't work.  This is a good "
"idea anyway, as this will prevent (some) broken uploads on all "
"architectures, and also will allow the package to build as soon as the "
"required functionality is available."
7519
"Additionally, if you believe the list of supported architectures is pretty "
"constant, you should change <literal>any</literal> to a list of supported "
"architectures in <filename>debian/control</filename>.  This way, the build "
"will fail also, and indicate this to a human reader without actually trying."
7528
"In order to prevent autobuilders from needlessly trying to build your "
"package, it must be included in <filename>Packages-arch-specific</filename>, ""a list used by the <command>wanna-build</command> script.  The current "
"version is available as <ulink url=\"&url-buildd-p-a-s;\"/>; please see the "
"top of the file for whom to contact for changes."
7539
"Please note that it is insufficient to only add your package to "
"<filename>Packages-arch-specific</filename> without making it fail to build "
"on unsupported architectures: A porter or any other person trying to build "
"your package might accidently upload it without noticing it doesn't work.  "
"If in the past some binary packages were uploaded on unsupported "
"architectures, request their removal by filing a bug against <systemitem "
"role=\"package\">ftp.debian.org</systemitem>."
7551
"Marking non-free packages as auto-buildable"
7556
"By default packages from the <literal>non-free</literal> section are not "
"built by the autobuilder network (mostly because the license of the packages ""could disapprove).  To enable a package to be build you need to perform the "
"following steps:"
7566
"Check whether it is legally allowed and technically possible to auto-build "
"the package;"
7573
"Add <literal>XS-Autobuild: yes</literal> into the header part of "
"<filename>debian/control</filename>;"
7580
"Send an email to &email-nonfree-release; and explain why the package can "
"legitimately and technically be auto-built."
7587
"Non-Maintainer Uploads (NMUs)"
7592
"Every package has one or more maintainers. Normally, these are the people "
"who work on and upload new versions of the package. In some situations, it "
"is useful that other developers can upload a new version as well, for "
"example if they want to fix a bug in a package they don't maintain, when the ""maintainer needs help to respond to issues.  Such uploads are called "
"<emphasis>Non-Maintainer Uploads (NMU)</emphasis>."
7604
"When and how to do an NMU"
7609
"Before doing an NMU, consider the following questions:"
7614
"Does your NMU really fix bugs? Fixing cosmetic issues or changing the "
"packaging style in NMUs is discouraged."
7621
"Did you give enough time to the maintainer? When was the bug reported to the ""BTS? Being busy for a week or two isn't unusual.  Is the bug so severe that "
"it needs to be fixed right now, or can it wait a few more days?"
7630
"How confident are you about your changes? Please remember the Hippocratic "
"Oath: \"Above all, do no harm.\" It is better to leave a package with an "
"open grave bug than applying a non-functional patch, or one that hides the "
"bug instead of resolving it. If you are not 100% sure of what you did, it "
"might be a good idea to seek advice from others. Remember that if you break "
"something in your NMU, many people will be very unhappy about it."
7641
"Have you clearly expressed your intention to NMU, at least in the BTS? It is ""also a good idea to try to contact the maintainer by other means (private "
"email, IRC)."
7650
"If the maintainer is usually active and responsive, have you tried to "
"contact them? In general it should be considered preferable that maintainers ""take care of an issue themselves and that they are given the chance to "
"review and correct your patch, because they can be expected to be more aware ""of potential issues which an NMUer might miss. It is often a better use of "
"everyone's time if the maintainer is given an opportunity to upload a fix on ""their own."
7665
"When doing an NMU, you must first make sure that your intention to NMU is "
"clear.  Then, you must send a patch with the differences between the current ""package and your proposed NMU to the BTS. The <command>nmudiff</command> "
"script in the <systemitem role=\"package\">devscripts</systemitem> package "
"might be helpful."
7676
"While preparing the patch, you should better be aware of any "
"package-specific practices that the maintainer might be using. Taking them "
"into account reduces the burden of integrating your changes into the normal "
"package workflow and thus increases the chances that integration will "
"happen. A good place where to look for for possible package-specific "
"practices is <ulink "
"url=\"&url-debian-policy;ch-source.html#s-readmesource\"><filename>debian/README.source</filename></ulink>."
7689
"Unless you have an excellent reason not to do so, you must then give some "
"time to the maintainer to react (for example, by uploading to the "
"<literal>DELAYED</literal> queue).  Here are some recommended values to use "
"for delays:"
7698
"Upload fixing only release-critical bugs older than 7 days, with no "
"maintainer activity on the bug for 7 days and no indication that a fix is in ""progress: 0 days"
7707
"Upload fixing only release-critical bugs older than 7 days: 2 days"
7712
"Upload fixing only release-critical and important bugs: 5 days"
7717
"Other NMUs: 10 days"
7722
"Those delays are only examples. In some cases, such as uploads fixing "
"security issues, or fixes for trivial bugs that blocking a transition, it is ""desirable that the fixed package reaches <literal>unstable</literal> sooner."
7731
"Sometimes, release managers decide to allow NMUs with shorter delays for a "
"subset of bugs (e.g release-critical bugs older than 7 days). Also, some "
"maintainers list themselves in the <ulink "
"url=\"&url-low-threshold-nmu;\">Low Threshold NMU list</ulink>, and accept "
"that NMUs are uploaded without delay. But even in those cases, it's still a "
"good idea to give the maintainer a few days to react before you upload, "
"especially if the patch wasn't available in the BTS before, or if you know "
"that the maintainer is generally active."
7744
"After you upload an NMU, you are responsible for the possible problems that "
"you might have introduced. You must keep an eye on the package (subscribing "
"to the package on the PTS is a good way to achieve this)."
7752
"This is not a license to perform NMUs thoughtlessly.  If you NMU when it is "
"clear that the maintainers are active and would have acknowledged a patch in ""a timely manner, or if you ignore the recommendations of this document, your ""upload might be a cause of conflict with the maintainer.  You should always "
"be prepared to defend the wisdom of any NMU you perform on its own merits."
7764
"NMUs and <filename>debian/changelog</filename>"
7769
"Just like any other (source) upload, NMUs must add an entry to "
"<filename>debian/changelog</filename>, telling what has changed with this "
"upload.  The first line of this entry must explicitely mention that this "
"upload is an NMU, e.g.:"
7778
"  * Non-maintainer upload.\n"
7784
"The way to version NMUs differs for native and non-native packages."
7789
"If the package is a native package (without a Debian revision in the version ""number), the version must be the version of the last maintainer upload, plus ""<literal>+nmu<replaceable>X</replaceable></literal>, where "
"<replaceable>X</replaceable> is a counter starting at <literal>1</literal>.  ""If the last upload was also an NMU, the counter should be increased.  For "
"example, if the current version is <literal>1.5</literal>, then an NMU would ""get version <literal>1.5+nmu1</literal>."
7805
"If the package is not a native package, you should add a minor version "
"number to the Debian revision part of the version number (the portion after "
"the last hyphen). This extra number must start at <literal>1</literal>.  For ""example, if the current version is <literal>1.5-2</literal>, then an NMU "
"would get version <literal>1.5-2.1</literal>. If a new upstream version is "
"packaged in the NMU, the Debian revision is set to <literal>0</literal>, for ""example <literal>1.6-0.1</literal>."
7819
"In both cases, if the last upload was also an NMU, the counter should be "
"increased. For example, if the current version is "
"<literal>1.5+nmu3</literal> (a native package which has already been NMUed), ""the NMU would get version <literal>1.5+nmu4</literal>."
7829
"A special versioning scheme is needed to avoid disrupting the maintainer's "
"work, since using an integer for the Debian revision will potentially "
"conflict with a maintainer upload already in preparation at the time of an "
"NMU, or even one sitting in the ftp NEW queue.  It also has the benefit of "
"making it visually clear that a package in the archive was not made by the "
"official maintainer."
7840
"If you upload a package to testing or stable, you sometimes need to \"fork\" ""the version number tree. This is the case for security uploads, for "
"example.  For this, a version of the form "
"<literal>+deb<replaceable>X</replaceable>u<replaceable>Y</replaceable></literal> "
"should be used, where <replaceable>X</replaceable> is the major release "
"number, and <replaceable>Y</replaceable> is a counter starting at "
"<literal>1</literal>.  For example, while Wheezy (Debian 7.0) is stable, a "
"security NMU to stable for a package at version <literal>1.5-3</literal> "
"would have version <literal>1.5-3+deb7u1</literal>, whereas a security NMU "
"to Jessie would get version <literal>1.5-3+deb8u1</literal>."
7857
"Using the <literal>DELAYED/</literal> queue"
7862
"Having to wait for a response after you request permission to NMU is "
"inefficient, because it costs the NMUer a context switch to come back to the ""issue.  The <literal>DELAYED</literal> queue (see <xref "
"linkend=\"delayed-incoming\"/>)  allows the developer doing the NMU to "
"perform all the necessary tasks at the same time. For instance, instead of "
"telling the maintainer that you will upload the updated package in 7 days, "
"you should upload the package to <literal>DELAYED/7</literal> and tell the "
"maintainer that they have 7 days to react.  During this time, the maintainer ""can ask you to delay the upload some more, or cancel your upload."
7878
"The <literal>DELAYED</literal> queue should not be used to put additional "
"pressure on the maintainer. In particular, it's important that you are "
"available to cancel or delay the upload before the delay expires since the "
"maintainer cannot cancel the upload themselves."
7887
"If you make an NMU to <literal>DELAYED</literal> and the maintainer updates "
"the package before the delay expires, your upload will be rejected because a ""newer version is already available in the archive.  Ideally, the maintainer "
"will take care to include your proposed changes (or at least a solution for "
"the problems they address) in that upload."
7898
"NMUs from the maintainer's point of view"
7903
"When someone NMUs your package, this means they want to help you to keep it "
"in good shape.  This gives users fixed packages faster.  You can consider "
"asking the NMUer to become a co-maintainer of the package.  Receiving an NMU ""on a package is not a bad thing; it just means that the package is "
"interesting enough for other people to work on it."
7914
"To acknowledge an NMU, include its changes and changelog entry in your next "
"maintainer upload.  If you do not acknowledge the NMU by including the NMU "
"changelog entry in your changelog, the bugs will remain closed in the BTS "
"but will be listed as affecting your maintainer version of the package."
7923
"Source NMUs vs Binary-only NMUs (binNMUs)"
7928
"The full name of an NMU is <emphasis>source NMU</emphasis>.  There is also "
"another type, namely the <emphasis>binary-only NMU</emphasis>, or "
"<emphasis>binNMU</emphasis>.  A binNMU is also a package upload by someone "
"other than the package's maintainer.  However, it is a binary-only upload."
7937
"When a library (or other dependency) is updated, the packages using it may "
"need to be rebuilt.  Since no changes to the source are needed, the same "
"source package is used."
7945
"BinNMUs are usually triggered on the buildds by wanna-build.  An entry is "
"added to <filename>debian/changelog</filename>, explaining why the upload "
"was needed and increasing the version number as described in <xref "
"linkend=\"binary-only-nmu\"/>.  This entry should not be included in the "
"next upload."
7955
"Buildds upload packages for their architecture to the archive as binary-only ""uploads.  Strictly speaking, these are binNMUs.  However, they are not "
"normally called NMU, and they don't add an entry to "
"<filename>debian/changelog</filename>."
7965
"NMUs vs QA uploads"
7970
"NMUs are uploads of packages by somebody else than their assigned "
"maintainer.  There is another type of upload where the uploaded package is "
"not yours: QA uploads. QA uploads are uploads of orphaned packages."
7978
"QA uploads are very much like normal maintainer uploads: they may fix "
"anything, even minor issues; the version numbering is normal, and there is "
"no need to use a delayed upload.  The difference is that you are not listed "
"as the <literal>Maintainer</literal> or <literal>Uploader</literal> for the "
"package.  Also, the changelog entry of a QA upload has a special first line:"
7988
" * QA upload.\n"
7994
"If you want to do an NMU, and it seems that the maintainer is not active, it ""is wise to check if the package is orphaned (this information is displayed "
"on the package's Package Tracking System page).  When doing the first QA "
"upload to an orphaned package, the maintainer should be set to "
"<literal>Debian QA Group &lt;packages@qa.debian.org&gt;</literal>.  Orphaned ""packages which did not yet have a QA upload still have their old maintainer "
"set.  There is a list of them at <ulink url=\"&url-orphaned-not-qa;\"/>."
8008
"Instead of doing a QA upload, you can also consider adopting the package by "
"making yourself the maintainer.  You don't need permission from anybody to "
"adopt an orphaned package, you can just set yourself as maintainer and "
"upload the new version (see <xref linkend=\"adopting\"/>)."
8017
"NMUs vs team uploads"
8022
"Sometimes you are fixing and/or updating a package because you are member of ""a packaging team (which uses a mailing list as <literal>Maintainer</literal> ""or <literal>Uploader</literal>, see <xref linkend=\"collaborative-maint\"/>) ""but you don't want to add yourself to <literal>Uploaders</literal> because "
"you do not plan to contribute regularly to this specific package. If it "
"conforms with your team's policy, you can perform a normal upload without "
"being listed directly as <literal>Maintainer</literal> or "
"<literal>Uploader</literal>. In that case, you should start your changelog "
"entry with the following line:"
8039
" * Team upload.\n"
8045
"Collaborative maintenance"
8050
"Collaborative maintenance is a term describing the sharing of Debian package ""maintenance duties by several people.  This collaboration is almost always a ""good idea, since it generally results in higher quality and faster bug fix "
"turnaround times.  It is strongly recommended that packages with a priority "
"of <literal>standard</literal> or which are part of the base set have "
"co-maintainers."
8063
"Generally there is a primary maintainer and one or more co-maintainers.  The ""primary maintainer is the person whose name is listed in the "
"<literal>Maintainer</literal> field of the "
"<filename>debian/control</filename> file.  Co-maintainers are all the other "
"maintainers, usually listed in the <literal>Uploaders</literal> field of the ""<filename>debian/control</filename> file."
8076
"In its most basic form, the process of adding a new co-maintainer is quite "
"easy:"
8083
"Setup the co-maintainer with access to the sources you build the package "
"from.  Generally this implies you are using a network-capable version "
"control system, such as <literal>CVS</literal> or "
"<literal>Subversion</literal>.  Alioth (see <xref linkend=\"alioth\"/>) "
"provides such tools, amongst others."
8093
"Add the co-maintainer's correct maintainer name and address to the "
"<literal>Uploaders</literal> field in the first paragraph of the "
"<filename>debian/control</filename> file."
8101
"Uploaders: John Buzz &lt;jbuzz@debian.org&gt;, Adam Rex "
"&lt;arex@debian.org&gt;\n"
8109
"Using the PTS (<xref linkend=\"pkg-tracking-system\"/>), the co-maintainers "
"should subscribe themselves to the appropriate source package."
8116
"Another form of collaborative maintenance is team maintenance, which is "
"recommended if you maintain several packages with the same group of "
"developers.  In that case, the <literal>Maintainer</literal> and "
"<literal>Uploaders</literal> field of each package must be managed with "
"care.  It is recommended to choose between one of the two following schemes:"
8126
"Put the team member mainly responsible for the package in the "
"<literal>Maintainer</literal> field.  In the <literal>Uploaders</literal>, "
"put the mailing list address, and the team members who care for the package."
8134
"Put the mailing list address in the <literal>Maintainer</literal> field.  In ""the <literal>Uploaders</literal> field, put the team members who care for "
"the package.  In this case, you must make sure the mailing list accept bug "
"reports without any human interaction (like moderation for non-subscribers)."
8144
"In any case, it is a bad idea to automatically put all team members in the "
"<literal>Uploaders</literal> field. It clutters the Developer's Package "
"Overview listing (see <xref linkend=\"ddpo\"/>) with packages one doesn't "
"really care for, and creates a false sense of good maintenance. For the same ""reason, team members do not need to add themselves to the "
"<literal>Uploaders</literal> field just because they are uploading the "
"package once, they can do a “Team upload” (see <xref "
"linkend=\"nmu-team-upload\"/>). Conversely, it is a bad idea to keep a "
"package with only the mailing list address as a "
"<literal>Maintainer</literal> and no <literal>Uploaders</literal>."
8160
"The testing distribution"
8165
"Basics"
8170
"Packages are usually installed into the <literal>testing</literal> "
"distribution after they have undergone some degree of "
"<literal>testing</literal> in <literal>unstable</literal>."
8178
"They must be in sync on all architectures and mustn't have dependencies that ""make them uninstallable; they also have to have generally no known "
"release-critical bugs at the time they're installed into "
"<literal>testing</literal>.  This way, <literal>testing</literal> should "
"always be close to being a release candidate.  Please see below for details."
8189
"Updates from unstable"
8194
"The scripts that update the <literal>testing</literal> distribution are run "
"twice each day, right after the installation of the updated packages; these "
"scripts are called <literal>britney</literal>.  They generate the "
"<filename>Packages</filename> files for the <literal>testing</literal> "
"distribution, but they do so in an intelligent manner; they try to avoid any ""inconsistency and to use only non-buggy packages."
8206
"The inclusion of a package from <literal>unstable</literal> is conditional "
"on the following:"
8213
"The package must have been available in <literal>unstable</literal> for 2, 5 ""or 10 days, depending on the urgency (high, medium or low).  Please note "
"that the urgency is sticky, meaning that the highest urgency uploaded since "
"the previous <literal>testing</literal> transition is taken into account;"
8223
"It must not have new release-critical bugs (RC bugs affecting the version "
"available in <literal>unstable</literal>, but not affecting the version in "
"<literal>testing</literal>);"
8231
"It must be available on all architectures on which it has previously been "
"built in <literal>unstable</literal>. <link linkend=\"dak-ls\">dak ls</link> ""may be of interest to check that information;"
8240
"It must not break any dependency of a package which is already available in "
"<literal>testing</literal>;"
8247
"The packages on which it depends must either be available in "
"<literal>testing</literal> or they must be accepted into "
"<literal>testing</literal> at the same time (and they will be if they "
"fulfill all the necessary criteria);"
8256
"The phase of the project.  I.e. automatic transitions are turned off during "
"the <emphasis>freeze</emphasis> of the <literal>testing</literal> "
"distribution."
8264
"To find out whether a package is progressing into <literal>testing</literal> ""or not, see the <literal>testing</literal> script output on the <ulink "
"url=\"&url-testing-maint;\">web page of the testing distribution</ulink>, or ""use the program <command>grep-excuses</command> which is in the <systemitem "
"role=\"package\">devscripts</systemitem> package.  This utility can easily "
"be used in a <citerefentry> <refentrytitle>crontab</refentrytitle> "
"<manvolnum>5</manvolnum> </citerefentry> to keep yourself informed of the "
"progression of your packages into <literal>testing</literal>."
8279
"The <filename>update_excuses</filename> file does not always give the "
"precise reason why the package is refused; you may have to find it on your "
"own by looking for what would break with the inclusion of the package.  The "
"<ulink url=\"&url-testing-maint;\">testing web page</ulink> gives some more "
"information about the usual problems which may be causing such troubles."
8289
"Sometimes, some packages never enter <literal>testing</literal> because the "
"set of interrelationship is too complicated and cannot be sorted out by the "
"scripts.  See below for details."
8297
"Some further dependency analysis is shown on <ulink "
"url=\"http://release.debian.org/migration/\"></ulink> — but be warned, this "
"page also shows build dependencies which are not considered by britney."
8306
"Out-of-date"
8312
"For the <literal>testing</literal> migration script, outdated means: There "
"are different versions in <literal>unstable</literal> for the release "
"architectures (except for the architectures in fuckedarches; fuckedarches is ""a list of architectures that don't keep up (in "
"<filename>update_out.py</filename>), but currently, it's empty).  outdated "
"has nothing whatsoever to do with the architectures this package has in "
"<literal>testing</literal>."
8325
"Consider this example:"
8331
"alpha"
8337
"arm"
8343
"testing"
8349
"1"
8355
"-"
8361
"unstable"
8367
"2"
8372
"The package is out of date on <literal>alpha</literal> in "
"<literal>unstable</literal>, and will not go to "
"<literal>testing</literal>. Removing the package would not help at all, the "
"package is still out of date on <literal>alpha</literal>, and will not "
"propagate to <literal>testing</literal>."
8382
"However, if ftp-master removes a package in <literal>unstable</literal> "
"(here on <literal>arm</literal>):"
8390
"hurd-i386"
8395
"In this case, the package is up to date on all release architectures in "
"<literal>unstable</literal> (and the extra <literal>hurd-i386</literal> "
"doesn't matter, as it's not a release architecture)."
8403
"Sometimes, the question is raised if it is possible to allow packages in "
"that are not yet built on all architectures: No.  Just plainly no.  (Except "
"if you maintain glibc or so.)"
8411
"Removals from testing"
8416
"Sometimes, a package is removed to allow another package in: This happens "
"only to allow <emphasis>another</emphasis> package to go in if it's ready in ""every other sense.  Suppose e.g.  that <literal>a</literal> cannot be "
"installed with the new version of <literal>b</literal>; then "
"<literal>a</literal> may be removed to allow <literal>b</literal> in."
8427
"Of course, there is another reason to remove a package from "
"<literal>testing</literal>: It's just too buggy (and having a single RC-bug "
"is enough to be in this state)."
8435
"Furthermore, if a package has been removed from <literal>unstable</literal>, ""and no package in <literal>testing</literal> depends on it any more, then it ""will automatically be removed."
8445
"Circular dependencies"
8450
"A situation which is not handled very well by britney is if package "
"<literal>a</literal> depends on the new version of package "
"<literal>b</literal>, and vice versa."
8458
"An example of this is:"
8464
"a"
8470
"1; depends: b=1"
8476
"2; depends: b=2"
8482
"b"
8488
"1; depends: a=1"
8494
"2; depends: a=2"
8499
"Neither package <literal>a</literal> nor package <literal>b</literal> is "
"considered for update."
8506
"Currently, this requires some manual hinting from the release team.  Please "
"contact them by sending mail to &email-debian-release; if this happens to "
"one of your packages."
8514
"Influence of package in testing"
8519
"Generally, there is nothing that the status of a package in "
"<literal>testing</literal> means for transition of the next version from "
"<literal>unstable</literal> to <literal>testing</literal>, with two "
"exceptions: If the RC-bugginess of the package goes down, it may go in even "
"if it is still RC-buggy.  The second exception is if the version of the "
"package in <literal>testing</literal> is out of sync on the different "
"arches: Then any arch might just upgrade to the version of the source "
"package; however, this can happen only if the package was previously forced "
"through, the arch is in fuckedarches, or there was no binary package of that ""arch present in <literal>unstable</literal> at all during the "
"<literal>testing</literal> migration."
8536
"In summary this means: The only influence that a package being in "
"<literal>testing</literal> has on a new version of the same package is that "
"the new version might go in easier."
8544
"Details"
8549
"If you are interested in details, this is how britney works:"
8554
"The packages are looked at to determine whether they are valid candidates.  "
"This gives the update excuses.  The most common reasons why a package is not ""considered are too young, RC-bugginess, and out of date on some arches.  For ""this part of britney, the release managers have hammers of various sizes, "
"called hints (see below), to force britney to consider a package."
8566
"Now, the more complex part happens: Britney tries to update "
"<literal>testing</literal> with the valid candidates. For that, britney "
"tries to add each valid candidate to the testing distribution. If the number ""of uninstallable packages in <literal>testing</literal> doesn't increase, "
"the package is accepted. From that point on, the accepted package is "
"considered to be part of <literal>testing</literal>, such that all "
"subsequent installability tests include this package.  Hints from the "
"release team are processed before or after this main run, depending on the "
"exact type."
8581
"If you want to see more details, you can look it up on <ulink "
"url=\"http://&ftp-master-host;/testing/update_output/\"></ulink>."
8588
"The hints are available via <ulink "
"url=\"http://&ftp-master-host;/testing/hints/\"></ulink>, where you can find ""the <ulink "
"url=\"http://&ftp-master-host;/testing/hints/README\">description</ulink> as ""well.  With the hints, the Debian Release team can block or unblock "
"packages, ease or force packages into <literal>testing</literal>, remove "
"packages from <literal>testing</literal>, approve uploads to <link "
"linkend=\"t-p-u\">testing-proposed-updates</link> or override the urgency."
8603
"Direct updates to testing"
8608
"The <literal>testing</literal> distribution is fed with packages from "
"<literal>unstable</literal> according to the rules explained above.  "
"However, in some cases, it is necessary to upload packages built only for "
"<literal>testing</literal>.  For that, you may want to upload to "
"<literal>testing-proposed-updates</literal>."
8618
"Keep in mind that packages uploaded there are not automatically processed, "
"they have to go through the hands of the release manager.  So you'd better "
"have a good reason to upload there.  In order to know what a good reason is "
"in the release managers' eyes, you should read the instructions that they "
"regularly give on &email-debian-devel-announce;."
8628
"You should not upload to <literal>testing-proposed-updates</literal> when "
"you can update your packages through <literal>unstable</literal>.  If you "
"can't (for example because you have a newer development version in "
"<literal>unstable</literal>), you may use this facility, but it is "
"recommended that you ask for authorization from the release manager first.  "
"Even if a package is frozen, updates through <literal>unstable</literal> are ""possible, if the upload via <literal>unstable</literal> does not pull in any ""new dependencies."
8643
"Version numbers are usually selected by adding the codename of the "
"<literal>testing</literal> distribution and a running number, like "
"<literal>1.2squeeze1</literal> for the first upload through "
"<literal>testing-proposed-updates</literal> of package version "
"<literal>1.2</literal>."
8653
"Please make sure you didn't miss any of these items in your upload:"
8658
"Make sure that your package really needs to go through "
"<literal>testing-proposed-updates</literal>, and can't go through "
"<literal>unstable</literal>;"
8666
"Make sure that you included only the minimal amount of changes;"
8671
"Make sure that you included an appropriate explanation in the changelog;"
8677
"Make sure that you've written <literal>testing</literal> or "
"<literal>testing-proposed-updates</literal> into your target distribution;"
8684
"Make sure that you've built and tested your package in "
"<literal>testing</literal>, not in <literal>unstable</literal>;"
8691
"Make sure that your version number is higher than the version in "
"<literal>testing</literal> and <literal>testing-proposed-updates</literal>, "
"and lower than in <literal>unstable</literal>;"
8699
"After uploading and successful build on all platforms, contact the release "
"team at &email-debian-release; and ask them to approve your upload."
8706
"Frequently asked questions"
8711
"What are release-critical bugs, and how do they get counted?"
8716
"All bugs of some higher severities are by default considered "
"release-critical; currently, these are <literal>critical</literal>, "
"<literal>grave</literal> and <literal>serious</literal> bugs."
8724
"Such bugs are presumed to have an impact on the chances that the package "
"will be released with the <literal>stable</literal> release of Debian: in "
"general, if a package has open release-critical bugs filed on it, it won't "
"get into <literal>testing</literal>, and consequently won't be released in "
"<literal>stable</literal>."
8734
"The <literal>unstable</literal> bug count are all release-critical bugs "
"which are marked to apply to "
"<replaceable>package</replaceable>/<replaceable>version</replaceable> "
"combinations that are available in unstable for a release architecture. The "
"<literal>testing</literal> bug count is defined analogously."
8744
"How could installing a package into <literal>testing</literal> possibly "
"break other packages?"
8751
"The structure of the distribution archives is such that they can only "
"contain one version of a package; a package is defined by its name.  So when ""the source package <literal>acmefoo</literal> is installed into "
"<literal>testing</literal>, along with its binary packages "
"<literal>acme-foo-bin</literal>, <literal>acme-bar-bin</literal>, "
"<literal>libacme-foo1</literal> and <literal>libacme-foo-dev</literal>, the "
"old version is removed."
8764
"However, the old version may have provided a binary package with an old "
"soname of a library, such as <literal>libacme-foo0</literal>.  Removing the "
"old <literal>acmefoo</literal> will remove <literal>libacme-foo0</literal>, "
"which will break any packages which depend on it."
8773
"Evidently, this mainly affects packages which provide changing sets of "
"binary packages in different versions (in turn, mainly libraries).  However, ""it will also affect packages upon which versioned dependencies have been "
"declared of the ==, &lt;=, or &lt;&lt; varieties."
8783
"When the set of binary packages provided by a source package change in this "
"way, all the packages that depended on the old binaries will have to be "
"updated to depend on the new binaries instead.  Because installing such a "
"source package into <literal>testing</literal> breaks all the packages that "
"depended on it in <literal>testing</literal>, some care has to be taken now: ""all the depending packages must be updated and ready to be installed "
"themselves so that they won't be broken, and, once everything is ready, "
"manual intervention by the release manager or an assistant is normally "
"required."
8798
"If you are having problems with complicated groups of packages like this, "
"contact &email-debian-devel; or &email-debian-release; for help."
8805
"Resources for Debian Developers"
8810
"In this chapter you will find a very brief road map of the Debian mailing "
"lists, the Debian machines which may be available to you as a developer, and ""all the other resources that are available to help you in your maintainer "
"work."
8820
"Mailing lists"
8825
"Much of the conversation between Debian developers (and users) is managed "
"through a wide array of mailing lists we host at <literal><ulink "
"url=\"http://&lists-host;/\">&lists-host;</ulink></literal>.  To find out "
"more on how to subscribe or unsubscribe, how to post and how not to post, "
"where to find old posts and how to search them, how to contact the list "
"maintainers and see various other information about the mailing lists, "
"please read <ulink url=\"&url-debian-lists;\"></ulink>.  This section will "
"only cover aspects of mailing lists that are of particular interest to "
"developers."
8839
"Basic rules for use"
8844
"When replying to messages on the mailing list, please do not send a carbon "
"copy (<literal>CC</literal>) to the original poster unless they explicitly "
"request to be copied.  Anyone who posts to a mailing list should read it to "
"see the responses."
8853
"Cross-posting (sending the same message to multiple lists) is discouraged.  "
"As ever on the net, please trim down the quoting of articles you're replying ""to.  In general, please adhere to the usual conventions for posting "
"messages."
8863
"Please read the <ulink url=\"&url-debian-lists;#codeofconduct\">code of "
"conduct</ulink> for more information. The <ulink url=\"&url-dcg;\">Debian "
"Community Guidelines</ulink> are also worth reading."
8871
"Core development mailing lists"
8876
"The core Debian mailing lists that developers should use are:"
8881
"&email-debian-devel-announce;, used to announce important things to "
"developers.  All developers are expected to be subscribed to this list."
8888
"&email-debian-devel;, used to discuss various development related technical "
"issues."
8895
"&email-debian-policy;, where the Debian Policy is discussed and voted on."
8901
"&email-debian-project;, used to discuss various non-technical issues related ""to the project."
8909
"There are other mailing lists available for a variety of special topics; see ""<ulink url=\"http://&lists-host;/\"></ulink> for a list."
8917
"Special lists"
8922
"&email-debian-private; is a special mailing list for private discussions "
"amongst Debian developers.  It is meant to be used for posts which for "
"whatever reason should not be published publicly.  As such, it is a low "
"volume list, and users are urged not to use &email-debian-private; unless it ""is really necessary.  Moreover, do <emphasis>not</emphasis> forward email "
"from that list to anyone.  Archives of this list are not available on the "
"web for obvious reasons, but you can see them using your shell account on "
"<literal>&master-host;</literal> and looking in the "
"<filename>&file-debian-private-archive;</filename> directory."
8937
"&email-debian-email; is a special mailing list used as a grab-bag for Debian ""related correspondence such as contacting upstream authors about licenses, "
"bugs, etc.  or discussing the project with others where it might be useful "
"to have the discussion archived somewhere."
8947
"Requesting new development-related lists"
8952
"Before requesting a mailing list that relates to the development of a "
"package (or a small group of related packages), please consider if using an "
"alias (via a .forward-aliasname file on master.debian.org, which translates "
"into a reasonably nice <replaceable>you-aliasname@debian.org</replaceable> "
"address) or a self-managed mailing list on <link "
"linkend=\"alioth\">Alioth</link> is more appropriate."
8963
"If you decide that a regular mailing list on &lists-host; is really what you ""want, go ahead and fill in a request, following <ulink "
"url=\"&url-debian-lists-new;\">the HOWTO</ulink>."
8972
"IRC channels"
8977
"Several IRC channels are dedicated to Debian's development.  They are mainly ""hosted on the <ulink url=\"&url-oftc;\">Open and free technology community "
"(OFTC)</ulink> network.  The <literal>irc.debian.org</literal> DNS entry is "
"an alias to <literal>irc.oftc.net</literal>."
8987
"The main channel for Debian in general is <literal>#debian</literal>.  This "
"is a large, general-purpose channel where users can find recent news in the "
"topic and served by bots.  <literal>#debian</literal> is for English "
"speakers; there are also <literal>#debian.de</literal>, "
"<literal>#debian-fr</literal>, <literal>#debian-br</literal> and other "
"similarly named channels for speakers of other languages."
8998
"The main channel for Debian development is "
"<literal>#debian-devel</literal>.  It is a very active channel; it will "
"typically have a minimum of 150 people at any time of day.  It's a channel "
"for people who work on Debian, it's not a support channel (there's "
"<literal>#debian</literal> for that).  It is however open to anyone who "
"wants to lurk (and learn).  Its topic is commonly full of interesting "
"information for developers."
9010
"Since <literal>#debian-devel</literal> is an open channel, you should not "
"speak there of issues that are discussed in &email-debian-private;.  There's ""another channel for this purpose, it's called "
"<literal>#debian-private</literal> and it's protected by a key.  This key is ""available at "
"<filename>master.debian.org:&file-debian-private-key;</filename>."
9023
"There are other additional channels dedicated to specific subjects.  "
"<literal>#debian-bugs</literal> is used for coordinating bug squashing "
"parties.  <literal>#debian-boot</literal> is used to coordinate the work on "
"the debian-installer.  <literal>#debian-doc</literal> is occasionally used "
"to talk about documentation, like the document you are reading.  Other "
"channels are dedicated to an architecture or a set of packages: "
"<literal>#debian-kde</literal>, <literal>#debian-dpkg</literal>, "
"<literal>#debian-jr</literal>, <literal>#debian-edu</literal>, "
"<literal>#debian-oo</literal> (OpenOffice.org package)..."
9037
"Some non-English developers' channels exist as well, for example "
"<literal>#debian-devel-fr</literal> for French speaking people interested in ""Debian's development."
9046
"Channels dedicated to Debian also exist on other IRC networks, notably on "
"the <ulink url=\"&url-openprojects;\">freenode</ulink> IRC network, which "
"was pointed at by the <literal>irc.debian.org</literal> alias until 4th June ""2006."
9056
"To get a cloak on freenode, you send Jörg Jaspert &lt;joerg@debian.org&gt; a "
"signed mail where you tell what your nick is.  Put cloak somewhere in the "
"Subject: header.  The nick should be registered: <ulink "
"url=\"http://freenode.net/faq.shtml#nicksetup\">Nick Setup Page</ulink>.  "
"The mail needs to be signed by a key in the Debian keyring.  Please see "
"<ulink url=\"http://freenode.net/faq.shtml#projectcloak\">Freenode "
"documentation</ulink> for more information about cloaks."
9069
"This document contains a lot of information which is useful to Debian "
"developers, but it cannot contain everything.  Most of the other interesting ""documents are linked from <ulink url=\"&url-devel-docs;\">The Developers' "
"Corner</ulink>.  Take the time to browse all the links, you will learn many "
"more things."
9080
"Debian machines"
9085
"Debian has several computers working as servers, most of which serve "
"critical functions in the Debian project.  Most of the machines are used for ""porting activities, and they all have a permanent connection to the "
"Internet."
9095
"Some of the machines are available for individual developers to use, as long ""as the developers follow the rules set forth in the <ulink "
"url=\"&url-dmup;\">Debian Machine Usage Policies</ulink>."
9104
"Generally speaking, you can use these machines for Debian-related purposes "
"as you see fit.  Please be kind to system administrators, and do not use up "
"tons and tons of disk space, network bandwidth, or CPU without first getting ""the approval of the system administrators.  Usually these machines are run "
"by volunteers."
9115
"Please take care to protect your Debian passwords and SSH keys installed on "
"Debian machines.  Avoid login or upload methods which send passwords over "
"the Internet in the clear, such as Telnet, FTP, POP etc."
9123
"Please do not put any material that doesn't relate to Debian on the Debian "
"servers, unless you have prior permission."
9130
"The current list of Debian machines is available at <ulink "
"url=\"&url-devel-machines;\"></ulink>.  That web page contains machine "
"names, contact information, information about who can log in, SSH keys etc."
9138
"If you have a problem with the operation of a Debian server, and you think "
"that the system operators need to be notified of this problem, you can check ""the list of open issues in the DSA queue of our request tracker at <ulink "
"url=\"&url-rt;\" /> (you can login with user \"debian\", its password is "
"available at "
"<filename>master.debian.org:&file-debian-rt-password;</filename>).  To "
"report a new problem, simply send a mail to &email-rt-dsa; and make sure to "
"put the string \"Debian RT\" somewhere in the subject."
9152
"If you have a problem with a certain service, not related to the system "
"administration (such as packages to be removed from the archive, suggestions ""for the web site, etc.), generally you'll report a bug against a "
"``pseudo-package''.  See <xref linkend=\"submit-bug\"/> for information on "
"how to submit bugs."
9163
"Some of the core servers are restricted, but the information from there is "
"mirrored to another server."
9170
"The bugs server"
9175
"<literal>&bugs-host;</literal> is the canonical location for the Bug "
"Tracking System (BTS)."
9182
"If you plan on doing some statistical analysis or processing of Debian bugs, ""this would be the place to do it.  Please describe your plans on "
"&email-debian-devel; before implementing anything, however, to reduce "
"unnecessary duplication of effort or wasted processing time."
9192
"The ftp-master server"
9197
"The <literal>&ftp-master-host;</literal> server holds the canonical copy of "
"the Debian archive.  Generally, package uploaded to &ftp-upload-host; end up ""on this server, see <xref linkend=\"upload\"/>."
9206
"It is restricted; a mirror is available on "
"<literal>&ftp-master-mirror;</literal>."
9213
"Problems with the Debian FTP archive generally need to be reported as bugs "
"against the <systemitem role=\"package\">&ftp-debian-org;</systemitem> "
"pseudo-package or an email to &email-ftpmaster;, but also see the procedures ""in <xref linkend=\"archive-manip\"/>."
9223
"The www-master server"
9228
"The main web server is <literal>www-master.debian.org</literal>.  It holds "
"the official web pages, the face of Debian for most newbies."
9235
"If you find a problem with the Debian web server, you should generally "
"submit a bug against the pseudo-package, <systemitem "
"role=\"package\">www.debian.org</systemitem>.  Remember to check whether or "
"not someone else has already reported the problem to the <ulink "
"url=\"http://&bugs-host;/&www-debian-org;\">Bug Tracking System</ulink>."
9245
"The people web server"
9250
"<literal>people.debian.org</literal> is the server used for developers' own "
"web pages about anything related to Debian."
9257
"If you have some Debian-specific information which you want to serve on the "
"web, you can do this by putting material in the "
"<filename>public_html</filename> directory under your home directory on "
"<literal>people.debian.org</literal>.  This will be accessible at the URL "
"<literal>http://people.debian.org/~<replaceable>your-user-id</replaceable>/</literal>."
9268
"You should only use this particular location because it will be backed up, "
"whereas on other hosts it won't."
9275
"Usually the only reason to use a different host is when you need to publish "
"materials subject to the U.S.  export restrictions, in which case you can "
"use one of the other servers located outside the United States."
9283
"Send mail to &email-debian-devel; if you have any questions."
9288
"The VCS servers"
9293
"If you need to use a Version Control System for any of your Debian work, you ""can use one of the existing repositories hosted on Alioth or you can request ""a new project and ask for the VCS repository of your choice.  Alioth "
"supports CVS (cvs.alioth.debian.org/cvs.debian.org), Subversion "
"(svn.debian.org), Arch (tla/baz, both on arch.debian.org), Bazaar "
"(bzr.debian.org), Darcs (darcs.debian.org), Mercurial (hg.debian.org) and "
"Git (git.debian.org).  Checkout <ulink url=\"&url-alioth-pkg;\" /> if you "
"plan to maintain packages in a VCS repository. See <xref "
"linkend=\"alioth\"/> for information on the services provided by Alioth."
9309
"chroots to different distributions"
9314
"On some machines, there are chroots to different distributions available.  "
"You can use them like this:"
9321
"vore$ dchroot unstable\n"
"Executing shell in chroot: /org/vore.debian.org/chroots/user/unstable\n"
9329
"In all chroots, the normal user home directories are available.  You can "
"find out which chroots are available via <ulink "
"url=\"&url-devel-machines;\"></ulink>."
9337
"The Developers Database"
9342
"The Developers Database, at <ulink url=\"&url-debian-db;\"></ulink>, is an "
"LDAP directory for managing Debian developer attributes.  You can use this "
"resource to search the list of Debian developers.  Part of this information "
"is also available through the finger service on Debian servers, try "
"<command>finger yourlogin@db.debian.org</command> to see what it reports."
9352
"Developers can <ulink url=\"&url-debian-db-login;\">log into the "
"database</ulink> to change various information about themselves, such as:"
9359
"forwarding address for your debian.org email"
9364
"subscription to debian-private"
9369
"whether you are on vacation"
9374
"personal information such as your address, country, the latitude and "
"longitude of the place where you live for use in <ulink "
"url=\"&url-worldmap;\">the world map of Debian developers</ulink>, phone and ""fax numbers, IRC nickname and web page"
9384
"password and preferred shell on Debian Project machines"
9389
"Most of the information is not accessible to the public, naturally.  For "
"more information please read the online documentation that you can find at "
"<ulink url=\"&url-debian-db-doc;\"></ulink>."
9397
"Developers can also submit their SSH keys to be used for authorization on "
"the official Debian machines, and even add new *.debian.net DNS entries.  "
"Those features are documented at <ulink "
"url=\"&url-debian-db-mail-gw;\"></ulink>."
9406
"The Debian archive"
9411
"The &debian-formal; distribution consists of a lot of packages (currently "
"around &number-of-pkgs; source packages) and a few additional files (such as ""documentation and installation disk images)."
9420
"Here is an example directory tree of a complete Debian archive:"
9425
"As you can see, the top-level directory contains two directories, "
"<filename>dists/</filename> and <filename>pool/</filename>.  The latter is a ""“pool” in which the packages actually are, and which is handled by the "
"archive maintenance database and the accompanying programs.  The former "
"contains the distributions, <literal>stable</literal>, "
"<literal>testing</literal> and <literal>unstable</literal>.  The "
"<filename>Packages</filename> and <filename>Sources</filename> files in the "
"distribution subdirectories can reference files in the "
"<filename>pool/</filename> directory.  The directory tree below each of the "
"distributions is arranged in an identical manner.  What we describe below "
"for <literal>stable</literal> is equally applicable to the "
"<literal>unstable</literal> and <literal>testing</literal> distributions."
9443
"<filename>dists/stable</filename> contains three directories, namely "
"<filename>main</filename>, <filename>contrib</filename>, and "
"<filename>non-free</filename>."
9451
"In each of the areas, there is a directory for the source packages "
"(<filename>source</filename>) and a directory for each supported "
"architecture (<filename>binary-i386</filename>, "
"<filename>binary-amd64</filename>, etc.)."
9460
"The <filename>main</filename> area contains additional directories which "
"hold the disk images and some essential pieces of documentation required for ""installing the Debian distribution on a specific architecture "
"(<filename>disks-i386</filename>, <filename>disks-amd64</filename>, etc.)."
9470
"Sections"
9475
"The <literal>main</literal> section of the Debian archive is what makes up "
"the <emphasis role=\"strong\">official &debian-formal; "
"distribution</emphasis>.  The <literal>main</literal> section is official "
"because it fully complies with all our guidelines.  The other two sections "
"do not, to different degrees; as such, they are <emphasis "
"role=\"strong\">not</emphasis> officially part of &debian-formal;."
9486
"Every package in the main section must fully comply with the <ulink "
"url=\"&url-dfsg;\">Debian Free Software Guidelines</ulink> (DFSG) and with "
"all other policy requirements as described in the <ulink "
"url=\"&url-debian-policy;\">Debian Policy Manual</ulink>.  The DFSG is our "
"definition of “free software.” Check out the Debian Policy Manual for "
"details."
9497
"Packages in the <literal>contrib</literal> section have to comply with the "
"DFSG, but may fail other requirements.  For instance, they may depend on "
"non-free packages."
9505
"Packages which do not conform to the DFSG are placed in the "
"<literal>non-free</literal> section.  These packages are not considered as "
"part of the Debian distribution, though we enable their use, and we provide "
"infrastructure (such as our bug-tracking system and mailing lists) for "
"non-free software packages."
9515
"The <ulink url=\"&url-debian-policy;\">Debian Policy Manual</ulink> contains ""a more exact definition of the three sections.  The above discussion is just ""an introduction."
9525
"The separation of the three sections at the top-level of the archive is "
"important for all people who want to distribute Debian, either via FTP "
"servers on the Internet or on CD-ROMs: by distributing only the "
"<literal>main</literal> and <literal>contrib</literal> sections, one can "
"avoid any legal risks.  Some packages in the <literal>non-free</literal> "
"section do not allow commercial distribution, for example."
9536
"On the other hand, a CD-ROM vendor could easily check the individual package ""licenses of the packages in <literal>non-free</literal> and include as many "
"on the CD-ROMs as it's allowed to.  (Since this varies greatly from vendor "
"to vendor, this job can't be done by the Debian developers.)"
9546
"Note that the term section is also used to refer to categories which "
"simplify the organization and browsing of available packages, e.g.  "
"<literal>admin</literal>, <literal>net</literal>, <literal>utils</literal> "
"etc.  Once upon a time, these sections (subsections, rather) existed in the "
"form of subdirectories within the Debian archive.  Nowadays, these exist "
"only in the Section header fields of packages."
9557
"Architectures"
9562
"In the first days, the Linux kernel was only available for Intel i386 (or "
"greater) platforms, and so was Debian.  But as Linux became more and more "
"popular, the kernel was ported to other architectures and Debian started to "
"support them. And as if supporting so much hardware was not enough, Debian "
"decided to build some ports based on other Unix kernels, like "
"<literal>hurd</literal> and <literal>kfreebsd</literal>."
9573
"&debian-formal; 1.3 was only available as <literal>i386</literal>.  Debian "
"2.0 shipped for <literal>i386</literal> and <literal>m68k</literal> "
"architectures.  Debian 2.1 shipped for the <literal>i386</literal>, "
"<literal>m68k</literal>, <literal>alpha</literal>, and "
"<literal>sparc</literal> architectures.  Since then Debian has grown "
"hugely.  Debian 6 supports a total of nine Linux architectures "
"(<literal>amd64</literal>, <literal>armel</literal>, "
"<literal>i386</literal>, <literal>ia64</literal>, <literal>mips</literal>, "
"<literal>mipsel</literal>, <literal>powerpc</literal>, "
"<literal>s390</literal>, <literal>sparc</literal>) and two kFreeBSD "
"architectures (<literal>kfreebsd-i386</literal> and "
"<literal>kfreebsd-amd64</literal>)."
9590
"Information for developers and users about the specific ports are available "
"at the <ulink url=\"&url-debian-ports;\">Debian Ports web pages</ulink>."
9597
"Packages"
9602
"There are two types of Debian packages, namely <literal>source</literal> and ""<literal>binary</literal> packages."
9610
"Depending on the format of the source package, it will consist of one or "
"more files in addition to the mandatory <filename>.dsc</filename> file:"
9618
"with format “1.0”, it has either a <filename>.tar.gz</filename> file or both "
"an <filename>.orig.tar.gz</filename> and a <filename>.diff.gz</filename> "
"file;"
9628
"with format “3.0 (quilt)”, it has a mandatory "
"<filename>.orig.tar.{gz,bz2,xz}</filename> upstream tarball, multiple "
"optional "
"<filename>.orig-<replaceable>component</replaceable>.tar.{gz,bz2,xz}</filename> "
"additional upstream tarballs and a mandatory "
"<filename>debian.tar.{gz,bz2,xz}</filename> debian tarball;"
9641
"with format “3.0 (native)”, it has only a single "
"<filename>.tar.{gz,bz2,xz}</filename> tarball."
9648
"If a package is developed specially for Debian and is not distributed "
"outside of Debian, there is just one <filename>.tar.{gz,bz2,xz}</filename> "
"file which contains the sources of the program, it's called a “native” "
"source package.  If a package is distributed elsewhere too, the "
"<filename>.orig.tar.{gz,bz2,xz}</filename> file stores the so-called "
"<literal>upstream source code</literal>, that is the source code that's "
"distributed by the <literal>upstream maintainer</literal> (often the author "
"of the software). In this case, the <filename>.diff.gz</filename> or the "
"<filename>debian.tar.{gz,bz2,xz}</filename> contains the changes made by the ""Debian maintainer."
9664
"The <filename>.dsc</filename> file lists all the files in the source package ""together with checksums (<command>md5sums</command>) and some additional "
"info about the package (maintainer, version, etc.)."
9673
"Distributions"
9678
"The directory system described in the previous chapter is itself contained "
"within <literal>distribution directories</literal>.  Each distribution is "
"actually contained in the <filename>pool</filename> directory in the "
"top-level of the Debian archive itself."
9687
"To summarize, the Debian archive has a root directory within an FTP server.  ""For instance, at the mirror site, <literal>ftp.us.debian.org</literal>, the "
"Debian archive itself is contained in <ulink "
"url=\"ftp://ftp.us.debian.org/debian\">/debian</ulink>, which is a common "
"location (another is <filename>/pub/debian</filename>)."
9698
"A distribution comprises Debian source and binary packages, and the "
"respective <filename>Sources</filename> and <filename>Packages</filename> "
"index files, containing the header information from all those packages.  The ""former are kept in the <filename>pool/</filename> directory, while the "
"latter are kept in the <filename>dists/</filename> directory of the archive "
"(for backwards compatibility)."
9710
"Stable, testing, and unstable"
9715
"There are always distributions called <literal>stable</literal> (residing in ""<filename>dists/stable</filename>), <literal>testing</literal> (residing in "
"<filename>dists/testing</filename>), and <literal>unstable</literal> "
"(residing in <filename>dists/unstable</filename>).  This reflects the "
"development process of the Debian project."
9726
"Active development is done in the <literal>unstable</literal> distribution "
"(that's why this distribution is sometimes called the <literal>development "
"distribution</literal>).  Every Debian developer can update their packages "
"in this distribution at any time.  Thus, the contents of this distribution "
"change from day to day.  Since no special effort is made to make sure "
"everything in this distribution is working properly, it is sometimes "
"literally unstable."
9738
"The <link linkend=\"testing\">testing</link> distribution is generated "
"automatically by taking packages from <literal>unstable</literal> if they "
"satisfy certain criteria.  Those criteria should ensure a good quality for "
"packages within <literal>testing</literal>.  The update to "
"<literal>testing</literal> is launched twice each day, right after the new "
"packages have been installed.  See <xref linkend=\"testing\"/>."
9749
"After a period of development, once the release manager deems fit, the "
"<literal>testing</literal> distribution is frozen, meaning that the policies ""which control how packages move from <literal>unstable</literal> to "
"<literal>testing</literal> are tightened.  Packages which are too buggy are "
"removed.  No changes are allowed into <literal>testing</literal> except for "
"bug fixes.  After some time has elapsed, depending on progress, the "
"<literal>testing</literal> distribution is frozen even further.  Details of "
"the handling of the testing distribution are published by the Release Team "
"on debian-devel-announce.  After the open issues are solved to the "
"satisfaction of the Release Team, the distribution is released.  Releasing "
"means that <literal>testing</literal> is renamed to "
"<literal>stable</literal>, and a new copy is created for the new "
"<literal>testing</literal>, and the previous <literal>stable</literal> is "
"renamed to <literal>oldstable</literal> and stays there until it is finally "
"archived.  On archiving, the contents are moved to "
"<literal>&archive-host;</literal>."
9771
"This development cycle is based on the assumption that the "
"<literal>unstable</literal> distribution becomes <literal>stable</literal> "
"after passing a period of being in <literal>testing</literal>.  Even once a "
"distribution is considered stable, a few bugs inevitably remain — that's why "
"the stable distribution is updated every now and then.  However, these "
"updates are tested very carefully and have to be introduced into the archive ""individually to reduce the risk of introducing new bugs.  You can find "
"proposed additions to <literal>stable</literal> in the "
"<filename>proposed-updates</filename> directory.  Those packages in "
"<filename>proposed-updates</filename> that pass muster are periodically "
"moved as a batch into the stable distribution and the revision level of the "
"stable distribution is incremented (e.g., ‘6.0’ becomes ‘6.0.1’, ‘5.0.7’ "
"becomes ‘5.0.8’, and so forth).  Please refer to <link "
"linkend=\"upload-stable\">uploads to the <literal>stable</literal> "
"distribution</link> for details."
9794
"Note that development under <literal>unstable</literal> continues during the ""freeze period, since the <literal>unstable</literal> distribution remains in ""place in parallel with <literal>testing</literal>."
9804
"More information about the testing distribution"
9809
"Packages are usually installed into the <literal>testing</literal> "
"distribution after they have undergone some degree of testing in "
"<literal>unstable</literal>."
9817
"For more details, please see the <link linkend=\"testing\">information about ""the testing distribution</link>."
9825
"Experimental"
9830
"The <literal>experimental</literal> distribution is a special distribution.  ""It is not a full distribution in the same sense as "
"<literal>stable</literal>, <literal>testing</literal> and "
"<literal>unstable</literal> are.  Instead, it is meant to be a temporary "
"staging area for highly experimental software where there's a good chance "
"that the software could break your system, or software that's just too "
"unstable even for the <literal>unstable</literal> distribution (but there is ""a reason to package it nevertheless).  Users who download and install "
"packages from <literal>experimental</literal> are expected to have been duly ""warned.  In short, all bets are off for the <literal>experimental</literal> "
"distribution."
9849
"These are the <citerefentry> <refentrytitle>sources.list</refentrytitle> "
"<manvolnum>5</manvolnum> </citerefentry> lines for "
"<literal>experimental</literal>:"
9857
"deb http://ftp.<replaceable>xy</replaceable>.debian.org/debian/ experimental ""main\n"
"deb-src http://ftp.<replaceable>xy</replaceable>.debian.org/debian/ "
"experimental main\n"
9868
"If there is a chance that the software could do grave damage to a system, it ""is likely to be better to put it into <literal>experimental</literal>.  For "
"instance, an experimental compressed file system should probably go into "
"<literal>experimental</literal>."
9878
"Whenever there is a new upstream version of a package that introduces new "
"features but breaks a lot of old ones, it should either not be uploaded, or "
"be uploaded to <literal>experimental</literal>.  A new, beta, version of "
"some software which uses a completely different configuration can go into "
"<literal>experimental</literal>, at the maintainer's discretion.  If you are ""working on an incompatible or complex upgrade situation, you can also use "
"<literal>experimental</literal> as a staging area, so that testers can get "
"early access."
9892
"Some experimental software can still go into <literal>unstable</literal>, "
"with a few warnings in the description, but that isn't recommended because "
"packages from <literal>unstable</literal> are expected to propagate to "
"<literal>testing</literal> and thus to <literal>stable</literal>.  You "
"should not be afraid to use <literal>experimental</literal> since it does "
"not cause any pain to the ftpmasters, the experimental packages are "
"periodically removed once you upload the package in "
"<literal>unstable</literal> with a higher version number."
9905
"New software which isn't likely to damage your system can go directly into "
"<literal>unstable</literal>."
9912
"An alternative to <literal>experimental</literal> is to use your personal "
"web space on <literal>people.debian.org</literal>."
9919
"Release code names"
9924
"Every released Debian distribution has a <literal>code name</literal>: "
"Debian 1.1 is called <literal>buzz</literal>; Debian 1.2, "
"<literal>rex</literal>; Debian 1.3, <literal>bo</literal>; Debian 2.0, "
"<literal>hamm</literal>; Debian 2.1, <literal>slink</literal>; Debian 2.2, "
"<literal>potato</literal>; Debian 3.0, <literal>woody</literal>; Debian 3.1, ""<literal>sarge</literal>; Debian 4.0, <literal>etch</literal>; Debian 5.0, "
"<literal>lenny</literal>; Debian 6.0, <literal>squeeze</literal> and the "
"next release will be called <literal>wheezy</literal>.  There is also a "
"``pseudo-distribution'', called <literal>sid</literal>, which is the current ""<literal>unstable</literal> distribution; since packages are moved from "
"<literal>unstable</literal> to <literal>testing</literal> as they approach "
"stability, <literal>sid</literal> itself is never released.  As well as the "
"usual contents of a Debian distribution, <literal>sid</literal> contains "
"packages for architectures which are not yet officially supported or "
"released by Debian.  These architectures are planned to be integrated into "
"the mainstream distribution at some future date."
9947
"Since Debian has an open development model (i.e., everyone can participate "
"and follow the development) even the <literal>unstable</literal> and "
"<literal> testing</literal> distributions are distributed to the Internet "
"through the Debian FTP and HTTP server network. Thus, if we had called the "
"directory which contains the release candidate version "
"<literal>testing</literal>, then we would have to rename it to "
"<literal>stable</literal> when the version is released, which would cause "
"all FTP mirrors to re-retrieve the whole distribution (which is quite "
"large)."
9961
"On the other hand, if we called the distribution directories "
"<literal>Debian-x.y</literal> from the beginning, people would think that "
"Debian release <literal>x.y</literal> is available.  (This happened in the "
"past, where a CD-ROM vendor built a Debian 1.0 CD-ROM based on a pre-1.0 "
"development version.  That's the reason why the first official Debian "
"release was 1.1, and not 1.0.)"
9972
"Thus, the names of the distribution directories in the archive are "
"determined by their code names and not their release status (e.g., "
"`squeeze'). These names stay the same during the development period and "
"after the release; symbolic links, which can be changed easily, indicate the ""currently released stable distribution.  That's why the real distribution "
"directories use the <literal>code names</literal>, while symbolic links for "
"<literal>stable</literal>, <literal>testing</literal>, and "
"<literal>unstable</literal> point to the appropriate release directories."
9986
"Debian mirrors"
9991
"The various download archives and the web site have several mirrors "
"available in order to relieve our canonical servers from heavy load.  In "
"fact, some of the canonical servers aren't public — a first tier of mirrors "
"balances the load instead.  That way, users always access the mirrors and "
"get used to using them, which allows Debian to better spread its bandwidth "
"requirements over several servers and networks, and basically makes users "
"avoid hammering on one primary location.  Note that the first tier of "
"mirrors is as up-to-date as it can be since they update when triggered from "
"the internal sites (we call this push mirroring)."
10006
"All the information on Debian mirrors, including a list of the available "
"public FTP/HTTP servers, can be found at <ulink "
"url=\"&url-debian-mirrors;\"></ulink>.  This useful page also includes "
"information and tools which can be helpful if you are interested in setting "
"up your own mirror, either for internal or public access."
10016
"Note that mirrors are generally run by third-parties who are interested in "
"helping Debian.  As such, developers generally do not have accounts on these ""machines."
10025
"The Incoming system"
10030
"The Incoming system is responsible for collecting updated packages and "
"installing them in the Debian archive.  It consists of a set of directories "
"and scripts that are installed on <literal>&ftp-master-host;</literal>."
10038
"Packages are uploaded by all the maintainers into a directory called "
"<filename>UploadQueue</filename>.  This directory is scanned every few "
"minutes by a daemon called <command>queued</command>, "
"<filename>*.command</filename>-files are executed, and remaining and "
"correctly signed <filename>*.changes</filename>-files are moved together "
"with their corresponding files to the <filename>unchecked</filename> "
"directory.  This directory is not visible for most Developers, as ftp-master ""is restricted; it is scanned every 15 minutes by the <command>dak "
"process-upload</command> script, which verifies the integrity of the "
"uploaded packages and their cryptographic signatures.  If the package is "
"considered ready to be installed, it is moved into the "
"<filename>done</filename> directory.  If this is the first upload of the "
"package (or it has new binary packages), it is moved to the "
"<filename>new</filename> directory, where it waits for approval by the "
"ftpmasters.  If the package contains files to be installed by hand it is "
"moved to the <filename>byhand</filename> directory, where it waits for "
"manual installation by the ftpmasters.  Otherwise, if any error has been "
"detected, the package is refused and is moved to the "
"<filename>reject</filename> directory."
10063
"Once the package is accepted, the system sends a confirmation mail to the "
"maintainer and closes all the bugs marked as fixed by the upload, and the "
"auto-builders may start recompiling it.  The package is now publicly "
"accessible at <ulink url=\"&url-incoming;\"></ulink> until it is really "
"installed in the Debian archive.  This happens four times a day (and is also ""called the `dinstall run' for historical reasons); the package is then "
"removed from incoming and installed in the pool along with all the other "
"packages.  Once all the other updates (generating new "
"<filename>Packages</filename> and <filename>Sources</filename> index files "
"for example) have been made, a special script is called to ask all the "
"primary mirrors to update themselves."
10080
"The archive maintenance software will also send the OpenPGP/GnuPG signed "
"<filename>.changes</filename> file that you uploaded to the appropriate "
"mailing lists.  If a package is released with the "
"<literal>Distribution</literal> set to <literal>stable</literal>, the "
"announcement is sent to &email-debian-changes;.  If a package is released "
"with <literal>Distribution</literal> set to <literal>unstable</literal> or "
"<literal>experimental</literal>, the announcement will be posted to "
"&email-debian-devel-changes; instead."
10093
"Though ftp-master is restricted, a copy of the installation is available to "
"all developers on <literal>&ftp-master-mirror;</literal>."
10100
"Package information"
10105
"On the web"
10110
"Each package has several dedicated web pages.  "
"<literal>http://&packages-host;/<replaceable>package-name</replaceable></literal> "
"displays each version of the package available in the various "
"distributions.  Each version links to a page which provides information, "
"including the package description, the dependencies, and package download "
"links."
10122
"The bug tracking system tracks bugs for each package.  You can view the bugs ""of a given package at the URL "
"<literal>http://&bugs-host;/<replaceable>package-name</replaceable></literal>."
10132
"The <command>dak ls</command> utility"
10137
"<command>dak ls</command> is part of the dak suite of tools, listing "
"available package versions for all known distributions and architectures.  "
"The <command>dak</command> tool is available on "
"<literal>&ftp-master-host;</literal>, and on the mirror on "
"<literal>&ftp-master-mirror;</literal>.  It uses a single argument "
"corresponding to a package name. An example will explain it better:"
10148
"$ dak ls evince\n"
"evince | 0.1.5-2sarge1 |     oldstable | source, alpha, arm, hppa, i386, "
"ia64, m68k, mips, mipsel, powerpc, s390, sparc\n"
"evince |    0.4.0-5 |     etch-m68k | source, m68k\n"
"evince |    0.4.0-5 |        stable | source, alpha, amd64, arm, hppa, i386, ""ia64, mips, mipsel, powerpc, s390, sparc\n"
"evince |   2.20.2-1 |       testing | source\n"
"evince | 2.20.2-1+b1 |       testing | alpha, amd64, arm, armel, hppa, i386, ""ia64, mips, mipsel, powerpc, s390, sparc\n"
"evince |   2.22.2-1 |      unstable | source, alpha, amd64, arm, armel, "
"hppa, i386, ia64, m68k, mips, mipsel, powerpc, s390, sparc\n"
10167
"In this example, you can see that the version in <literal>unstable</literal> ""differs from the version in <literal>testing</literal> and that there has "
"been a binary-only NMU of the package for all architectures.  Each version "
"of the package has been recompiled on all architectures."
10177
"The Package Tracking System"
10182
"The Package Tracking System (PTS) is an email-based tool to track the "
"activity of a source package.  This really means that you can get the same "
"emails that the package maintainer gets, simply by subscribing to the "
"package in the PTS."
10191
"Each email sent through the PTS is classified under one of the keywords "
"listed below.  This will let you select the mails that you want to receive."
10198
"By default you will get:"
10203
"<literal>bts</literal>"
10209
"All the bug reports and following discussions."
10214
"<literal>bts-control</literal>"
10220
"The email notifications from <email>control@&bugs-host;</email> about bug "
"report status changes."
10227
"<literal>upload-source</literal>"
10233
"The email notification from <command>dak</command> when an uploaded source "
"package is accepted."
10240
"<literal>katie-other</literal>"
10246
"Other warning and error emails from <command>dak</command> (such as an "
"override disparity for the section and/or the priority field)."
10253
"<literal>buildd</literal>"
10259
"Build failures notifications sent by the network of build daemons, they "
"contain a pointer to the build logs for analysis."
10266
"<literal>default</literal>"
10272
"Any non-automatic email sent to the PTS by people who wanted to contact the "
"subscribers of the package.  This can be done by sending mail to "
"<literal><replaceable>sourcepackage</replaceable>@&pts-host;</literal>.  In "
"order to prevent spam, all messages sent to these addresses must contain the ""<literal>X-PTS-Approved</literal> header with a non-empty value."
10283
"<literal>contact</literal>"
10289
"Mails sent to the maintainer through the *@packages.debian.org email "
"aliases."
10296
"<literal>summary</literal>"
10302
"Regular summary emails about the package's status, including progression "
"into <literal>testing</literal>, <ulink url=\"&url-dehs;\">DEHS</ulink> "
"notifications of new upstream versions, and a notification if the package is ""removed or orphaned."
10312
"You can also decide to receive additional information:"
10317
"<literal>upload-binary</literal>"
10323
"The email notification from <command>katie</command> when an uploaded binary ""package is accepted.  In other words, whenever a build daemon or a porter "
"uploads your package for another architecture, you can get an email to track ""how your package gets recompiled for all architectures."
10334
"<literal>cvs</literal>"
10340
"VCS commit notifications, if the package has a VCS repository and the "
"maintainer has set up forwarding of commit notifications to the PTS. The "
"\"cvs\" name is historic, in most cases commit notifications will come from "
"some other VCS like subversion or git."
10349
"<literal>ddtp</literal>"
10355
"Translations of descriptions or debconf templates submitted to the Debian "
"Description Translation Project."
10362
"<literal>derivatives</literal>"
10368
"Information about changes made to the package in derivative distributions "
"(for example Ubuntu)."
10375
"<literal>derivatives-bugs</literal>"
10381
"Bugs reports and comments from derivative distributions (for example "
"Ubuntu)."
10388
"The PTS email interface"
10393
"You can control your subscription(s) to the PTS by sending various commands "
"to <email>pts@qa.debian.org</email>."
10401
"<literal>subscribe &lt;sourcepackage&gt; [&lt;email&gt;]</literal>"
10407
"Subscribes <replaceable>email</replaceable> to communications related to the ""source package <replaceable>sourcepackage</replaceable>.  Sender address is "
"used if the second argument is not present.  If "
"<replaceable>sourcepackage</replaceable> is not a valid source package, "
"you'll get a warning.  However if it's a valid binary package, the PTS will "
"subscribe you to the corresponding source package."
10420
"<literal>unsubscribe &lt;sourcepackage&gt; [&lt;email&gt;]</literal>"
10426
"Removes a previous subscription to the source package "
"<replaceable>sourcepackage</replaceable> using the specified email address "
"or the sender address if the second argument is left out."
10435
"<literal>unsubscribeall [&lt;email&gt;]</literal>"
10441
"Removes all subscriptions of the specified email address or the sender "
"address if the second argument is left out."
10449
"<literal>which [&lt;email&gt;]</literal>"
10455
"Lists all subscriptions for the sender or the email address optionally "
"specified."
10463
"<literal>keyword [&lt;email&gt;]</literal>"
10469
"Tells you the keywords that you are accepting.  For an explanation of "
"keywords, <link linkend=\"pkg-tracking-system\">see above</link>.  Here's a "
"quick summary:"
10478
"<literal>bts</literal>: mails coming from the Debian Bug Tracking System"
10485
"<literal>bts-control</literal>: reply to mails sent to &email-bts-control;"
10492
"<literal>summary</literal>: automatic summary mails about the state of a "
"package"
10500
"<literal>contact</literal>: mails sent to the maintainer through the "
"*@packages.debian.org aliases"
10508
"<literal>cvs</literal>: notification of VCS commits"
10514
"<literal>ddtp</literal>: translations of descriptions and debconf templates"
10521
"<literal>derivatives</literal>: changes made on the package by derivative "
"distributions"
10529
"<literal>derivatives-bugs</literal>: bugs reports and comments from "
"derivative distributions"
10537
"<literal>upload-source</literal>: announce of a new source upload that has "
"been accepted"
10545
"<literal>upload-binary</literal>: announce of a new binary-only upload "
"(porting)"
10553
"<literal>katie-other</literal>: other mails from ftpmasters (override "
"disparity, etc.)"
10561
"<literal>buildd</literal>: build failures notifications from build daemons"
10568
"<literal>default</literal>: all the other mails (those which aren't "
"automatic)"
10576
"<literal>keyword &lt;sourcepackage&gt; [&lt;email&gt;]</literal>"
10582
"Same as the previous item but for the given source package, since you may "
"select a different set of keywords for each source package."
10590
"<literal>keyword [&lt;email&gt;] {+|-|=} &lt;list of keywords&gt;</literal>"
10597
"Accept (+) or refuse (-) mails classified under the given keyword(s).  "
"Define the list (=) of accepted keywords.  This changes the default set of "
"keywords accepted by a user."
10606
"<literal>keywordall [&lt;email&gt;] {+|-|=} &lt;list of "
"keywords&gt;</literal>"
10614
"Accept (+) or refuse (-) mails classified under the given keyword(s).  "
"Define the list (=) of accepted keywords.  This changes the set of accepted "
"keywords of all the currently active subscriptions of a user."
10623
"<literal>keyword &lt;sourcepackage&gt; [&lt;email&gt;] {+|-|=} &lt;list of "
"keywords&gt;</literal>"
10631
"Same as previous item but overrides the keywords list for the indicated "
"source package."
10639
"<literal>quit | thanks | --</literal>"
10645
"Stops processing commands.  All following lines are ignored by the bot."10651
"The <command>pts-subscribe</command> command-line utility (from the "
"<systemitem role=\"package\">devscripts</systemitem> package) can be handy "
"to temporarily subscribe to some packages, for example after having made an "
"non-maintainer upload."
10660
"Filtering PTS mails"
10665
"Once you are subscribed to a package, you will get the mails sent to "
"<literal><replaceable>sourcepackage</replaceable>@&pts-host;</literal>.  "
"Those mails have special headers appended to let you filter them in a "
"special mailbox (e.g.  with <command>procmail</command>).  The added headers ""are <literal>X-Loop</literal>, <literal>X-PTS-Package</literal>, "
"<literal>X-PTS-Keyword</literal> and <literal>X-Unsubscribe</literal>."
10677
"Here is an example of added headers for a source upload notification on the "
"<systemitem role=\"package\">dpkg</systemitem> package:"
10684
"X-Loop: dpkg@&pts-host;\n"
"X-PTS-Package: dpkg\n"
"X-PTS-Keyword: upload-source\n"
"List-Unsubscribe: &lt;mailto:pts@qa.debian.org?body=unsubscribe+dpkg&gt;\n"
10694
"Forwarding VCS commits in the PTS"
10699
"If you use a publicly accessible VCS repository for maintaining your Debian "
"package, you may want to forward the commit notification to the PTS so that "
"the subscribers (and possible co-maintainers) can closely follow the "
"package's evolution."
10708
"Once you set up the VCS repository to generate commit notifications, you "
"just have to make sure it sends a copy of those mails to "
"<literal><replaceable>sourcepackage</replaceable>_cvs@&pts-host;</literal>.  ""Only the people who accept the <literal>cvs</literal> keyword will receive "
"these notifications. Note that the mail needs to be sent from a "
"<literal>debian.org</literal> machine, otherwise you'll have to add the "
"<literal>X-PTS-Approved: 1</literal> header."
10721
"For Subversion repositories, the usage of svnmailer is recommended.  See "
"<ulink url=\"&url-alioth-pkg;\" /> for an example on how to do it."
10728
"The PTS web interface"
10733
"The PTS has a web interface at <ulink url=\"http://&pts-host;/\"></ulink> "
"that puts together a lot of information about each source package.  It "
"features many useful links (BTS, QA stats, contact information, DDTP "
"translation status, buildd logs) and gathers much more information from "
"various places (30 latest changelog entries, testing status, etc.).  It's a "
"very useful tool if you want to know what's going on with a specific source "
"package.  Furthermore there's a form that allows easy subscription to the "
"PTS via email."
10746
"You can jump directly to the web page concerning a specific source package "
"with a URL like "
"<literal>http://&pts-host;/<replaceable>sourcepackage</replaceable></literal>."
10755
"This web interface has been designed like a portal for the development of "
"packages: you can add custom content on your packages' pages.  You can add "
"static information (news items that are meant to stay available "
"indefinitely)  and news items in the latest news section."
10764
"Static news items can be used to indicate:"
10769
"the availability of a project hosted on <link "
"linkend=\"alioth\">Alioth</link> for co-maintaining the package"
10776
"a link to the upstream web site"
10781
"a link to the upstream bug tracker"
10786
"the existence of an IRC channel dedicated to the software"
10791
"any other available resource that could be useful in the maintenance of the "
"package"
10798
"Usual news items may be used to announce that:"
10803
"beta packages are available for testing"
10808
"final packages are expected for next week"
10813
"the packaging is about to be redone from scratch"
10818
"backports are available"
10823
"the maintainer is on vacation (if they wish to publish this information)"
10829
"a NMU is being worked on"
10834
"something important will affect the package"
10839
"Both kinds of news are generated in a similar manner: you just have to send "
"an email either to <email>pts-static-news@qa.debian.org</email> or to "
"<email>pts-news@qa.debian.org</email>.  The mail should indicate which "
"package is concerned by having the name of the source package in a "
"<literal>X-PTS-Package</literal> mail header or in a "
"<literal>Package</literal> pseudo-header (like the BTS reports).  If a URL "
"is available in the <literal>X-PTS-Url</literal> mail header or in the "
"<literal>Url</literal> pseudo-header, then the result is a link to that URL "
"instead of a complete news item."
10853
"Here are a few examples of valid mails used to generate news items in the "
"PTS.  The first one adds a link to the viewsvn interface of debian-cd in the ""Static information section:"
10862
"From: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"To: pts-static-news@qa.debian.org\n"
"Subject: Browse debian-cd SVN repository\n"
"\n"
"Package: debian-cd\n"
"Url: http://svn.debian.org/viewsvn/debian-cd/trunk/\n"
10874
"The second one is an announcement sent to a mailing list which is also sent "
"to the PTS so that it is published on the PTS web page of the package.  Note ""the use of the BCC field to avoid answers sent to the PTS by mistake."
10883
"From: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"To: debian-gtk-gnome@&lists-host;\n"
"Bcc: pts-news@qa.debian.org\n"
"Subject: Galeon 2.0 backported for woody\n"
"X-PTS-Package: galeon\n"
"\n"
"Hello gnomers!\n"
"\n"
"I'm glad to announce that galeon has been backported for woody. You'll "
"find\n"
"everything here:\n"
"...\n"
10901
"Think twice before adding a news item to the PTS because you won't be able "
"to remove it later and you won't be able to edit it either.  The only thing "
"that you can do is send a second news item that will deprecate the "
"information contained in the previous one."
10910
"Developer's packages overview"
10915
"A QA (quality assurance) web portal is available at <ulink "
"url=\"&url-ddpo;\"></ulink> which displays a table listing all the packages "
"of a single developer (including those where the party is listed as a "
"co-maintainer).  The table gives a good summary about the developer's "
"packages: number of bugs by severity, list of available versions in each "
"distribution, testing status and much more including links to any other "
"useful information."
10927
"It is a good idea to look up your own data regularly so that you don't "
"forget any open bugs, and so that you don't forget which packages are your "
"responsibility."
10935
"Debian's FusionForge installation: Alioth"
10940
"Alioth is a Debian service based on a slightly modified version of the "
"FusionForge software (which evolved from SourceForge and GForge). This "
"software offers developers access to easy-to-use tools such as bug trackers, ""patch manager, project/task managers, file hosting services, mailing lists, "
"VCS repositories etc.  All these tools are managed via a web interface."
10951
"It is intended to provide facilities to free software projects backed or led ""by Debian, facilitate contributions from external developers to projects "
"started by Debian, and help projects whose goals are the promotion of Debian ""or its derivatives. It's heavily used by many Debian teams and provides "
"hosting for all sorts of VCS repositories."
10963
"All Debian developers automatically have an account on Alioth.  They can "
"activate it by using the recover password facility.  External developers can ""request guest accounts on Alioth."
10972
"For more information please visit the following links:"
10977
"<ulink url=\"&url-alioth-wiki;\" />"
10982
"<ulink url=\"&url-alioth-faq;\" />"
10987
"<ulink url=\"&url-alioth-pkg;\" />"
10992
"<ulink url=\"&url-alioth;\" />"
10997
"Goodies for Developers"
11002
"LWN Subscriptions"
11007
"Since October of 2002, HP has sponsored a subscription to LWN for all "
"interested Debian developers.  Details on how to get access to this benefit "
"are in <ulink "
"url=\"http://&lists-host;/debian-devel-announce/2002/10/msg00018.html\"></ulink>."
11017
"Gandi.net Hosting Discount"
11022
"As of November 2008, Gandi.net offers a discount rate on their VPS hosting "
"for Debian Developers.  See <ulink "
"url=\"http://&lists-host;/debian-devel-announce/2008/11/msg00004.html\"></ulink>."
11031
"Scope of This Document"
11036
"The purpose of this document is to provide an overview of the recommended "
"procedures and the available resources for Debian developers."
11043
"The procedures discussed within include how to become a maintainer (<xref "
"linkend=\"new-maintainer\"/>); how to create new packages (<xref "
"linkend=\"newpackage\"/>) and how to upload packages (<xref "
"linkend=\"upload\"/>); how to handle bug reports (<xref "
"linkend=\"bug-handling\"/>); how to move, remove, or orphan packages (<xref "
"linkend=\"archive-manip\"/>); how to port packages (<xref "
"linkend=\"porting\"/>); and how and when to do interim releases of other "
"maintainers' packages (<xref linkend=\"nmu\"/>)."
11056
"The resources discussed in this reference include the mailing lists (<xref "
"linkend=\"mailing-lists\"/>) and servers (<xref "
"linkend=\"server-machines\"/>); a discussion of the structure of the Debian "
"archive (<xref linkend=\"archive\"/>); explanation of the different servers "
"which accept package uploads (<xref linkend=\"upload-ftp-master\"/>); and a "
"discussion of resources which can help maintainers with the quality of their ""packages (<xref linkend=\"tools\"/>)."
11069
"It should be clear that this reference does not discuss the technical "
"details of Debian packages nor how to generate them.  Nor does this "
"reference detail the standards to which Debian software must comply.  All of ""such information can be found in the <ulink "
"url=\"&url-debian-policy;\">Debian Policy Manual</ulink>."
11080
"Furthermore, this document is <emphasis>not an expression of formal "
"policy</emphasis>.  It contains documentation for the Debian system and "
"generally agreed-upon best practices.  Thus, it is not what is called a "
"``normative'' document."
11089
"Overview of Debian Maintainer Tools"
11094
"This section contains a rough overview of the tools available to "
"maintainers.  The following is by no means complete or definitive, but just "
"a guide to some of the more popular tools."
11102
"Debian maintainer tools are meant to aid developers and free their time for "
"critical tasks.  As Larry Wall says, there's more than one way to do it."
11109
"Some people prefer to use high-level package maintenance tools and some do "
"not.  Debian is officially agnostic on this issue; any tool which gets the "
"job done is fine.  Therefore, this section is not meant to stipulate to "
"anyone which tools they should use or how they should go about their duties "
"of maintainership.  Nor is it meant to endorse any particular tool to the "
"exclusion of a competing tool."
11120
"Most of the descriptions of these packages come from the actual package "
"descriptions themselves.  Further information can be found in the package "
"documentation itself.  You can also see more info with the command "
"<command>apt-cache show <replaceable>package-name</replaceable></command>."
11129
"Core tools"
11134
"The following tools are pretty much required for any maintainer."
11139
"<systemitem role=\"package\">dpkg-dev</systemitem>"
11144
"<systemitem role=\"package\">dpkg-dev</systemitem> contains the tools "
"(including <command>dpkg-source</command>) required to unpack, build, and "
"upload Debian source packages.  These utilities contain the fundamental, "
"low-level functionality required to create and manipulate packages; as such, ""they are essential for any Debian maintainer."
11155
"<systemitem role=\"package\">debconf</systemitem>"
11160
"<systemitem role=\"package\">debconf</systemitem> provides a consistent "
"interface to configuring packages interactively.  It is user interface "
"independent, allowing end-users to configure packages with a text-only "
"interface, an HTML interface, or a dialog interface.  New interfaces can be "
"added as modules."
11170
"You can find documentation for this package in the <systemitem "
"role=\"package\">debconf-doc</systemitem> package."
11177
"Many feel that this system should be used for all packages which require "
"interactive configuration; see <xref linkend=\"bpp-config-mgmt\"/>.  "
"<systemitem role=\"package\">debconf</systemitem> is not currently required "
"by Debian Policy, but that may change in the future."
11186
"<systemitem role=\"package\">fakeroot</systemitem>"
11191
"<systemitem role=\"package\">fakeroot</systemitem> simulates root "
"privileges.  This enables you to build packages without being root (packages ""usually want to install files with root ownership).  If you have <systemitem ""role=\"package\">fakeroot</systemitem> installed, you can build packages as "
"a regular user: <literal>dpkg-buildpackage -rfakeroot</literal>."
11203
"Package lint tools"
11208
"According to the Free On-line Dictionary of Computing (FOLDOC), `lint' is a "
"Unix C language processor which carries out more thorough checks on the code ""than is usual with C compilers.  Package lint tools help package maintainers ""by automatically finding common problems and policy violations in their "
"packages."
11220
"<systemitem role=\"package\">lintian</systemitem>"
11225
"<systemitem role=\"package\">lintian</systemitem> dissects Debian packages "
"and emits information about bugs and policy violations.  It contains "
"automated checks for many aspects of Debian policy as well as some checks "
"for common errors."
11234
"You should periodically get the newest <systemitem "
"role=\"package\">lintian</systemitem> from <literal>unstable</literal> and "
"check over all your packages.  Notice that the <literal>-i</literal> option "
"provides detailed explanations of what each error or warning means, what its ""basis in Policy is, and commonly how you can fix the problem."
11245
"Refer to <xref linkend=\"sanitycheck\"/> for more information on how and "
"when to use Lintian."
11252
"You can also see a summary of all problems reported by Lintian on your "
"packages at <ulink url=\"&url-lintian;\"></ulink>.  These reports contain "
"the latest <command>lintian</command> output for the whole development "
"distribution (<literal>unstable</literal>)."
11261
"<command>debdiff</command>"
11266
"<command>debdiff</command> (from the <systemitem "
"role=\"package\">devscripts</systemitem> package, <xref "
"linkend=\"devscripts\"/>)  compares file lists and control files of two "
"packages.  It is a simple regression test, as it will help you notice if the ""number of binary packages has changed since the last upload, or if something ""has changed in the control file.  Of course, some of the changes it reports "
"will be all right, but it can help you prevent various accidents."
11280
"You can run it over a pair of binary packages:"
11285
"debdiff package_1-1_arch.deb package_2-1_arch.deb\n"
11291
"Or even a pair of changes files:"
11296
"debdiff package_1-1_arch.changes package_2-1_arch.changes\n"
11302
"For more information please see <citerefentry> "
"<refentrytitle>debdiff</refentrytitle> <manvolnum>1</manvolnum> "
"</citerefentry>."
11310
"Helpers for <filename>debian/rules</filename>"
11315
"Package building tools make the process of writing "
"<filename>debian/rules</filename> files easier.  See <xref "
"linkend=\"helper-scripts\"/> for more information about why these might or "
"might not be desired."
11324
"<systemitem role=\"package\">debhelper</systemitem>"
11329
"<systemitem role=\"package\">debhelper</systemitem> is a collection of "
"programs which can be used in <filename>debian/rules</filename> to automate "
"common tasks related to building binary Debian packages.  <systemitem "
"role=\"package\">debhelper</systemitem> includes programs to install various ""files into your package, compress files, fix file permissions, and integrate ""your package with the Debian menu system."
11342
"Unlike some approaches, <systemitem role=\"package\">debhelper</systemitem> "
"is broken into several small, simple commands which act in a consistent "
"manner.  As such, it allows more fine-grained control than some of the other ""debian/rules tools."
11352
"There are a number of little <systemitem "
"role=\"package\">debhelper</systemitem> add-on packages, too transient to "
"document.  You can see the list of most of them by doing <literal>apt-cache "
"search ^dh-</literal>."
11361
"<systemitem role=\"package\">dh-make</systemitem>"
11366
"The <systemitem role=\"package\">dh-make</systemitem> package contains "
"<command>dh_make</command>, a program that creates a skeleton of files "
"necessary to build a Debian package out of a source tree.  As the name "
"suggests, <command>dh_make</command> is a rewrite of <systemitem "
"role=\"package\">debmake</systemitem> and its template files use "
"<command>dh_*</command> programs from <systemitem "
"role=\"package\">debhelper</systemitem>."
11378
"While the rules files generated by <command>dh_make</command> are in general ""a sufficient basis for a working package, they are still just the "
"groundwork: the burden still lies on the maintainer to finely tune the "
"generated files and make the package entirely functional and "
"Policy-compliant."
11389
"<systemitem role=\"package\">equivs</systemitem>"
11394
"<systemitem role=\"package\">equivs</systemitem> is another package for "
"making packages.  It is often suggested for local use if you need to make a "
"package simply to fulfill dependencies.  It is also sometimes used when "
"making ``meta-packages'', which are packages whose only purpose is to depend ""on other packages."
11405
"Package builders"
11410
"The following packages help with the package building process, general "
"driving <command>dpkg-buildpackage</command> as well as handling supporting "
"tasks."
11418
"<systemitem role=\"package\">cvs-buildpackage</systemitem>"
11423
"<systemitem role=\"package\">cvs-buildpackage</systemitem> provides the "
"capability to inject or import Debian source packages into a CVS repository, ""build a Debian package from the CVS repository, and helps in integrating "
"upstream changes into the repository."
11433
"These utilities provide an infrastructure to facilitate the use of CVS by "
"Debian maintainers.  This allows one to keep separate CVS branches of a "
"package for <literal>stable</literal>, <literal>unstable</literal> and "
"possibly <literal>experimental</literal> distributions, along with the other ""benefits of a version control system."
11444
"<systemitem role=\"package\">debootstrap</systemitem>"
11449
"The <systemitem role=\"package\">debootstrap</systemitem> package and script ""allows you to bootstrap a Debian base system into any part of your "
"filesystem.  By base system, we mean the bare minimum of packages required "
"to operate and install the rest of the system."
11459
"Having a system like this can be useful in many ways.  For instance, you can ""<command>chroot</command> into it if you want to test your build "
"dependencies.  Or you can test how your package behaves when installed into "
"a bare base system.  Chroot builders use this package; see below."
11469
"<systemitem role=\"package\">pbuilder</systemitem>"
11474
"<systemitem role=\"package\">pbuilder</systemitem> constructs a chrooted "
"system, and builds a package inside the chroot.  It is very useful to check "
"that a package's build-dependencies are correct, and to be sure that "
"unnecessary and wrong build dependencies will not exist in the resulting "
"package."
11484
"A related package is <systemitem role=\"package\">pbuilder-uml</systemitem>, ""which goes even further by doing the build within a User Mode Linux "
"environment."
11493
"<systemitem role=\"package\">sbuild</systemitem>"
11498
"<systemitem role=\"package\">sbuild</systemitem> is another automated "
"builder.  It can use chrooted environments as well.  It can be used "
"stand-alone, or as part of a networked, distributed build environment.  As "
"the latter, it is part of the system used by porters to build binary "
"packages for all the available architectures.  See <xref "
"linkend=\"wanna-build\"/> for more information, and <ulink "
"url=\"&url-buildd;\"></ulink> to see the system in action."
11510
"Package uploaders"
11515
"The following packages help automate or simplify the process of uploading "
"packages into the official archive."
11522
"<systemitem role=\"package\">dupload</systemitem>"
11527
"<systemitem role=\"package\">dupload</systemitem> is a package and a script "
"to automatically upload Debian packages to the Debian archive, to log the "
"upload, and to send mail about the upload of a package.  You can configure "
"it for new upload locations or methods."
11536
"<systemitem role=\"package\">dput</systemitem>"
11541
"The <systemitem role=\"package\">dput</systemitem> package and script does "
"much the same thing as <systemitem role=\"package\">dupload</systemitem>, "
"but in a different way.  It has some features over <systemitem "
"role=\"package\">dupload</systemitem>, such as the ability to check the "
"GnuPG signature and checksums before uploading, and the possibility of "
"running <command>dinstall</command> in dry-run mode after the upload."
11552
"<command>dcut</command>"
11557
"The <command>dcut</command> script (part of the package <systemitem "
"role=\"package\">dput</systemitem>, <xref linkend=\"dput\"/>) helps in "
"removing files from the ftp upload directory."
11565
"Maintenance automation"
11570
"The following tools help automate different maintenance tasks, from adding "
"changelog entries or signature lines and looking up bugs in Emacs to making "
"use of the newest and official <filename>config.sub</filename>."
11578
"<systemitem role=\"package\">devscripts</systemitem>"
11583
"<systemitem role=\"package\">devscripts</systemitem> is a package containing ""wrappers and tools which are very helpful for maintaining your Debian "
"packages.  Example scripts include <command>debchange</command> and "
"<command>dch</command>, which manipulate your "
"<filename>debian/changelog</filename> file from the command-line, and "
"<command>debuild</command>, which is a wrapper around "
"<command>dpkg-buildpackage</command>.  The <command>bts</command> utility is ""also very helpful to update the state of bug reports on the command line.  "
"<command>uscan</command> can be used to watch for new upstream versions of "
"your packages.  <command>debrsign</command> can be used to remotely sign a "
"package prior to upload, which is nice when the machine you build the "
"package on is different from where your GPG keys are."
11602
"See the <citerefentry> <refentrytitle>devscripts</refentrytitle> "
"<manvolnum>1</manvolnum> </citerefentry> manual page for a complete list of "
"available scripts."
11610
"<systemitem role=\"package\">autotools-dev</systemitem>"
11615
"<systemitem role=\"package\">autotools-dev</systemitem> contains best "
"practices for people who maintain packages which use "
"<command>autoconf</command> and/or <command>automake</command>.  Also "
"contains canonical <filename>config.sub</filename> and "
"<filename>config.guess</filename> files which are known to work on all "
"Debian ports."
11626
"<systemitem role=\"package\">dpkg-repack</systemitem>"
11631
"<command>dpkg-repack</command> creates Debian package file out of a package "
"that has already been installed.  If any changes have been made to the "
"package while it was unpacked (e.g., files in <filename>/etc</filename> were ""modified), the new package will inherit the changes."
11641
"This utility can make it easy to copy packages from one computer to another, ""or to recreate packages which are installed on your system but no longer "
"available elsewhere, or to save the current state of a package before you "
"upgrade it."
11651
"<systemitem role=\"package\">alien</systemitem>"
11656
"<command>alien</command> converts binary packages between various packaging "
"formats, including Debian, RPM (RedHat), LSB (Linux Standard Base), Solaris, ""and Slackware packages."
11665
"<systemitem role=\"package\">debsums</systemitem>"
11670
"<command>debsums</command> checks installed packages against their MD5 "
"sums.  Note that not all packages have MD5 sums, since they aren't required "
"by Policy."
11678
"<systemitem role=\"package\">dpkg-dev-el</systemitem>"
11683
"<systemitem role=\"package\">dpkg-dev-el</systemitem> is an Emacs lisp "
"package which provides assistance when editing some of the files in the "
"<filename>debian</filename> directory of your package.  For instance, there "
"are handy functions for listing a package's current bugs, and for finalizing ""the latest entry in a <filename>debian/changelog</filename> file."
11694
"<command>dpkg-depcheck</command>"
11699
"<command>dpkg-depcheck</command> (from the <systemitem "
"role=\"package\">devscripts</systemitem> package, <xref "
"linkend=\"devscripts\"/>)  runs a command under <command>strace</command> to ""determine all the packages that were used by the said command."
11709
"For Debian packages, this is useful when you have to compose a "
"<literal>Build-Depends</literal> line for your new package: running the "
"build process through <command>dpkg-depcheck</command> will provide you with ""a good first approximation of the build-dependencies.  For example:"
11719
"dpkg-depcheck -b debian/rules build\n"
11725
"<command>dpkg-depcheck</command> can also be used to check for run-time "
"dependencies, especially if your package uses <citerefentry> "
"<refentrytitle>exec</refentrytitle> <manvolnum>2</manvolnum> </citerefentry> ""to run other programs."
11735
"For more information please see <citerefentry> "
"<refentrytitle>dpkg-depcheck</refentrytitle> <manvolnum>1</manvolnum> "
"</citerefentry>."
11743
"Porting tools"
11748
"The following tools are helpful for porters and for cross-compilation."
11753
"<systemitem role=\"package\">quinn-diff</systemitem>"
11758
"<systemitem role=\"package\">quinn-diff</systemitem> is used to locate the "
"differences from one architecture to another.  For instance, it could tell "
"you which packages need to be ported for architecture "
"<replaceable>Y</replaceable>, based on architecture "
"<replaceable>X</replaceable>."
11768
"<systemitem role=\"package\">dpkg-cross</systemitem>"
11773
"<systemitem role=\"package\">dpkg-cross</systemitem> is a tool for "
"installing libraries and headers for cross-compiling in a way similar to "
"<systemitem role=\"package\">dpkg</systemitem>.  Furthermore, the "
"functionality of <command>dpkg-buildpackage</command> and "
"<command>dpkg-shlibdeps</command> is enhanced to support cross-compiling."
11783
"Documentation and information"
11788
"The following packages provide information for maintainers or help with "
"building documentation."
11795
"<systemitem role=\"package\">docbook-xml</systemitem>"
11800
"<systemitem role=\"package\">docbook-xml</systemitem> provides the DocBook "
"XML DTDs, which are commonly used for Debian documentation (as is the older "
"debiandoc SGML DTD). This manual, for instance, is written in DocBook XML."
11808
"The <systemitem role=\"package\">docbook-xsl</systemitem> package provides "
"the XSL files for building and styling the source to various output "
"formats. You will need an XSLT processor, such as <systemitem "
"role=\"package\">xsltproc</systemitem>, to use the XSL stylesheets.  "
"Documentation for the stylesheets can be found in the various <systemitem "
"role=\"package\">docbook-xsl-doc-*</systemitem> packages."
11819
"To produce PDF from FO, you need an FO processor, such as <systemitem "
"role=\"package\">xmlroff</systemitem> or <systemitem "
"role=\"package\">fop</systemitem>. Another tool to generate PDF from DocBook ""XML is <systemitem role=\"package\">dblatex</systemitem>."
11829
"<systemitem role=\"package\">debiandoc-sgml</systemitem>"
11834
"<systemitem role=\"package\">debiandoc-sgml</systemitem> provides the "
"DebianDoc SGML DTD, which is commonly used for Debian documentation, but is "
"now deprecated (<systemitem role=\"package\">docbook-xml</systemitem> should ""be used instead).  It also provides scripts for building and styling the "
"source to various output formats."
11845
"Documentation for the DTD can be found in the <systemitem "
"role=\"package\">debiandoc-sgml-doc</systemitem> package."
11852
"<systemitem role=\"package\">debian-keyring</systemitem>"
11857
"Contains the public GPG and PGP keys of Debian developers.  See <xref "
"linkend=\"key-maint\"/> and the package documentation for more information."
11864
"<systemitem role=\"package\">debian-maintainers</systemitem>"
11869
"Contains the public GPG keys of Debian Maintainers.  See <ulink "
"url=\"&url-wiki-dm;\"></ulink> for more information."
11876
"<systemitem role=\"package\">debview</systemitem>"
11881
"<systemitem role=\"package\">debview</systemitem> provides an Emacs mode for ""viewing Debian binary packages.  This lets you examine a package without "
"unpacking it."
